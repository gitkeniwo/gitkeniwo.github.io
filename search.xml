<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>fly.io 的使用体验</title>
      <link href="2023-02-08-fly-io-tutorial/"/>
      <url>2023-02-08-fly-io-tutorial/</url>
      
        <content type="html"><![CDATA[<p>fly.io 类似于heroku，能帮忙托管运行App，是一种<a href="https://zh.wikipedia.org/wiki/平台即服务" target="_blank" rel="noopener">PaaS</a>服务。昨天我在尝试自搭(<a href="https://yunohost.org/oc/selfhosting" target="_blank" rel="noopener">self host</a>) 一款名为<a href="https://github.com/usememos/memos" target="_blank" rel="noopener">memos</a>的基于web的<a href="https://youtu.be/rOSZOCoqOo8" target="_blank" rel="noopener">zettelkasten</a>笔记应用时，在<a href="https://github.com/hu3rror/memos-on-fly" target="_blank" rel="noopener">官方推荐的部署方式</a>中发现了这个平台。</p><p>简单来说，fly.io能帮你快速部署一款app。部署时，你需要安装它的cli工具<code>flyctl</code>，然后利用它生成(<code>flyctl launch</code>)一份部署的配置文件<code>fly.toml</code>。在这份文件中，你只需填入docker image的地址(一般在<a href="https://hub.docker.com/" target="_blank" rel="noopener">docker hub</a>里)、litestream备份信息和fly volume的信息(storage，可以理解为划分储存空间？类似amazon S3)，就可以直接通过这份config指定的信息，将你的app从docker hub部署到fly.io上。</p><p>按照我的理解，其中 docker image是你的app的代码，fly volume是你的硬盘/储存空间，<a href="https://github.com/benbjohnson/litestream" target="_blank" rel="noopener">litestream</a>会按秒级间隔同步拷贝memos的sqlite数据库的WAL数据流到<a href="https://www.backblaze.com/b2/docs/" target="_blank" rel="noopener">Backblaze B2</a>以实现数据备份。有了数据备份，就算memos的上游发布新版本，或是fly.io机房着火，你也能从B2获取当前最新的闪照(snapshot)，这应该也是为什么<a href="https://github.com/hu3rror/memos-on-fly#:~:text=Verify%20the%20installation" target="_blank" rel="noopener">memos部署指南</a>提到可以通过swap到一个新的fly volume来检验是否成功备份。</p><p>因为memos算是高强度使用的应用了，后期数据量会暴涨，难免会有scalability和数据迁移的问题，所以我会常常想要把数据库拉到本地来手动备份。因为fly的app本质就是一个docker容器，这时候就需要使用fly的ssh工具<code>flyctl ssh</code>。查阅help手册后知道应该用sftp来拷贝vm上的文件。</p><p>根据<a href="https://github.com/pocketbase/pocketbase/discussions/537#discussioncomment-3914729" target="_blank" rel="noopener">这则回复</a>，可以用<code>fly ssh sftp shell</code>进入sftp的shell，然后用get命令来下载特定文件。</p>]]></content>
      
      
      <categories>
          
          <category> Tech </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cloud-computing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>放在微博图床的图片全挂了。</title>
      <link href="2023-01-25-weibo-image-hosting/"/>
      <url>2023-01-25-weibo-image-hosting/</url>
      
        <content type="html"><![CDATA[<p>微博图床，爷真是当初信了iPic的邪了。<br><em>注：ipic是少数几个支持无token上传微博图床的图床工具</em><br><img src="https://raw.githubusercontent.com/gitkeniwo/image_hosting/main/img/20230125150344.png" alt=""><br>想到之前看到有人说web2.0系的平台，因为是freemium模式，平台的用户本身就是他们的盈利点。用户的digital property自然也不由用户自己掌控。<br>现在即便是想补图，也无从知晓这里究竟放的是什么图片了。以后图片要么放可以信赖的渠道(Github)，要么还是放在本地吧。不氪金的东西不可能长久。</p>]]></content>
      
      
      <categories>
          
          <category> Blogging </category>
          
      </categories>
      
      
        <tags>
            
            <tag> image-hosting </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>N. Xiangyang Rd., Shanghai; Hennessy Rd., HK</title>
      <link href="2022-10-23-shanghai-hongkong/"/>
      <url>2022-10-23-shanghai-hongkong/</url>
      
        <content type="html"><![CDATA[<p>刚刚在推上看到了有女生在上海襄阳北路的街上举横幅。我很钦佩她们的勇气。</p><p><blockquote class="twitter-tweet"><p lang="zh" dir="ltr">上海 襄阳北路<br>两个女孩子拉起一条横幅<br>写着几个简单的汉字<br>不要 要 <br>不要 要 <br>不要 要<br>周围的人说，我们一直想干这个 <a href="https://t.co/p7WHqAtgBZ" target="_blank" rel="noopener">pic.twitter.com/p7WHqAtgBZ</a></p>&mdash; 李老师不是你老师 (@whyyoutouzhele) <a href="https://twitter.com/whyyoutouzhele/status/1584139964782350336?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">October 23, 2022</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></p><p>这条推文下面，有人挂出了香港人在观塘apm举白纸的抗议活动照片。这让我回想起了香港六一六两百万人大游行。</p><iframe width="560" height="315" src="https://www.youtube.com/embed/rWTZ77C3xb4" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><p>每次回顾这个延时影片，都会被画面中不断流淌过的人群触动到。19年8月我在旺角切身实地的目睹过体验过反送中游行，黑衣人占据了弥敦道六车道声嘶力竭的呼唤民主，两侧的商铺都很配合的关门了，后来我才意识到，那就是香港最后的怒吼了，也是香港人能自由表达政治诉求的最后的体面时光了。现在回忆起19年暑假的那段时光，总会感到一种渺然的虚幻与彷徨，covid之前的岁月都如梦一般不可考证，那个街头混杂着几十种语言的香港终究也成了昨日的世界中的某个段落。唯独，回想起在旺角信和中心门口的那个下午，背后是那时才刚刚发售的游戏<em>火焰之纹章：风花雪月</em>的巨型海报，2019年那个活力尚存的香港又跃现在我的眼前——那是我第一次感受到与整个人类的历史的书写方向如此接近，即便它是一个如此让人沮丧的拐点。从此我知道一个社会的生命力，不管你拥有再令人瞩目的经济指标，如果缺少了作为活力源头的<em>人</em>的存在，如果人们都畏首畏尾怖惧于<em>政治表达</em>，那么它就是一滩颓萎的死水。</p><p>两百万的大游行，最后换来了一纸恶法。我大概是从那时开始明白了这个颠扑不破的道理，即，永远不要同土匪谈判。Hence the following struggles 润ing all the way to the Netherlands.</p><p>上海法租界的这条推文勾起了关于HK的万种思绪，两座都是我很中意的城市。夜晚的法租界小马路，街边站满了年青人，两位勇敢的女生举着白色的横幅，上面写着呼应北京四通桥的「不要」、「要」，旁边骑车经过的路人都在让道。可惜上海早就不是70年前的那个上海了，街边站满的人，大部分都茫然而不自知目前「共和国」的境况，横幅也只能如苏联笑话一般be as vague as possible。两位勇敢的女生，不知道她们下半夜去向何方。而2020年之后，香港也不再是那个香港了。两百万人的队列艰难行过金钟门口的轩尼诗道，最后什么也没有争取到。Reddit网友说，What do you even expect? I mean, it’s China. 那个半只脚还搭在自由世界门槛里的香港最后也没能成功与土匪谈成，更何况沦陷区的这些星星之火呢？在这种悬殊的对比之下，法租界夜晚里的那一抹白，显得更加可贵了。</p><p>恰逢大会，铺天盖地的宣传之下，没有一个地方评论区是可以留言的，不免让人联想到中世纪天主教会，认定教宗是神意的唯一解读者。极权主义的幽灵，80年、50年后，重新盘旋在东亚次大陆的上空。这是人类历史的永恒轮回吧。</p>]]></content>
      
      
      <categories>
          
          <category> News Comments </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 毒力撕烤 </tag>
            
            <tag> hk </tag>
            
            <tag> ccp </tag>
            
            <tag> china </tag>
            
            <tag> shanghai </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>估计量的抽样分布 @ Probability &amp; Statistics Chapter 8</title>
      <link href="2022-10-22-p-and-s-08/"/>
      <url>2022-10-22-p-and-s-08/</url>
      
        <content type="html"><![CDATA[<p>这是 <a href="https://lib.hpu.edu.vn/handle/123456789/28621" target="_blank" rel="noopener">DeGroot, M. H., &amp; Schervish, M. J. (2012). _Probability and statistics_. Pearson Education.</a> 一书的笔记。 </p><p>8.1 小节讲了抽样分布(sample distribution)。抽样分布能作为中间量协助计算Bayes估计量，或者用以衡量有多大信心认为估计量$\hat{\theta}$接近真实参数$\theta$。<br>8.2 是卡方分布。卡方分布实际上是一种特殊的$\Gamma$分布($\alpha=\frac{m}{2}, \beta=\frac{1}{2}$).<br>8.3 继续探索了正态分布样本均值和样本方差的关系</p><ul><li>样本均值和方差是独立的。</li><li>样本方差与自由度为n-1的卡方分布差一个常数项系数，即$\sum^n_{i=1}\frac{(X_i-\bar{X_n})^2}{\sigma ^2} \sim \chi^2_{n-1}$，而$\mu$已知情况下，标准化后的方差是服从卡方1的，$\frac{(X_i - \mu)^2}{\sigma ^2} \sim \chi_{1}^2$ ，其加和服从自由度为n的卡方分布。换言之，将$\mu$替换为样本均值后，自由度减少了1.</li><li>因此，样本方差常以$\sigma’^2=\frac{S_n^2}{n-1}=\frac{\sum_{i=1}^n(X_i-\bar{X_i})^2}{n-1}$ 代替，因为此式为方差的无偏估计(unbiasedness)。<ul><li>关于自由度的理解：根据Wikipedia: “In statistics, the number of degrees of freedom is the number of values in the final calculation of a statistic that are free to vary.” 自由度衡量了统计量中能自由变换的样本数。</li><li>因为样本中残差和为0 $\sum^n_{i=1} (X_i - \bar{X_i})=0$，每一项 $X_i - \bar{X_i}$ 其实是样本关于样本均值的残差(residual)。在这n项的残差中，若知晓其中n-1项，必然通过零和知晓第n项，所以这n项是线性相关的，实际只有n-1项的信息是独立的，它们只能张成n-1维的线性空间。</li></ul></li></ul><p>8.4 t分布</p><ul><li>t分布的严格定义是 $X=\frac{Z}{(\frac{Y}{m})^{\frac{1}{2}}}$ , 其中Z为标准正态，Y为自由度为m的卡方。</li><li>构造$Z= \frac{\sqrt{n}(\hat{X_n}-\mu)}{\sigma}$  ，由于样本均值服从$N(\mu,\frac{\sigma^2}{n})$  (n个 $\frac{x_i}{n} \sim N(\frac{\mu}{n},(\frac{\sigma}{n})^2)$的加和)。</li><li>构造$Y = \frac{S^2_n}{\sigma^2}$，由8.3节知 $Y \sim \chi^2_{n-1}$</li><li>故$U = \frac{Z}{({\frac{Y}{n-1}})^{\frac{1}{2}}} \sim t_{n-1}$ , 化简U得到 <script type="math/tex">U= \frac{\frac{\sqrt{n}(\hat{X_n}-\mu)}{\sigma}}{(\frac{S^2_n}{\sigma^2 (n-1)})^ {\frac{1}{2}}}= \frac{\sqrt{n}(\hat{X_n}-\mu)}{(\frac{S^2_n}{ n-1})^ {\frac{1}{2}}}=\frac{\sqrt{n}(\hat{X_n}-\mu)}{\sigma'} \sim t_{n-1}</script><ul><li>样本方差$\sigma’$与方差的MLE估计$\hat{\sigma}$差了一个常数项</li><li>在sigma unknown和已经得到一组样本的情况下，由于$\mu$与$t_{n-1}$无关，在给定的置信系数下，我们可以通过寻找U在t分布下的置信区间$Pr(|U|&lt;t_{n-1}(\alpha /2))=1-\alpha$，通过Pr括号内的不等式变形得到$\mu$关于t分位数和样本方差的不等式，进而得到$\mu$的置信区间 $\bar{X_i} \pm t_{n-1}(\alpha/2)\frac{\sigma ‘}{\sqrt{n}}$ 。<br>最后，标准柯西分布（p.d.f. $f(x;0,1)= \frac{1}{\pi (1+x^2)}$）是自由度为1的t分布，标准正态分布是自由度为$\infty$的t分布。</li></ul></li></ul><p>8.5 讲了置信区间(Confidence Interval, CI)<br>8.6 讲了正态分布的贝叶斯推断<br>8.7 特地讲了无偏估计<br>8.8 提到了费歇尔信息量（Fisher Information)，它是C-R不等式的一个组成部分，可以判断UMVUE。</p>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> statistics </tag>
            
            <tag> sample-distribution </tag>
            
            <tag> undergraduate-course </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>改革开放的落幕（1978-2022）</title>
      <link href="2022-10-22-end-of-the-reform/"/>
      <url>2022-10-22-end-of-the-reform/</url>
      
        <content type="html"><![CDATA[<p>我想，今日的新闻出来后，中国40年来飞速发展的黄金时代也就落幕了。</p><p>健康即孱弱。<br>发展即停滞。<br>稳定即动荡。</p><p>自由世界的人需要认识到，他们面临的是一种史无前例的制度结构，能够完全控制人心为其所用的利维坦，毋庸置疑地说，其恐怖程度已经超越了冷战时期的USSR。自由世界的人不熟谙厚黑学，透过局域网捕捉到的象形文字只能解读出一团模糊不清的魅影，他们一定会在这方面吃到苦头。</p><p>阿姨预言的大洪水最终没有出现，可它却又真真实实早就来了，化作一团汹涌的暗流，从天津港、杭州湾、南中国海……从3万公里的海岸线发散而出，最终会搅动整个蔚蓝星球。</p>]]></content>
      
      
      <categories>
          
          <category> News Comments </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ccp </tag>
            
            <tag> memoir </tag>
            
            <tag> china </tag>
            
            <tag> historic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>统计推断 @ Probability &amp; Statistics Chapter 7</title>
      <link href="2022-10-16-p-and-s-07/"/>
      <url>2022-10-16-p-and-s-07/</url>
      
        <content type="html"><![CDATA[<p>这是 <a href="https://lib.hpu.edu.vn/handle/123456789/28621" target="_blank" rel="noopener">DeGroot, M. H., &amp; Schervish, M. J. (2012). _Probability and statistics_. Pearson Education.</a> 一书的笔记。 </p><h1 id="7-1-Statistical-Inference-统计推断"><a href="#7-1-Statistical-Inference-统计推断" class="headerlink" title="7.1 Statistical Inference 统计推断"></a>7.1 Statistical Inference 统计推断</h1><p>这一章首首先介绍了灯泡寿命问题。公司想要估计电子元件的failure rate，用未知的参数$\theta$表示，它服从指数分布（gamma分布）。根据大数定律6.2 我们知道独立同分布的样本均值 $\bar{X_i} \xrightarrow{p} \frac{1}{\theta}$   (依概率收敛)。根据Theorem 6.2.5 我们知道给这个式子套一层连续函数也是成立的，即 $1/ \bar{X_i} \xrightarrow{p} \theta$. 所以，我们可以用样本均值的倒数来近似failure rate。<br>因为我们不可能测量所有元件的寿命，参数$\theta$只能是hypothetically observable的。<br>接下来定义了统计模型和统计推断(statistical inference)。统计推断的例子：</p><ul><li>构造一个随机变量$\mathbf{Y}$  使得 $\text{Pr}(\mathbf{Y} \ge \theta | \theta)=0.9$。 这个RV $\mathbf{Y}$ 可以是观测到的一系列样本$X_1,…,X_m$的函数。</li><li>在观测到一系列样本$X_1,…,X_m$后，我们有多大把握认为$\theta \le 0.4$。</li></ul><p>后面提了下模型参数和参数空间。接着定义了统计量（statistic)：是样本$X_1,…,X_n$的实值函数$T=r(X_1,…,X_n)$，例如样本均值$\bar{X_i}$和样本最大值$\max (X_1,…,X_n)$.</p><h1 id="7-2-先验-amp-后验"><a href="#7-2-先验-amp-后验" class="headerlink" title="7.2 先验 &amp; 后验"></a>7.2 先验 &amp; 后验</h1><p>先验分布就是在做出观测之前，我们已知或假定参数$\theta$在参数空间$\Omega$上的可能分布。<br><em>e.g.</em> 灯泡寿命为指数分布，其损坏率$\theta$假定其先验分布为Gamma分布。<br>灯泡的损坏率$\theta$服从Gamma分布，它的概率密度为 <script type="math/tex">\xi(\theta)=\frac{(20,000)^4}{3!}\theta^3e^{-20,000\theta}</script><br>注意这里会被绕晕：先验概率分布是theta的函数，刻画了theta取各个值的可能性的密度。一般好像RV会用大写$X$，而p.d.f.会用小写$f(x)$?</p><p>然后介绍了后文model样本分布的一个notation，即$f_m(\mathbf{x}|\theta)=f(x_1|\theta)…f(x_m|\theta)$。这里，它反过来model了给定$\theta$条件下$X_1,…,X_m$的分布，每个观察值$X_i$都是在给定theta时<em>条件独立同分布(conditional i.i.d.)</em> 的，这时我们可以说$X_1,…,X_m$构成了概率密度函数$f(x|\theta)$的一组随机样本(form a random sample)。</p><p>Sensitivity Analysis是分析不同的Prior产生的Posterior有多大程度的不同。这里有一个fun fact是如果实验观测数据足够大，那么不同的先验对试验结果的影响是微乎其微的。这提示我们不必过于纠结怎么挑选先验 (experimenters might be less inclined to spend time specifying a prior distribution if it is not going to matter much)，但如果不选择先验的话，就没法计算后验概率了。</p><p>后验分布是给定一组样本下的条件概率。The conditional distribution of θ given $X_1, . . . , X_n$ is called the posterior distribution of θ, typically denoted as $\xi(\theta|x_1,…,x_n)$.<br>与后验分布相关的最重要的东西就是贝叶斯定理了，在随机样本的形势下，贝叶斯定义可以表述为</p><script type="math/tex; mode=display">\xi(\theta|\mathbf{x})= \frac{f(x_1|\theta)...f(x_n|\theta)\xi(\theta)}{g_n(\mathbf{x})}</script><p>其中$g_n(\mathbf{x})$为样本的联合概率分布(可由分数线上面部分对$\theta$积分，求得样本$\mathbf{x}$的边际分布得到)，整个式子即后验=先验x似然 / 证据 （$\text{Posterior} = \frac{\text{Likelihood}\times \text{Prior}}{\text{Evidence}}$，似然刻画了由先验到后验结果的可能性，证据则是各种结果的出现的可能性）<br>$e.g.$ 这节例子为对之前先验分布为Gamma的灯泡损坏率求后验。</p><ul><li>似然$f(x|\theta)$为给定theta下每个样本$x_i$的条件概率密度，由于灯泡寿命为指数分布，$f(x|\theta)=\theta e^{-\theta x}$</li><li>evidence是样本的联合概率分布，$g_n(\mathbf{x})=\int^{\infty}_0 f_n(\mathbf{x}|\theta)\xi (\theta) \text{d}x$ </li><li>最后的后验概率为 $\xi(\theta|\mathbf{x})=\frac{(\sum^n_{i=1} x_i+20000)^{n+4}}{\Gamma (n+4)}e^{-(\sum^n_{i=1} x_i+20000)\theta}$ ，是一个关于$\theta$的函数，其中样本$x_i$通过观察得到，视为已知的量。</li><li>图像上的改变： <img src="https://files.mastodon.online/media_attachments/files/109/180/095/693/192/069/original/a9a3331e21cd70e3.png" alt=""></li><li></li></ul>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> statistics </tag>
            
            <tag> undergraduate-course </tag>
            
            <tag> inference </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python Data Model @ 流畅的Python 01</title>
      <link href="2022-10-15-fluent-python-1/"/>
      <url>2022-10-15-fluent-python-1/</url>
      
        <content type="html"><![CDATA[<p>最近时常感觉有必要重学一遍python，故开此坑。<br>《流畅的python》这本书也是经典必读了，就从第一章开始写笔记。这章是一个引言，主要介绍了python的special methods。</p><h1 id="Special-Methods"><a href="#Special-Methods" class="headerlink" title="Special Methods"></a>Special Methods</h1><ul><li>Special Method是形如<code>__methodName__</code>的一类方法（也叫做”dunder method”，dunder是双下划线的略称），通过实现这类方法可以使得class以一些python通用的语法来调用一些特殊函数，使得代码语法更连贯，避免在用户编写的类里同样功能的函数有多种不同名称的情况。(Meant to be called by the python interpreter, not user (the only exception being <code>__init__()</code> which is for invoking the initializer for user superclass))<ul><li><strong>e.g.</strong> 通过实现 <code>__getitem__()</code>方法，可以直接通过 <code>className[0], className[1]</code>这样类名加方括号的形式来获取类中按照某种顺序的第N个元素(get item by index)</li><li>✴️ <code>__getitem__()</code>还能让我们的类变得<strong>iterable</strong>。<ul><li>可以用 <code>in</code> 看某个元素是否在里面</li><li>可以用 <code>for</code> 遍历</li><li>需要sorting的话，可以创建一个函数<code>sort_value()</code>用以得到某种具有顺序的值，最后用<code>for card in sorted(deck, key=sort_value):</code>即可按照这个函数输出的值来排序。</li></ul></li><li><strong>e.g.</strong> 实现<code>__len__()</code>方法就可用<code>len(class)</code>来获取事先定义好的某种length。  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> collections</span><br><span class="line"></span><br><span class="line">Card = collections.namedtuple(<span class="string">'card'</span>, [<span class="string">'rank'</span>, <span class="string">'suit'</span>])</span><br><span class="line"><span class="comment">#name 对应console里面的这个tuple的名字</span></span><br><span class="line"><span class="comment">#&gt;&gt;&gt;Card('2', 'diamonds')</span></span><br><span class="line"><span class="comment">#output: card(rank='2', suit='diamonds')</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FrenchDeck</span>:</span></span><br><span class="line"></span><br><span class="line">ranks = [str(n) <span class="keyword">for</span> n <span class="keyword">in</span> range(<span class="number">2</span>, <span class="number">11</span>)] + list(<span class="string">'JQKA'</span>) </span><br><span class="line">suits = <span class="string">'spades diamonds clubs hearts'</span>.split()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line"></span><br><span class="line">self._cards = [Card(rank, suit) </span><br><span class="line"><span class="keyword">for</span> suit <span class="keyword">in</span> self.suits </span><br><span class="line"><span class="keyword">for</span> rank <span class="keyword">in</span> self.ranks]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__len__</span><span class="params">(self)</span>:</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> len(self._cards)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__getitem__</span><span class="params">(self, position)</span>:</span></span><br><span class="line"><span class="keyword">return</span> self._cards[position]</span><br><span class="line"></span><br><span class="line"><span class="comment">#iterable</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> card <span class="keyword">in</span> deck:</span><br><span class="line">print(card)</span><br><span class="line"></span><br><span class="line"><span class="comment">#Card(rank='2', suit='spades')</span></span><br><span class="line"><span class="comment">#Card(rank='3', suit='spades')</span></span><br><span class="line"><span class="comment">#Card(rank='4', suit='spades')</span></span><br></pre></td></tr></table></figure></li></ul></li><li><strong>e.g.</strong> 模拟数值类 Emulating Numeric Types <ul><li>To build a vector type <code>Vector(a,b)</code>, you’ll have to implement  <code>__repr__()</code>, <code>__abs__()</code>, <code>__add__()</code> and <code>__mul__()</code></li></ul></li><li>书中继续介绍了<code>__repr__()</code>和 <code>__str__()</code>两个special methods, 一个是展示在console，一个是展示在print里的。<ul><li><code>__repr__()</code> is called by the repr builtin to display the string representation of the object in the <strong>console</strong>.</li><li>With repr, the console displays:  <code>Vector(9, 12)</code>, instead of <code>&lt;Vector object at 0x10e100070&gt;</code></li><li><code>__str__</code> is called by the <code>str()</code> built-in and implicitly used by the print function. It should return a string suitable for display to <strong>end users</strong>.</li></ul></li></ul><h1 id="Collection-API"><a href="#Collection-API" class="headerlink" title="Collection API"></a>Collection API</h1><p>接下来简单介绍了Python的Collection API。所有的类都是ABC(abstract base classes)。</p><ul><li>我们有top ABC，这些ABC都只有一个special method，如Iterable的<code>__iter__</code>, Sized的<code>__len__</code>. <ul><li>Interable要求支持unpacking和iteration</li><li>Sized要求实现len</li><li>Container要求支持<code>in</code>操作符</li></ul></li><li>Collection ABC (即 <code>collections.abc</code> module)合并了Iterable, Sized和Container三个接口。</li><li>Python不要求每个具体的类都要实现<code>__len__</code>，但如果他实现了，那么他就satisfy 了Sized Interface。<ul><li>具体关系为 <img src="https://files.mastodon.online/media_attachments/files/109/172/982/234/570/581/original/bbe8405151265044.png" alt=""></li></ul></li><li>其中，三个重要的Collections是<ul><li>Sequence, 规范了list, str 这些重要的built-in；只有sequence是reversible的，因为它支持arbituary ordering，其他两个不行。dict是假order，只保留key insertion order。</li><li>Mapping, 有<code>dict</code>, <code>collections.defaultdict</code>等实现</li><li>Set, 有<code>set</code>和<code>frozenset</code>等</li></ul></li></ul><h1 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h1><p>BTW,  在CPython里，builtin types的<code>len()</code>其实不是一个method，它只是从C struct里面读取了一个field的值，所以len()效率很高；因为builtin需要高效的实现。现在，用户可以通过实现<code>__len__</code>使得len()同样能用在自己的类上。</p>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> fluent-python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>转生荷兰的一天</title>
      <link href="2022-08-29-welcome-day/"/>
      <url>2022-08-29-welcome-day/</url>
      
        <content type="html"><![CDATA[<p><img src="https://i.imgur.com/0cEJhDL.jpg" alt=""><br>TU/e的Welcome day，今天也是第一次来e村（感觉真·进城了），做集体游戏的时候社恐犯了，破冰活动进行到一半自己回去了（其实是太累）。跟别人交流的时候，英文是没什么问题（跟某个同样来自zju的同学比起来），就是感觉没太多话题可以聊……或许我真的是个无聊的人吧。</p>]]></content>
      
      
      <categories>
          
          <category> Tweets </category>
          
      </categories>
      
      
        <tags>
            
            <tag> daily </tag>
            
            <tag> tue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>荷兰逃亡记</title>
      <link href="2022-08-26-run-to-holland/"/>
      <url>2022-08-26-run-to-holland/</url>
      
        <content type="html"><![CDATA[<h1 id="Timeline"><a href="#Timeline" class="headerlink" title="Timeline"></a>Timeline</h1><h2 id="2022-8-22-抵达深圳"><a href="#2022-8-22-抵达深圳" class="headerlink" title="2022.8.22 抵达深圳"></a>2022.8.22 抵达深圳</h2><ul><li>凌晨 我看到微博博主中国气象爱好者说刚刚有台风胚胎在吕宋岛形成，且大概率直接在广东登陆，当时半夜看到这消息人都麻了，一晚没睡。<ul><li><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h5oai9ppohj20u01szdlz.jpg" alt=""></li></ul></li><li>9:00 成都双流 -&gt; 深圳宝安。<ul><li>早上的成都三环路西南段真的堵麻了，过高新的时候还看到了IKEA，这种城市里的IKEA跟欧洲的美式IKEA对比真的强烈。先去双流T2送走了我弟，当天成都限电，连机场冷气都不足，双流KFC甚至没有灯。T2到T1可乘坐摆渡车。双流T1几乎就全是四川航空了。<img src="https://raw.githubusercontent.com/gitkeniwo/image_hosting/main/img/BD7AC6AC-7298-46D3-959D-B2D44284D595_1_105_c.jpeg" alt=""></li><li>12:30 在双流T1候机的时候，我就开始刷来港易了。来港易本身是深圳湾每天1000名额，小红书上8.10和七月份因为台风蛇口航班取消的同学都是当天可预约的，谁知我们24号左右同时也是港校开学高峰，最近一周的名额都早早的被抢完，只能刷刷别人退的票。起初是看到来港易22号还有，但刷新一下就没了，然后我猜就是可以刷出来的，由于前天晚上没睡觉，整个人都是恍惚的，在双流候机厅强忍着睡意不停刷新页面输入验证码，还好大约45分钟就刷出来了，刷出来我几乎整个人都松了一口气，当时还抱着船票不会取消的侥幸，马上给家人打电话报喜。<img src="https://raw.githubusercontent.com/gitkeniwo/image_hosting/main/img/_DSC0003.JPG" alt=""></li><li>川航空餐：豆腐干。。。😅<img src="https://raw.githubusercontent.com/gitkeniwo/image_hosting/main/img/IMG_9702.jpg" alt=""></li></ul></li><li>17:40 降落深圳。<ul><li>宝安机场设计又让人眼前一亮，简约的标识系统，真的像是国外了，出站核酸检测的设计也行云流水，算是粪坑中的优等生了。<img src="https://raw.githubusercontent.com/gitkeniwo/image_hosting/main/img/IMG_9708.jpeg" alt=""></li><li>我看蛇口可以坐地铁过去，于是提着两个大箱子上了地铁。十一号线体验很好，在宝安出机场的地上段还有落日海景。前海湾换乘稍微难受，难以想象5号线在前海湾到赤湾这一段可以设七八个站……最气人的是赤湾的5-2换乘，竟然不是同台，而且这两相互也没有延伸计划，真的不知道在前湾这片深圳的核心区为什么还会有这么失败的设计。<img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h5oalkoy2dj21400u0dlk.jpg" alt=""> </li><li>出蛇口地铁站后，要换乘蛇口接驳线B612去蛇口港，一块钱，可以刷深圳通（一个小程序），十分钟滚动发车，体验还是不错的。到蛇口港后，我先是取了票，再乘坐电梯到4楼，换乘citigo的电梯去了8楼酒店大厅。<img src="https://raw.githubusercontent.com/gitkeniwo/image_hosting/main/img/IMG_9728.jpg" alt="">  <img src="https://raw.githubusercontent.com/gitkeniwo/image_hosting/main/img/CA719327-84B5-4C4C-83A4-B6A58AE77920_1_105_c.jpeg" alt=""></li><li>蛇口港，几乎没有店开门，要吃饭只能外卖，记得提前下单，因为送过来要一个小时……我点了炒河粉和潮汕牛肉丸，配沙茶酱真的美味极了，广东美食我强推。<img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h5oac5q0fvj20u0140wll.jpg" alt=""> </li><li>夜里小红书开始坐不住了，很多人开始未雨绸缪，还好我白天抢到了来港易所以不慌，直接进行一个补觉。<img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h5oaaxx8akj20u01szq7m.jpg" alt=""></li></ul></li></ul><h2 id="2022-8-23-深圳闲逛"><a href="#2022-8-23-深圳闲逛" class="headerlink" title="2022.8.23 深圳闲逛"></a>2022.8.23 深圳闲逛</h2><ul><li>上午 11:40 去南医大深圳院区做了核酸，地铁过去大概40分钟。<img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h5oai9295kj21400u0teu.jpg" alt=""> 下午出报告后在粤康码可以查，然后去医院打印中英文+盖章。</li><li>中午/下午<ul><li>本来想就近在壹方城解决午饭，但宝安中心(1,5号线)地铁站根本不在壹方城地下开口，要走过去还要过马路……我就又进站直接去了益田假日广场(1,2号线世界之窗站)。<img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h5oaowyefij21400u045d.jpg" alt="">午饭过后，直奔了益田假日广场的苹果店(Apple Holiday Plaza)，深圳唯一一家，全深圳的人都挤在这里，以前的话还可以去香港买Apple（别说，观塘APM和广东道的Apple还真的方便），现在都封锁两三年了……下午两点的天才吧预约，苹果只让你提前十分钟签到……沟通了半天后，在Apple更换12 mini的电池，换电池期间我就去了隔壁万象天地（1号线高新园站）闲逛去了，在MUJI的最后一次消费（我附近只有杜塞才有MUJI了）然后还囤了优衣库的heattech。万象天地可以说是陆资商场天花板，招商、管理、建筑的设计感都是顶级，可惜当时手机在换电池，没能拍点皂片。</li></ul></li><li>18:00 左右 通知24-26号船票取消。小红书开始炸锅，可能也正好是返校高峰，这一波影响到的人太多了，这时才去抢来港易的人大概会疯吧…… 晚饭顺路去了深圳前海的海岸城。开始研究来港易过关，跟别人高强度聊天中，一直处于极度兴奋的状态。当晚Citigo酒店不太平啊，电梯间弥漫着焦虑气息，随便听人聊天都是蛇口船票的事，第二天要转战深圳湾了。</li></ul><h2 id="2022-8-24-过关、飞走"><a href="#2022-8-24-过关、飞走" class="headerlink" title="2022.8.24 过关、飞走"></a>2022.8.24 过关、飞走</h2><ul><li>10:00 起床<ul><li>由于失眠，一直睡到了早上十点，起床后开始收拾行李。当天的蛇口Citigo酒店人心惶惶，都笼罩在船票取消的阴霾之下😂</li></ul></li><li>12:00 深圳湾通关<ul><li>在蛇口港门口打了车去到深圳湾口岸。口岸附近弥漫着浓浓的村逼气息，我并不知道原来过关是要排队的，而且还要排这么长。</li><li>先是在口岸外的小道上排队，然后在口岸门口排队，最后口岸里还有无数个队伍，堪比上海迪士尼。中国边检，香港边检，来港易审查……深圳当天35度，周围拿miu miu、coach的小姐姐也一样全身打湿排着队。<img src="https://raw.githubusercontent.com/gitkeniwo/image_hosting/main/img/IMG_9910.jpg" alt=""></li><li>过了中国边检后，你能明显感受到服务态度好了很多。过关需要4个码，各种攻略都有，这里不再赘述。在中港边检的中间地带网很差，会有人让你打他电话进行电话核验，我推荐购买移动的香港流量包，我自己带的香港一天卡最后没用上……此时看到香港挂上三号风球了，三号之后就是8号。<img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h5oc1gkam5j20u00w60yo.jpg" alt="">  港sir会看你疫苗证明，核酸证明，你再说当天的飞机飞走，就不会为难你了，最后会给你一个核酸表（说万一你没有飞走的话，要在xx天去做核酸）和一个访客逗留贴纸（似乎19年来香港的时候也有）。我后来在香港机场跟别人交流才知道24号没有来港易的人最后也通关了。</li></ul></li><li>15:40 进入香港境内，研究如何去机场。<ul><li>过关后可以看到一些开往屯门、元朗的巴士指示牌，也有新界和市区的士的指示牌。他们返港人士在门口排核酸，并且等核酸出结果才可返回，我们去机场的就不用核酸了。<img src="https://raw.githubusercontent.com/gitkeniwo/image_hosting/main/img/IMG_9937.jpg" alt=""> 由于准备匆忙，没有带一分港币，我去坐车的时候问能不能支付宝的时候，的哥都不鸟我，他说可以收人民币，然后我说我身上只有欧元……然后就回头去坐大巴了。大巴可以拍visa，超级方便，建议全世界的公交都学学。<img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h5ob8vma3jj20u00y8tg4.jpg" alt=""> 香港这边有超大盒的维他柠檬茶，自贩机有卖，可支付宝或拍visa。虽然船票因为台风取消了，但当天香港艳阳高照，一朵云也没有，爷全身湿透…… <img src="" alt=""></li><li>先乘坐B3到屯门市中心巴士站换乘A33X机场线，下车可见屯门轻铁，我19年来港时没见过，这才第一次见到。<img src="https://raw.githubusercontent.com/gitkeniwo/image_hosting/main/img/IMG_9952.jpg" alt="">巴士站在天桥对面的洞里，要坐电梯上下天桥。我当时就没找到A33x的候车地点，在街面上傻等了很久，又社恐不会说广东话不敢问人，最后用塑料粤语问了路，所幸香港人都很友好会给你指路。A33X下午的发车时间远大于30分钟，我都怀疑自己今晚之前能不能到机场了，等到心情崩溃，最后当然车还是来了…… <img src="" alt=""> <img src="https://raw.githubusercontent.com/gitkeniwo/image_hosting/main/img/IMG_9956.jpg" alt=""></li><li>B3车上没有行李架，如果箱子太多只能站着扶着自己的行李，A33X巴士上有行李架，可去二楼第一排欣赏风景。<img src="https://raw.githubusercontent.com/gitkeniwo/image_hosting/main/img/IMG_9970.jpg" alt=""> <img src="https://raw.githubusercontent.com/gitkeniwo/image_hosting/main/img/7D8FED84-DD50-497B-9B2F-B21AE2A93279_1_102_o.jpeg" alt=""> <img src="https://raw.githubusercontent.com/gitkeniwo/image_hosting/main/img/D494B606-8034-4640-B717-3D385F38455E_1_102_o.jpeg" alt=""> <img src="https://raw.githubusercontent.com/gitkeniwo/image_hosting/main/img/IMG_9991.jpg" alt=""></li><li>A33X经过海底隧道到赤腊角后会先去港珠澳大桥口岸，再去HKG航厦，我当时坐到港珠澳的时候以为已经到机场了，一直狂按stop，司机问我去哪，我狂喊「给虫」😂，后来才发现是要在后面一站落车。</li></ul></li><li>约18:00 到达香港机场，在值机大厅溜达了一圈，几乎没有什么开着门的商店。只有一家偌大的M记，可以拍信用卡，是全场最热闹的地方。图：粤语 批 <img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h5oc45bd99j20uc0u0qcp.jpg" alt=""></li><li>18:45 开始排值机的队伍，大概排了一个半小时。<ul><li>期间结识了前面的一位朋友，他也是去阿姆。我带了一个28寸的大箱子，一个登机箱，土航让我把登机箱内电池全部取出，箱子托运，还跟我用英文尬聊……最后我才发现她是可以讲Mandarin的。</li></ul></li><li>20:00 过安检<ul><li>安检后走访客(visitor)离港通道出境，安检门前有不少香港人在送别朋友，成群结队的拍照，想必是要润带嘤和加国了，除了羡慕想不出别的话来。<img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h5oc6l8e4vj21fe0u0tjg.jpg" alt=""> 土航的登机口要坐摆渡列车去另一个航厦。过了安检后就十分唏嘘，香港机场的豪华商业配置，两边随手可见的GUCCI，LV店面都是大门紧闭的，想要揾食都找不到一家开门的店。李家坡真的笑麻，星洲人应该给总加速师送锦旗。<img src="https://raw.githubusercontent.com/gitkeniwo/image_hosting/main/img/IMG_0034.jpg" alt=""> <img src="https://raw.githubusercontent.com/gitkeniwo/image_hosting/main/img/IMG_0035.jpg" alt=""> <img src="https://raw.githubusercontent.com/gitkeniwo/image_hosting/main/img/IMG_0042.jpg" alt=""> </li></ul></li><li>22:20 登机。<ul><li>值机时候，香港已经挂起了八号风球，机场时不时就会滚动提醒。由于是午夜航班，我去洗手间洗了脸，把全身用纸巾擦了一遍，深圳湾一身臭汗根本没办法洗澡，还要一直持续到第二天差不多晚上11点（阿姆时间15点）。堂堂香港机场，饮水处连纸杯都不提供，我也没有带水杯，就只能忍着到时候去飞机上喝水。在场候机的有一半🀄️人，一半外人。<img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h5obvvd9m3j21k20u013y.jpg" alt=""> 一上机，就被一家人带两小孩强行换了座，但刚好换到了一排没人的座位，后面三个🀄️女聊天吵麻了，江苏内位一开口就是内味……问了一下，一个去NYU，一个去USC（应该去洛杉矶？），还有一位去UCD（都柏林？）。去UCD那位甚至已经结婚了，就是念完书再去美国跟他老公一起上班……</li><li>跟东亚大地说拜拜了。在这个肉食者皆为神经病的时代，不知道下次回来是几年以后了。</li></ul></li><li><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h5obulky38j21400u07b7.jpg" alt=""> 23:00 起飞，当时已经开始下雨了，在台风中，巨型客机也在不断颤抖着，我把安全带拉到很紧，努力消除失重感。所幸很快就飞离了珠三角空域，受台风影响很小了。<img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h5obt1ijh3j20sg0lc429.jpg" alt=""> 香港时间早上七点左右在黑海东岸格鲁吉亚上空。土航空餐很一般，之前过高的期待变成了失望……</li></ul><h2 id="2022-8-25-伊斯坦堡转机到阿姆，阿姆到Sittard"><a href="#2022-8-25-伊斯坦堡转机到阿姆，阿姆到Sittard" class="headerlink" title="2022.8.25 伊斯坦堡转机到阿姆，阿姆到Sittard"></a>2022.8.25 伊斯坦堡转机到阿姆，阿姆到Sittard</h2><ul><li>伊斯坦堡时间5 am: 到达伊斯坦堡新机场<ul><li>在瘟疫封锁的桂枝呆了快3年，第一次看到如此<strong>正常的社会</strong>：凌晨五点的伊斯坦堡机场人头济济，鲜有人佩戴口罩，航厦两侧的免税店与凋敝的香港机场HKG形成鲜明的对比。<img src="https://raw.githubusercontent.com/gitkeniwo/image_hosting/main/img/IMG_0074.jpg" alt=""><img src="https://raw.githubusercontent.com/gitkeniwo/image_hosting/main/img/IMG_0075.jpg" alt="">  <img src="https://raw.githubusercontent.com/gitkeniwo/image_hosting/main/img/IMG_0076.jpg" alt=""> </li><li>土耳其机场的wifi还要给钱，只免费提供1个小时，转机进闸排到天荒地老，还没网……</li></ul></li><li>伊斯坦堡时间6:40 am：值机<ul><li>伊斯坦堡飞往阿姆的飞机，这时航班上🀄️人就少得可怜了，只剩下一些土耳其人和荷兰人。</li><li>延误了快一个小时，因为飞机上我也没睡好，延误等待的过程中就一直疯狂昏迷，一直到航班快降落。<img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h5obkf0fpwj21400u0n23.jpg" alt=""> </li><li>降落到阿姆之前的景色很美，像来到了童话世界，在我的右手边可以看到碧蓝的海和海边的风车。我当时以为那就是Noordwijk（莱顿附近的海边小村），后来看了看地图，应该是阿姆北面的海，在湾里面。<em>草，我后来又看了下，阿姆北面的是<strong>湖</strong>，叫做<a href="https://en.wikipedia.org/wiki/IJmeer" target="_blank" rel="noopener">IJmeer</a>（艾湖, 荷兰语ij发音为艾），荷兰修了很多大坝（dams &amp; causeways)围了湖，如<a href="https://en.wikipedia.org/wiki/Afsluitdijk" target="_blank" rel="noopener">Afsluitdijk</a></em>。</li></ul></li><li>阿姆斯特丹时间10am：降落在Schiphol机场。<ul><li>降落后，首先出飞机会有人看你护照，问你去哪；</li><li>然后会有一个正式的入境窗口，给你护照盖章。</li><li>然后去等行李，大概转了一个小时才转出来……期间我去NS机器买了蓝色匿名OV卡。又极度焦渴，想到荷兰水龙头可以直饮，但去厕所看了眼根本没人在喝水😂，只能强忍口渴继续等行李。</li><li>行李出来后，走无申报通道过海关，是抽查，我根本没被查，以至于我走出来后还在问lsy海关在哪是我走丢了吗……<img src="https://raw.githubusercontent.com/gitkeniwo/image_hosting/main/img/IMG_0099.jpg" alt=""> </li></ul></li><li>阿姆斯特丹时间12am：乘坐NS前往Sittard<ul><li>出海关后就是NS Schiphol Airport Station，极简工业风的设计，太潮了，我跟朋友夸了很久。<img src="https://raw.githubusercontent.com/gitkeniwo/image_hosting/main/img/IMG_0100.jpg" alt=""> <img src="https://raw.githubusercontent.com/gitkeniwo/image_hosting/main/img/IMG_0103.jpg" alt=""> 史基浦站开放式乘车，NS只有柱子，没有闸机，所以等会车上有人验票，验票小哥还挺帅的。因为跟Holland2Stay约了3点的入住，我就没在机场逗留吃饭，只去啊哈（Albert Heijn超市）买了瓶水就走了。啊哈是真的不刷visa，只收现金或荷兰本地卡（Maestro）……<img src="https://raw.githubusercontent.com/gitkeniwo/image_hosting/main/img/3E96FCB8-5872-4B86-80B0-678B31CC7675_1_102_o.jpeg" alt=""></li><li>约一点半到了乌特勒支，1:45到了Boxtel, Boxtel与埃村之间在修路，要换乘接驳大巴（NS Snelbus)。遇到一家土耳其人（？妈妈戴了hijab）送孩子上学，他们给我让了电梯，因为两个大箱子，感受到了民风淳朴。<img src="https://raw.githubusercontent.com/gitkeniwo/image_hosting/main/img/679C6223-CC8C-4925-8A51-6E7E37F9E316_1_102_o.jpeg" alt="">两个大箱子的麻烦换乘之后，大概2:07到了埃村，又小跑着去赶了2:17开往Maastricht的IC列车。</li><li>最后15点过准时到了Sittard，PITground的确就在sittard门口，但拖着大箱子感觉还是超远……H2S的小哥也很nice，到这，脱脂之旅就结束了。<img src="https://raw.githubusercontent.com/gitkeniwo/image_hosting/main/img/IMG_0352.jpg" alt=""></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nederland </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo 提示 Accessing non-existent property &#39;lineno&#39;</title>
      <link href="2022-08-19-Accessing-non-existent-property-lineno/"/>
      <url>2022-08-19-Accessing-non-existent-property-lineno/</url>
      
        <content type="html"><![CDATA[<p><strong>起因</strong>： Hexo一直弹如下警告</p><p><img src="https://raw.githubusercontent.com/gitkeniwo/image_hosting/main/img/20220820012034.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(node:26384) Warning: Accessing non-existent property &#39;lineno&#39; of module exports inside circular dependency</span><br><span class="line">(Use &#96;node --trace-warnings ...&#96; to show where the warning was created)</span><br><span class="line">(node:26384) Warning: Accessing non-existent property &#39;column&#39; of module exports inside circular dependency</span><br><span class="line">(node:26384) Warning: Accessing non-existent property &#39;filename&#39; of module exports inside circular dependency</span><br><span class="line">(node:26384) Warning: Accessing non-existent property &#39;lineno&#39; of module exports inside circular dependency</span><br><span class="line">(node:26384) Warning: Accessing non-existent property &#39;column&#39; of module exports inside circular dependency</span><br><span class="line">(node:26384) Warning: Accessing non-existent property &#39;filename&#39; of module exports inside circular dependency</span><br></pre></td></tr></table></figure><p><strong>解决</strong>：</p><ul><li>见Hexo的<a href="https://github.com/hexojs/hexo/issues/4257" target="_blank" rel="noopener">Issue #4257</a>，是stylus在报错，可追溯至stylus的<a href="https://github.com/stylus/stylus/issues/2534" target="_blank" rel="noopener">Issue #2534</a>，已在stylus <code>@0.54.8</code> 之后版本修复。</li><li>利用 <code>npm ls --depth 2</code> 追杀看看哪些依赖还在用老版本的stylus（tmd这是2020年的issue了）</li><li><img src="https://raw.githubusercontent.com/gitkeniwo/image_hosting/main/img/20220820012625.png" alt=""> </li><li>发现这位还留在<code>@0.54.5</code></li><li>算了，直接<code>npm update stylus</code> 把所有stylus都更新一下。</li><li>更新之后就不报错了。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Blogging </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> npm </tag>
            
            <tag> nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>wild-pear-tree</title>
      <link href="2022-08-19-wild-pear-tree/"/>
      <url>2022-08-19-wild-pear-tree/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>将Hexo从2020 Intel MBP迁移到2021 MBP 14inch Apple Silicon</title>
      <link href="2022-08-04-applesilicon-hexo-migration/"/>
      <url>2022-08-04-applesilicon-hexo-migration/</url>
      
        <content type="html"><![CDATA[<p>昨天14寸mbp(m1 pro)到了之后，欢天喜地的用time machine备份再还原了一下午，谁知道time machine连同intel上的环境一起给还原到了apple silicon这边来，光是要怎么卸载intel的<a href="https://brew.sh" target="_blank" rel="noopener">brew</a>我都搞了半小时，（brew官网提供的<a href="https://docs.brew.sh/FAQ#how-do-i-uninstall-homebrew" target="_blank" rel="noopener">uninstall .sh脚本</a> 狠起来连自己都报错！)，最后我就开机狂按<code>cmd</code>+<code>R</code> 抹盘重装了。</p><p>BTW，淘宝在激活的当天可以买AppleCare+，我是花了¥1385直接在杭州朗朗数码买的，Care就是可以保3年，然后全球联保（去🇳🇱就几乎不用担心了），所以毫不犹豫的就买了，毕竟贵MBP换主板换屏幕都是5000+软妹币吧……Apple Silicon一路下来体验就是：爽！！！作为16-20年mbp模具和intel的受害者，我的2020 intel mbp 13inch 今年在进入4月份以来只能用mac fan control调到all time满速才可使用，更别说16G的内存在最近连看个Safari都会闪退。与此同时，mbp 14寸开了满满一dock的app都安静如鸡，流畅丝滑，内存一路绿灯，这才叫<strong>优雅</strong>啊！！！</p><p>进入正题，由于我在intel mbp 上的hexo是跑在node 12.x版本下的，今天去nodejs主页一看，稳定版都更新到16.x了（贵前端生态真的奇葩）。我依稀记得之前还专门写过因为兼容性问题从node 14.x版本<a href="https://gitkeniwo.github.io/2020-11-24-blog/">回滚的经历</a>（贵nodejs圈用什么管理环境？<a href="https://github.com/nvm-sh/nvm" target="_blank" rel="noopener">nvm</a>？）。怀着忐忑的心情，从GitHub上拉下来了hexo项目的最新提交，在新mac上配置好<a href="https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token" target="_blank" rel="noopener">github token</a>。先安装<code>hexo-cli</code>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure><p>全局安装package时(<code>-g</code> flag)遇到了permission denied的问题（EACCES)，主要是<code>mkdir &#39;/usr/local/lib/node_modules/hexo-cli&#39; \ mkdir: /usr/local/lib/node_modules/hexo-cli: Permission denied</code>命令权限不够，参照<a href="https://docs.npmjs.com/resolving-eacces-permissions-errors-when-installing-packages-globally" target="_blank" rel="noopener">npm的官方文档</a>在 <code>～</code>目录下自建一个npm全局包目录解决。</p><p>进入hexo folder，这时要根据你当时的package.json重新安装各种包<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><br>装好后，npm会让你audit，可以看看，不过没什么用。这时就可以<code>hexo server</code>了，然后居然直接跑起来了，虽然还是会有一些warning，但都是一些dependency不支持了之类的。<br><img src="https://raw.githubusercontent.com/gitkeniwo/image_hosting/main/img/Screen%20Shot%202022-08-05%20at%2001.33.22.png" alt=""></p><p>最后，再根据以前写的<a href="https://gitkeniwo.github.io/2022-02-23-inline-math/">一些博文</a>，开启数学公式一类的插件就可以了($try \space some \space math \space here \space 89^{64}$)，由于包都是重装的，所以这些细枝末节的修改最好也重新走一遍。这样来看，hexo基本上可以很好地迁移到 #apple silicon 这边来。</p>]]></content>
      
      
      <categories>
          
          <category> Blogging </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> apple-silicon </tag>
            
            <tag> mbp </tag>
            
            <tag> apple </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>荷语语法总结（更新中）</title>
      <link href="2022-06-21-dutch-grammar/"/>
      <url>2022-06-21-dutch-grammar/</url>
      
        <content type="html"><![CDATA[<p>感谢Jeremy 的提醒让我想起我还有这个博客，现在有空了就多来更新一下。</p><p>这篇汇总一下荷语语法。众所周知荷兰语(<em>Nederlands</em>)就是是弱化版的德语(<em>Deustch</em>)，更接近于德国北部和丹麦的低地德语(<em>Plattdeutsch</em>)，主要在荷兰本土和比利时北部弗拉芒大区( <a href="https://zh.wikipedia.org/zh-hans/弗拉芒大區/" target="_blank" rel="noopener">Vlaams Gewest</a> )使用。由于相当于英德杂糅，窝琢磨最近是不是快速过一遍荷语语法<del>（防止到时去AH超市完全看不懂只能靠google拍照翻译像个傻逼）</del>。</p><p>本篇文章将按照<a href="https://www.goodreads.com/author/show/396517.William_Z_Shetter" target="_blank" rel="noopener">William Z. Shetter</a>的 <a href="https://www.goodreads.com/book/show/2540460.Dutch" target="_blank" rel="noopener">Dutch: An Essential Grammar</a> 该书的编排顺序来总结。</p><h1 id="1-Pronunciation"><a href="#1-Pronunciation" class="headerlink" title="1 Pronunciation"></a>1 Pronunciation</h1><p>发音要注意的不是很多，和德语一样也是直接读就好了。</p><p>Vowels</p><ul><li>双写的为长音，读法是单写元音拉长</li><li><code>uu</code>是法语u /y/如<code>perdu</code>, <code>u</code>是德语ü /Y/如<code>für</code>, 分不清这两个<strong>吁</strong>的朋友建议去wikipedia。<ul><li>/Y/ (<a href="https://en.wikipedia.org/wiki/Near-close_near-front_rounded_vowel" target="_blank" rel="noopener">Near-close near-front rounded vowel</a>)</li><li>/y/ (<a href="https://en.wikipedia.org/wiki/Close_front_rounded_vowel" target="_blank" rel="noopener">Close front rounded vowel</a>)</li></ul></li><li><code>ui</code>是 /œy/，如huis (house) 对会法语/œ/的同学来说应该不难。我提供一个练习思路：先发au的音(o~u~)，再把嘴巴横向缩小(比如原来o的嘴形是椭圆，现在变成圆)，因为我们知道/y/这个音就是/u/将嘴巴横向缩小。根据ui与au这个音的对应关系，你也能发现荷语词的ui转写英/德文就是au这个音的对应。</li><li><code>uw</code> 是 /yu/，如Uw （your的尊称，U的所有格）</li><li><code>eu</code> 是 /øː/ 如 leuk (interesting, 一个超级常用的荷语词，leuk/lekker/mooi) </li><li><code>ij</code> 是 /ai/</li></ul><p>Consonants</p><ul><li><code>s</code> 荷兰人很喜欢把s发成近乎s和sch之间的音，即擦音送气(类似韩语<code>ㅅ</code>)。听起来非常有德语感，地理上荷兰也是英国德国的过渡。</li><li><code>z</code> 同理也要送气，这个是人不在荷兰就不太可能知道的小窍门。。</li><li><code>g</code> 最不寻常的就是这个g, 发音为清音/x/或浊音/ɣ/（<a href="https://zh.wikipedia.org/wiki/濁軟腭擦音" target="_blank" rel="noopener">濁軟腭擦音</a>），清音版即德语ch和汉语普通话h（区别于英文h），浊音版就是前者的浊化，在荷兰东部南部和弗拉芒语区常用。</li><li><code>r</code> 大小舌音，北荷兰喜欢发大舌(trilled R)，南荷兰喜欢小舌(gluttory R)，如林堡和布拉班特会发小舌擦音，详见<a href="https://blogs.transparent.com/dutch/pronouncing-the-r-in-dutch/" target="_blank" rel="noopener">此</a>。<ul><li>小舌音分布主要在兰斯塔德(Randstad)<del>wow, city slackers!</del>和比利时，参见 <a href="https://en.wikipedia.org/wiki/Voiced_uvular_trill#/media/File:Uvular_rhotics_in_Europe_updated.png" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Voiced_uvular_trill#/media/File:Uvular_rhotics_in_Europe_updated.png</a></li><li>另一个关于荷兰语r的讨论，有人说大舌音在荷兰更常见 <a href="https://www.reddit.com/r/linguistics/comments/3q5v94/discussion_pronunciation_of_the_letter_r_in_dutch/" target="_blank" rel="noopener">https://www.reddit.com/r/linguistics/comments/3q5v94/discussion_pronunciation_of_the_letter_r_in_dutch/</a></li><li><strong>(荷兰呆半年后update) 最好发大舌音，但不要太弹舌，跟西/意语还是很不一样的。意思一下就到位。</strong></li></ul></li><li><code>sch</code> 不在词尾的话发音为/sx/，注意有个/x/在，与德语不一样。例如史基浦机场Schiphol。</li><li><code>v</code>，南方和弗拉芒区是浊音，其他大部分地区v,f不分的。 <strong>(荷兰呆半年后update) 浊音 + 送气</strong></li><li><code>w</code> <strong>(荷兰呆半年后update) 不是英文的w！是/ʋ/(<a href="https://en.wikipedia.org/wiki/Voiced_labiodental_approximant" target="_blank" rel="noopener">Voiced labiodental approximant</a>)</strong> 发音要领：发v，但特别轻，轻到你不用咬嘴唇，而是微微擦过就好。</li><li><code>ch</code> 是/x/，在法语外来词发法语音， <code>tj</code>是 /tʃ/，</li><li><code>b</code>, <code>d</code>在词尾发清音，如heb</li><li><code>en</code> 在词尾去<code>n</code>，如大多数动词的复数形式。</li></ul><p>Assimilation</p><ul><li>通音(f, s, ch, g, v, z) +塞音(b, d, p, k, t)根据后面的塞音定清浊 <blockquote><p>hoofden [hoovden], ijsbeer [ijzbeer]</p></blockquote></li><li>塞音+塞音，一个浊则全部浊 <blockquote><p>uitbreiden [uidbreinden], op duizenden [ob duizenden]</p></blockquote></li><li>通音+通音，全清<blockquote><p>afzetten [afsetten], het is veel [het is feel]</p></blockquote></li><li>b p词尾发清音ik heb veel [ik hep feel]</li><li>连音浊化 lees ik [leez ik]</li></ul><h1 id="2-Spelling-Rules"><a href="#2-Spelling-Rules" class="headerlink" title="2 Spelling Rules"></a>2 Spelling Rules</h1><p>拼写规则相当重要，但也好掌握，重点就是哪些词需要双写。</p><h2 id="2-1-长短元音与闭音节"><a href="#2-1-长短元音与闭音节" class="headerlink" title="2.1 长短元音与闭音节"></a>2.1 长短元音与闭音节</h2><p>Short Vowels(<em>只</em>出现在闭音节)：</p><ul><li>闭音节单辅音结尾要双写 man - mannen, vul - vullen (fill)</li><li>双辅音结尾不用双写 arm - armen, kerk - kerken (church)</li></ul><p>Diphthongs / Long vowels（<em>可</em>出现在开音节）</p><ul><li><p>Long vowels 在开音节丢掉一个字母</p><blockquote><p>laan - lanen (avenues), boom - bomen (trees)<br>buur - buren (neighbors)<br>注意 zwaar-&gt; zwaarder 而 groot-&gt;groter</p></blockquote></li><li><p>开音节的单写元音都是长音</p><blockquote><p>sla (lettuce), zo (so), nu (now)</p></blockquote><p>  ㊟其中<code>ee</code> 总是要写成写成双写<code>zee</code>，这是为了区别不重度的单写<code>e</code> (ze, je, we) </p></li><li><p>闭音节的长音双写</p><blockquote><p>paarden (horses), feesten (parties)<br>hoofden (heads), buurten(neighborhoods)</p></blockquote></li><li><p><code>aai</code>, <code>ooi</code>, <code>eeu</code>,<code>oei</code>, <code>ieu</code> 不drop字母</p><blockquote><p>taai - taaie (tough), mooi - mooie (nice)<br>leeuw - leeuwen (lion), groei - groeien (grow)</p></blockquote></li></ul><p>㊟掌握拼写规则后下面的词组就能区分了</p><blockquote><p>zaken (zaak, affairs&amp;things) vs. zakken (zak, pockets (sack))<br>bomen (boom, trees) vs. bommen (bom, bombs)<br>manen (maan, moon) vs. mannen (men)<br>spelen (het speelt, they play),<br>spellen (they spell) </p></blockquote><h2 id="2-2-f-v-s-z"><a href="#2-2-f-v-s-z" class="headerlink" title="2.2 f / v, s / z"></a>2.2 <code>f</code> / <code>v</code>, <code>s</code> / <code>z</code></h2><p>与英文一样，加元音后缀时 f-&gt;v, s-&gt;z</p><blockquote><p>raaf - raven (ravens), geloof - geloven (they believe)<br>lief - lieve, serieus - serieuze, grijs - grijze/r</p></blockquote><p>not applicable</p><ul><li><p>s前为p,t,k</p><blockquote><p>rups -&gt; rupsen (caterpillars)<br>fietsen -&gt; fietsen (bikes)<br>heks -&gt; heksen (witches)</p></blockquote><p>  注意 vers -&gt; verzen , gans -&gt; ganzen (geese), huis -&gt; huizen</p></li><li><p>双写不变化</p><blockquote><p>stof -&gt; stoffen (materials)<br>das -&gt; dassen (neckties)</p></blockquote></li><li><p>特例</p><blockquote><p>biograaf - biografen, elf - elfen<br>kous - kousen (stockings), dans - dansen</p></blockquote></li></ul><h1 id="3-复数变化"><a href="#3-复数变化" class="headerlink" title="3 复数变化"></a>3 复数变化</h1><h2 id="3-1-加-en"><a href="#3-1-加-en" class="headerlink" title="3.1 加-en"></a>3.1 加<code>-en</code></h2><ul><li>大多数词都是en复数形式</li><li><p>不规则<code>-en</code></p><ul><li><p>短音变长音</p><blockquote><p>bad - baden /a:/ (bath)<br>dag - dagen (days)<br>dak - daken (roofs)<br>oorlog - oorlogen (wars)<br>god - goden (gods)<br>bedrag - bedragen (amount)<br>druif - druiven</p></blockquote></li><li><p>特例</p><blockquote><p>stad - steden<br>schip -schepen (ships)<br>lid - leden (members)<br>dag - dagen</p></blockquote></li><li><p>加<code>-eren</code></p><blockquote><p>been - beenderen (bones) !(benen, legs)<br>blad - bladeren (leaves) !bladen(trays, sheets)<br>ei - eieren (eggs)<br>kind - kinderen<br>lied - liederen (songs)<br>volk - volkeren<br>koe - koeien</p></blockquote></li></ul></li></ul><h2 id="3-2-加-s"><a href="#3-2-加-s" class="headerlink" title="3.2 加-s"></a>3.2 加<code>-s</code></h2><ul><li>主要是diminutives，体现为<code>-je</code>这个后缀<blockquote><p>huis -&gt;huisjes (小房子们)<br>meijes (小女孩们)<br>dubbeltjes （十分钱的硬币们）</p></blockquote></li><li>-el, -em, -en, -er, -aar, -erd, -e 结尾<blockquote><p>tafels (table), tantes(aunts)</p></blockquote></li><li>外来词，其中aeiou结尾的要加撇号<blockquote><p>taxi’s, firma’s, auto’s, paraplu’s(umbrellas)<br>microfoons, computers, romans(小说)</p></blockquote></li><li>特例+s日耳曼语词 ooms(uncles), broers(brothers), zoons(sons)</li></ul><h2 id="3-3-其他"><a href="#3-3-其他" class="headerlink" title="3.3 其他"></a>3.3 其他</h2><ul><li>拉丁词尾 <code>-us</code>变 <code>-i</code>这个不用说</li><li><code>-or</code>有两种变化，其中en形式重音移动到en前面那个音节</li><li><code>-heid</code>变为<code>-heden</code><blockquote><p>mogelijkheid -&gt; mogelijkheden (possibilities)<br>gelegenheid -&gt; gelegenheden (opportunities)</p></blockquote></li></ul><h1 id="4-冠词-指示代词"><a href="#4-冠词-指示代词" class="headerlink" title="4 冠词 指示代词"></a>4 冠词 指示代词</h1><h2 id="4-1-定冠词-de-het"><a href="#4-1-定冠词-de-het" class="headerlink" title="4.1 定冠词 de, het"></a>4.1 定冠词 <code>de</code>, <code>het</code></h2><p>荷语定冠词很好理解，<code>de</code> 就是合并了德语的der和die两个有性别词性(commen gender)，<code>het</code>就是das中性(neuter), het简写为<code>&#39;t</code>。</p><ul><li><p>所有的diminutives都是中性的，这也是为什么小女孩是het.</p><blockquote><p>de jongen -&gt; het jongentje<br>het huis -&gt; het huisje</p></blockquote></li><li><p>复数都用de，对应于德语都变成了die</p><blockquote><p>de kat - de katten, de straat - de straten<br>het huis - de huizen, het huisje - de huisjes</p></blockquote><p>  ⚠️复习拼写变化和复数加谁哈</p></li></ul><h2 id="4-2-不定冠词een"><a href="#4-2-不定冠词een" class="headerlink" title="4.2 不定冠词een"></a>4.2 不定冠词<code>een</code></h2><p>只有这一个，不论词性。复数不加。</p><ul><li>een (één)也是荷语数字一，对应德语ein，很好理解吧</li></ul><h2 id="4-3-指示代词"><a href="#4-3-指示代词" class="headerlink" title="4.3 指示代词"></a>4.3 指示代词</h2><ul><li>单数时 common gender与中性有别<ul><li>common gender: deze/die (对应德语diese)</li><li>neuter: dit/dat （对应德语dat）</li></ul></li><li>复数又统一了，用common gender的那对 deze/die <img src="https://raw.githubusercontent.com/gitkeniwo/image_hosting/main/img/20220621162659.png" alt=""><br>  单词：tuin(garden), gebouw(building)</li><li>指示代词可以单用（类似diese, dat)<blockquote><p>Dit is mijn oudste zus. (showing pictures) Zij studeert aan de universiteit van Delft.<br>This is my oldest sister. She is studying at the university of Delft.</p></blockquote></li><li>但操蛋的是形容一群人，group，band时候荷兰人又会用中性单数+动词复数，注意下！！！<blockquote><p>Dat zijn mijn kinderen. (Those are my children.)<br>Zij houden van harde muziek. (They love loud music.)<br>Wie is dat? Het zijn de buren. （Who is that? It’s the neighbors.）</p></blockquote></li></ul><p>原书插图助记 <img src="https://raw.githubusercontent.com/gitkeniwo/image_hosting/main/img/20220621163408.png" alt=""></p><h1 id="5-人称代词"><a href="#5-人称代词" class="headerlink" title="5 人称代词"></a>5 人称代词</h1><h2 id="5-1人称变化"><a href="#5-1人称变化" class="headerlink" title="5.1人称变化"></a>5.1人称变化</h2><p>直接上表感觉好一点<img src="https://raw.githubusercontent.com/gitkeniwo/image_hosting/main/img/20220621163521.png" alt=""></p><ul><li>分为重读<code>ij</code>和非重读<code>e</code>两种</li><li>u, jij, jullie, <ul><li>u对应sie或者vous🤔尊称，单复数都是u</li><li>jij, jullie就随便点了</li></ul></li></ul><h2 id="5-2现在时变位"><a href="#5-2现在时变位" class="headerlink" title="5.2现在时变位"></a>5.2现在时变位</h2><p>荷语动词变位超简单，</p><ul><li>动词有主干(stem)，主干加en变复数要遵循第二章的拼写规则。</li><li>第一人称单数ik直接加主干就行了</li><li>二三人称单数+<code>-t</code>，其中二人称单数疑问句drop <code>-t</code> <ul><li>这条规则原书表述为<em>When jij/je follows the verb and its subject, the verb always drops the ending -t, but not the t of the stem (zit je, praat je):</em></li></ul></li><li>复数都是-en，对比法语的（nous -ons, vous -ez, ils/elles -ent)</li><li>u（尊称）不论单复数都是+动词单数形式</li><li>hij在动词后面h不发音（跟英文口语很像）</li></ul><h2 id="5-3-一般疑问句"><a href="#5-3-一般疑问句" class="headerlink" title="5.3 一般疑问句"></a>5.3 一般疑问句</h2><h2 id="5-4-词序"><a href="#5-4-词序" class="headerlink" title="5.4 词序"></a>5.4 词序</h2><h1 id="6-Special-verbs-amp-Imperatives"><a href="#6-Special-verbs-amp-Imperatives" class="headerlink" title="6  Special verbs &amp; Imperatives"></a>6  Special verbs &amp; Imperatives</h1><h2 id="6-1-Special-verbs"><a href="#6-1-Special-verbs" class="headerlink" title="6.1 Special verbs"></a>6.1 Special verbs</h2><p>ending in <code>-t</code> or <code>-d</code>: t结尾二三人称单数不另外加t, d结尾正常变化</p><ul><li>zitten (to sit)</li><li>weten (to know)</li><li>rijden</li><li>houden</li></ul><p>ending in <code>-n</code></p><ul><li>gaan (to go): ga-gaat-gaan (ga jij?)</li><li>doen (to do): do-doet-doen</li><li>staan (to stand)</li><li>slaan (to strike)</li><li>zien (to see)</li></ul><p>komen (to come): kom-komt-komen 单数是短音，复数为长音</p><p>hebben - have(eng.) - haben(de.)<br>zijn - be(eng.) - sein(de.)</p><h2 id="6-2-Imperatives"><a href="#6-2-Imperatives" class="headerlink" title="6.2 Imperatives"></a>6.2 Imperatives</h2><p>the imperative is merely the <strong>stem</strong> of the verb</p><blockquote><p>Kijk eens! (Look!)<br>Wacht eens even! (Wait a minute)<br>Ga weg! (Get out!)</p></blockquote><p>More politeness礼貌版本：+<code>u</code></p><blockquote><p>Komt u binnen!<br>Gaat u zitten (go have a seat)</p></blockquote><p>More peremptoriness 粗鲁版本： use <code>-en</code> form</p><blockquote><p>Doorlopen! (close the door!)<br>Luisteren (Listen!)<br>Opletten (Pay attention!)</p></blockquote><h1 id="7-Adjectives"><a href="#7-Adjectives" class="headerlink" title="7 Adjectives"></a>7 Adjectives</h1><h2 id="7-1-Basic-Rules-Form-of-adjs"><a href="#7-1-Basic-Rules-Form-of-adjs" class="headerlink" title="7.1 Basic Rules: Form of adjs"></a>7.1 Basic Rules: Form of adjs</h2><ul><li>basic form: 做表语</li><li><code>-e</code> form: before noun (as attributives)<ul><li>Exception: Neuter + Singular + 不定冠词(indefinite) / 无冠词(no article) / elk, ieder, welk<blockquote><p>Groen gras groeit op een groot plein.<br>Zij heeft een rond gezicht(face).<br>⚠️ de words are not applicable to this rule (<em>een ronde tafel</em>)</p><ul><li>een klein kind</li></ul></blockquote></li></ul></li></ul><p>Exception</p><ul><li>不加<code>-e</code>的adj<ul><li><code>-en</code>:<ul><li>wollen, katoenen(cotton), gouden(golden), zilveren<ul><li>Dat is een mooie, zilveren ring.</li></ul></li></ul></li><li>外来语 </li><li>elk, ieder, welk + neuter singular nouns</li><li>Veel, meer, weinig, minder, geen + neuter singular nouns (as they also form a indefinite context)<ul><li>Er is veel Belgisch bier te koop in de VS.</li><li>Je kunt niet veel Belgische jenever in Amerika kopen.</li></ul></li><li>Idiomatic combinations<ul><li>het dagelijks leven</li><li>het Centraal Station</li><li>het openbaar vervoer (public transportation)</li><li>het voortgezet onderwijs</li><li>het Academisch Ziekenhuis</li><li>het Nederlands elftal</li><li>het voltooid deelwoord</li></ul></li></ul></li><li>加<code>-s</code>：iets/wat/niets (something/what/nothing) + adj （置后）<ul><li>Hij ziet iets moois in elke situatie.</li></ul></li></ul><h2 id="7-2-Adverbs"><a href="#7-2-Adverbs" class="headerlink" title="7.2 Adverbs"></a>7.2 Adverbs</h2><h2 id="7-3-Comparatives-and-superlatives-er-st"><a href="#7-3-Comparatives-and-superlatives-er-st" class="headerlink" title="7.3 Comparatives and superlatives: -er, -st"></a>7.3 Comparatives and superlatives: <code>-er</code>, <code>-st</code></h2><ul><li>groot - groter - grootst (注意拼写 长元音drop字母)</li><li>任意长度的adj都是加这些ending（区别英文）</li><li><code>-r</code>结尾单词加<code>-der</code>/<code>-st</code><ul><li>zwaar - zwaarder</li></ul></li><li>Irregulars<ul><li>goed beter best</li><li>veel meer  meest</li><li>weinig minder minst</li><li>graag, liever, het liefst (gladly, 德语gern)<ul><li>Wij spelen graag gitaar.</li><li>Zij drinkt liever kofﬁe dan thee. (prefer)</li><li>Hij leest het liefst een boek in bed. (likes best)</li></ul></li></ul></li><li>比较级 最高级也要加<code>-e</code><ul><li>het mooiere schilderij(painting)</li><li>de oudste boom</li></ul></li><li>the superlatives as adverbs 最高级用作副词，书面不加-e，口语可加-e<ul><li>Deze pullover is het warmst(e).</li></ul></li><li>the superlatives as nouns: de/het + <code>-ste</code><ul><li>Van deze auto’s neem ik de goedkoopste (auto).</li></ul></li><li>dan = than</li><li>(net) zo …(形容词原形) als … = as… as…<ul><li>Hij zingt bijna (net) zo goed als Piet.<ul><li>bijna(almost)</li></ul></li></ul></li></ul><h1 id="8-宾格-反身代词-不定代词"><a href="#8-宾格-反身代词-不定代词" class="headerlink" title="8 宾格 反身代词 不定代词"></a>8 宾格 反身代词 不定代词</h1><p>荷语的格跟英文一样，没有德语的第三格</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h4etacdiuwj21ak0jqq57.jpg" alt=""></p><h2 id="8-3-间接宾语"><a href="#8-3-间接宾语" class="headerlink" title="8.3 间接宾语"></a>8.3 间接宾语</h2><h2 id="8-4-反身代词-Reflexive"><a href="#8-4-反身代词-Reflexive" class="headerlink" title="8.4 反身代词 Reflexive"></a>8.4 反身代词 Reflexive</h2><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h4ete9p5nij21b00i8wh2.jpg" alt=""></p><p>当宾语为主语自己时，需要用反身代词。</p><ul><li>grammatically reﬂexive<br>  - </li><li>exclusively reflexive<ul><li>Hij vergist zich.（He makes an error.）</li><li>有点类似英文的 betake, bethink</li></ul></li></ul><p>e.g. zich verbazen(suprize), zich verheugen op(look forward), zich vergissen(make a mistake/error), zich herinneren(remember), zich veroorloven(allow, afford)</p><ul><li>Zij verbaast zich over de mooie bloemen in het park.</li><li>Wij verheugen ons op het feest.</li><li>Hij vergiste zich in de naam.</li><li>Jullie herinneren je niets meer van die reis.</li><li>U kan zich niet veroorloven zo’n fout te maken.<h2 id="8-5-Indeﬁnite-pronouns"><a href="#8-5-Indeﬁnite-pronouns" class="headerlink" title="8.5 Indeﬁnite pronouns"></a>8.5 Indeﬁnite pronouns</h2></li><li>allen: all people</li><li>alles: everything</li><li>alle, al de: all the</li><li>allemaal</li><li><p>allebei, beide, beiden</p><ul><li></li><li>注：Beiden is only used for people:</li></ul></li><li><p>iedereen</p></li><li><p>(n)iemand: “nobody,” “anybody”</p></li><li><p>de meeste: “the most”</p></li><li>de meesten: “most of the people” (only used for people):<ul><li>Note: When you add an -en to adjectives such as blank, zwart, oud, gehandicapt, etc., you turn the adjective into a noun that has the meaning “people who are . . .”:<ul><li>De zwarten leven vreedzaam samen met de blanken in deze streek.(The black people live in peace with the white people in this area.)</li><li>Er zijn gratis parkeerplaatsen voor gehandicapten in de stad. (There are free parking spaces for the handicapped in the city.)</li></ul></li></ul></li></ul><h1 id="9-物主代词"><a href="#9-物主代词" class="headerlink" title="9 物主代词"></a>9 物主代词</h1><p><img src="https://raw.githubusercontent.com/gitkeniwo/image_hosting/main/img/20220721200530.png" alt=""></p><h1 id="10-数字-日期-货币-度量-时间"><a href="#10-数字-日期-货币-度量-时间" class="headerlink" title="10  数字 日期 货币 度量 时间"></a>10  数字 日期 货币 度量 时间</h1><h2 id="10-1-Numbers"><a href="#10-1-Numbers" class="headerlink" title="10.1 Numbers"></a>10.1 Numbers</h2><p>Cardinal Numbers</p><ul><li>十几：<code>-tien</code>  对应 <code>-teen</code>,  <code>-zien (de.)</code></li><li>几十：<code>-tig</code> 对应 <code>-ßig\-zig</code>「特呵！」不是「刺嘻」了，30依然是<code>-tig</code></li><li>几十几：个位+<code>en</code>+十位 <code>eenentwintig</code> 对应德语 如 <code>einsundzwanzig</code></li><li>百：<code>honderd</code> 对应 <code>hunderd</code></li><li>千：<code>duizend</code> 对应 <code>tausend</code></li><li>1,000,000: één miljard</li><li>Irregular spelling for <code>veertien</code>, <code>veertig</code>, <code>dertien</code>, <code>dertig</code> , <code>tachtig</code></li><li>zeven, /z/; zeventig /s/; <code>e</code>-&gt;<code>eu [ø]</code> 发音改变，区别于negen</li><li><code>161</code>: honderdeenenzestig, <code>1003</code>: duizend drie 一百一千不加één</li><li><code>.</code>区别千位  ；<code>,</code>作为小数点<ul><li>1.333 duizend driehonderd drieëndertig</li><li>4.5 viereneenhalf; 1.5 anderhalf; 0.0 nul komma nul</li></ul></li></ul><p>Ordinal Numbers<br><img src="https://i.imgur.com/ylwWzO8.png" alt="https://i.imgur.com/ylwWzO8.png"></p><ul><li><code>-ste</code> ending: eerste; achtste</li><li><code>tweede</code>: double e spelling though in open syllable 拼写规则特例</li><li><code>1ste</code>这种缩写也有，但现在较为少见了</li></ul><h2 id="10-2-Dates"><a href="#10-2-Dates" class="headerlink" title="10.2 Dates"></a>10.2 Dates</h2><p>Days of the week:</p><ul><li>maandag, dinstag, woenstag, dondertag, vrijdag, zaterdag, zondag<br>Months (de maanden)</li><li>januari, februari, maart, april, mei, juni</li><li>juli, augusts, september, oktober, november, december</li><li>注：not capitalizied</li></ul><p>日期表示</p><ul><li>主要用Cardinal<ul><li>één januari (Jan. 1st)</li><li>vrijdag, veertien februari</li><li><strong>op</strong> zevenentwintig maart</li></ul></li><li>偶尔也用Ordinal<ul><li>Het is vandaag de achtste april.</li></ul></li><li>没有de maand 就必须用序数词了<ul><li>-Wanneer is je examen?</li><li>-Op de zevenentwintigste.</li></ul></li><li>写日期<ul><li>25 juni 1997</li><li>25-6-1997</li></ul></li></ul><p>年份</p><ul><li>before 2000: 1492 veertien (honderd) tweeënnegentig</li><li>after 2000: <ul><li>2001 tweeduizend één</li><li>2035 tweeduizend vijfendertig / twintig vijfendertig?</li></ul></li></ul><p>日期提问：</p><ul><li>Wanneer ben je geboren?</li><li>Op welke dag ben je jarig?</li><li>Welke dag is het vandaag?</li><li>In welk jaar leven we nu?</li></ul><h2 id="10-3-度量衡"><a href="#10-3-度量衡" class="headerlink" title="10.3 度量衡"></a>10.3 度量衡</h2><p>货币： 现在是欧元euro；以前弗拉芒区用belgian frank; 荷兰用gulden (gold)</p><p>度量：</p><p>Dat is dan vijftig euro samen. （<strong><em>samen</em></strong>: together)</p><p>Idiomatic:</p><ul><li>Zij zijn met z’n tweeën.</li><li>Wij zijn met ons drieën.</li><li>De hoeveelste is het vandaag?</li></ul><h2 id="10-4-时间"><a href="#10-4-时间" class="headerlink" title="10.4. 时间"></a>10.4. 时间</h2><p><img src="https://i.imgur.com/RduMnDb.png" alt=""></p><p>uur(hour); quarter(kwart)</p><p>Hoe laat is het?<br><strong><em>Het</em></strong> is ….:</p><ul><li>12.15 / kwart <strong><em>over</em></strong> twaalf </li><li>4.45 / kwart <strong><em>voor</em></strong> 5</li><li>zes uur / six o’clock</li><li>11.30 / half twaalf ⚠️ 是12点，是halfway towards 12的意思。。<br>Om (at):</li><li>Hoe laat komen jullie?</li><li>Om vijf uur. </li></ul><p>15min 以前 over +当前小时<br>15min 以后 voor half / overhalf /voor +下个小时<br>Over half:</p><ul><li>Het is vijf <strong><em>over half</em></strong> zes.  半小时-5min 到6点: 5:35</li><li>Hij gaat om tien over half tien. 9:40 半小时-10min到10点<br>Voor half:</li><li>Jij eet elke dag om vijf voor half zeven. 6.25 半小时+5min到7点 </li><li>Ik kom je om tien voor half acht halen 7.20 半小时+10min到八点<br>评价：神他妈。。。</li></ul><p>24小时制：</p><ul><li>16.00 u = 4pm, 口语一般说vier uur ’s middags.</li><li>表示精密的时间 出发时间才用24小时<ul><li>De trein vertrekt om 17.07u.(zeventien uur zeven)</li></ul></li><li>口语通常省略uur，除非是整点<ul><li>De winkel sluit om 16.30 u. (half vijf) (4:30pm)</li><li>Het feest begint om 19.00 u. (zeven uur)</li></ul></li></ul><p>介词：</p><ul><li>tegen: by<ul><li>Hij komt tegen zeven uur.</li></ul></li><li>omstreeks, rond: <ul><li>Zij vertrekt met de bus omstreeks/rond vijf over zeven. (vertrekken: to leave)</li></ul></li><li>voor: before<ul><li>Kan je voor tien uur komen?</li></ul></li><li>na: after<ul><li>Na vijf minuten viel hij in slaap.</li></ul></li></ul><p>搭配：</p><ul><li>Een uur of：around<ul><li>Hij werd wakker om een uur of half zeven.</li></ul></li><li><code>van-</code> + 时间: 今天……<ul><li>vandaag (today): Vandaag gaan wij naar de markt.</li><li>vanochtend (this morning): Vanochtend ﬂoten de vogels.</li><li>vanmiddag: Vanmiddag ga ik naar een lezing. (lezing: lecture)</li><li>vanavond: Vanavond ga je naar een concert.</li></ul></li><li><code>&#39;s ...s</code> 表示in the … / every …<ul><li>Ik lees de krant altijd ’s ochtends. (altijd: always)</li><li>We drinken ’s avonds een glas wijn.<ul><li>We drink a glass of wine in the evening.</li></ul></li><li>Zij doen ’s nachts alle deuren op slot.<ul><li>They lock all the doors at night.</li></ul></li></ul></li><li>op zaterdag = zaterdags, on Saturdays<ul><li>只有<code>’s maandags</code>, <code>’s woensdags</code> 不drop<code>&#39;s</code>，其他的礼拜日期都去掉了’s</li></ul></li><li>每一天 each day: elke dag</li><li>间隔…… every other day: om de twee dagen</li><li>每……几次 once a week: één <code>keer</code> per week<ul><li>twee keer per maand: 2 times a month</li></ul></li></ul><h1 id="11-amp-12-The-past-tense-过去式"><a href="#11-amp-12-The-past-tense-过去式" class="headerlink" title="11&amp;12 The past tense 过去式"></a>11&amp;12 The past tense 过去式</h1><p>弱变化动词不变音<br>强变化动词变音</p><h2 id="A-Weak-Verbs"><a href="#A-Weak-Verbs" class="headerlink" title="A.Weak Verbs"></a>A.Weak Verbs</h2><p>一般过去式: stem + <code>t/d</code> + e 单数(ik jij hij zij het u)/ en 复数 (wij jullie zij) </p><p>koken - k<em>oo</em>kte<br>horen - h<em>oo</em>rde</p><ul><li><code>t</code> or <code>d</code>?<ul><li><code>t</code> for voiceless consonants(t, k, f, s, ch, p)</li><li><code>d</code> for voiced consonants<ul><li>bestellen - bestelde (to order)</li><li>bouwen - bouwde (to build)</li><li>studeren - studeerde (to study) double <code>e</code></li><li>schudden - schudde </li><li>antwoorden - antwoordde</li></ul></li><li><code>-v</code>, <code>-z</code> 变为 f, s 加 <code>d</code><ul><li>leven (to live) - leefde</li><li>geloven (to believe) - geloofde</li><li>reizen (to travel)  - reisde</li><li>glanzen (to shine) - glansde</li></ul></li></ul></li></ul><p>一个有趣的注：关于兰斯塔德(Randstad)地区的g发音</p><blockquote><p>Most Dutch speakers in the Randstad area pronounce the sound spelled <code>g</code> in the same way as that spelled <code>ch</code>, which would make it seem as though a verb like leggen ought to have the ending <code>-te</code>, as does lachen. The <code>-de</code> ending, however, reﬂects the fact that for many Dutch speakers, particularly in the southern provinces and in the whole of Dutch-speaking Belgium, the sounds <code>g</code> (voiced) and <code>ch</code> (voiceless) are as sharply distinguished from one another as are v and f, or z and s.</p></blockquote><p>过去分词: <code>ge</code> + stem + <code>d/t</code></p><ul><li>不同于过去式，过去分词加<code>d/t</code>不双写（因为双写不出现在词尾）<br>praten - gepraat</li><li>发音上来说词尾<code>-d/-t</code>是相同的</li><li>be-, er-, ge-, her-, ont-, ver-. 这六个前缀的动词不加<code>ge</code><ul><li>bedanken - bedankte - bedankt</li><li>erkennen - erkende - erkend (to admit)</li><li>geloven - geloofde - geloofd (to believe)</li><li>herhalen - herhaalde - herhaald (to repeat) 双写</li><li>ontmoeten - ontmoette - ontmoet (to meet)</li><li>verklaren - verklaarde - verklaard (to explain)</li></ul></li><li><code>er-</code>只在erkennen，ervaren 两个单词出现</li><li><code>her-</code> 意思是again，herbouwen rebuild; herhalen resay; herrijzen rise again</li></ul><p>注：荷语的<code>-eren</code> 单词也要加<code>ge</code>，德语的<code>-ieren</code>单词是不加<code>ge</code>的，如studieren-studiert（而不是gestudiert）<br>荷语：noteren - genoteerd; activeren - geactiveerd; digitaliseren- gedigitaliseerd<br>德语：diskutieren - diskutiert; markieren - markiert; existieren - existiert</p><p>现在完成式：<br>(… 状语 +) hebben / zijn +宾语/状语+ 过去分词</p><ul><li>Hij heeft een huis gebouwd.</li><li>Bij de kruidenier hebben wij wat kaas besteld.</li><li>Ik heb hem vaak in de stad in de bibliotheek ontmoet.</li><li>Ik ben naar huis gewandeld. （wandelen (wandeln de.))</li></ul><h2 id="B-Strong-Verbs"><a href="#B-Strong-Verbs" class="headerlink" title="B. Strong Verbs"></a>B. Strong Verbs</h2><p>7类元音变音(umlaut, vowel changes)：<br>语言学的研究，参见 <a href="https://zhuanlan.zhihu.com/p/387221511" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/387221511</a></p><h1 id="15-未来时-进行时"><a href="#15-未来时-进行时" class="headerlink" title="15 未来时/进行时/"></a>15 未来时/进行时/</h1><h2 id="15-1-Future-tense"><a href="#15-1-Future-tense" class="headerlink" title="15.1 Future tense"></a>15.1 Future tense</h2><p>三种方式表达未来进行的动作：1)一般现在时；2）<code>gaan</code> + inf.; 3)<code>zullen</code> (more formal)</p><blockquote><p>Dat doe ik morgen. <em>present tense often comes with future adverbs</em><br>Zij komen pas later.<br>Volgend jaar trouwen we.<br>Zij ging weer liggen. (ging-&gt;gang) <em>She lay down again</em><br>Wij zullen naar de stad moeten gaan. </p></blockquote><p><code>zou/zouden</code> 为 <code>zullen</code> 的过去时，类似英文虚拟语气would. <code>Zou(den) + kunnen/moegen/willen + inf.</code> 也是委婉提问的方式(TUe的荷语老师说是<em>max politeness</em>，荷语中没有比它更polite的了)，因为现代荷兰社会本身没有什么等级观念，所以千万不要对朋友用zou(den)不然会被呛死。</p><blockquote><p>Dat zou hij nooit doen. <em>That he would never do.</em><br>Eigenlijk moest het morgen klaar zijn. <em>It really ought to be ready tomorrow.</em></p></blockquote><p><code>zullen</code> 还近似 <code>shall</code>, 可以用来提出邀请, 或是make a promise, 或是<em>imagine something</em></p><blockquote><p>Zullen we een kopje kofﬁe gaan drinken?<br>Ik zal je zeker helpen.<br>Het zal je maar gebeuren. <em>Imagine if that happened to you.</em><br>Je zult maar met die vent getrouwd zijn! <em>Can you imagine being married to that guy?!</em></p></blockquote><h2 id="15-2-现在时"><a href="#15-2-现在时" class="headerlink" title="15.2 现在时"></a>15.2 现在时</h2><ul><li><code>zijn</code> + <code>aan het</code> + <code>inf.</code></li><li><code>bezig zijn</code> + 1) <code>te</code> + <code>inf.</code>; 2) <code>met</code></li></ul><blockquote><p>Wij zijn op dit moment aan het voetballen.<br>Ik ben een brief aan ’t schrijven.<br>Hij is televisie aan het kijken.</p><p>Hij is bezig de klok te repareren.<br>Hij is bezig met de reparatie van de klok.</p></blockquote><h2 id="15-3-现在分词"><a href="#15-3-现在分词" class="headerlink" title="15.3 现在分词"></a>15.3 现在分词</h2><p>动词原形 + <code>d(e)</code> 形成现在分词。</p><h1 id="17-可分动词-Separable-Prefixes"><a href="#17-可分动词-Separable-Prefixes" class="headerlink" title="17 可分动词 Separable Prefixes"></a>17 可分动词 Separable Prefixes</h1><h1 id="Bonus-Deustch-Rechtschreibung-转写表"><a href="#Bonus-Deustch-Rechtschreibung-转写表" class="headerlink" title="Bonus:  Deustch Rechtschreibung 转写表"></a>Bonus:  Deustch Rechtschreibung 转写表</h1><p>之前看<a href="https://german.stackexchange.com/questions/28807/could-you-spell-dutch-according-to-the-german-system" target="_blank" rel="noopener">StackExchange</a>上有人尝试用德文正字法转写了荷语基础词汇，正好，我也打算维护一个荷/德/英同源词相互转写的Google Sheet，方便记忆A2/B1单词。</p><p>过段时间我会把sharesheet好好设计下，链接po在下面。</p>]]></content>
      
      
      <categories>
          
          <category> Languages </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nederlands </tag>
            
            <tag> grammar </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>他会回来的</title>
      <link href="2022-02-25-he-ll-be-back/"/>
      <url>2022-02-25-he-ll-be-back/</url>
      
        <content type="html"><![CDATA[<p>他会回来的。寒假回家，我跟家里人解释了无数次出国的理由，包括目前中国房价对十八线城市的家庭不友好，包括民主政治等一系列的问题，他们似懂非懂的接受了。等到酒桌饭局，跟别人吹壳子聊天，用陈腐的眼光来剖析我这个黑箱——十八线的人们对于目前中国东部的社会一无所知，我是他们与这个想象的同胞群体之间唯一的纽带，也就是社会网络分析中的「bridge」，之所以说是黑箱，因为他们根本不了解我在本科四年接受了多少新鲜事物，发生了多少改变——的时候，信息封锁的社会与体制施加在他们思想中的烙印又开始发烫了：「哎呀，他就是现在年轻，对西方社会充满了各种幻想——等到他自己去看了一遍，他才会知道。到时候他一定会回来的。」</p><p>尽管我的家里人相对其他朋友的家人已经算是开明——在豆瓣fiveland小组里，我见过不少友邻发言说，自己家人会以死相逼将自己留在国内——但我听到这种话的时候还会非常不舒服。不舒服，又怎样呢？不舒服罢了。你面对这庞大的体制，庞大的局域网，庞大的真理部，你是不能改变什么的。恶人依旧在高位逍遥，中国的权贵敛财运往国外，再教育自己的臣民「爱国」。而臣民自身，非常买账，因为整个十四亿人口都被严密的宣传机器灌输了利于统治的理念，黑客帝国就是我们本身。这还不够？我的内心从左派到右派，逐渐走向荒诞。因为肉身不可能抵抗炮火，生物大脑敌不过AI算法，我们只能任人宰割，统治者可以自信满满的说，他会回来的。</p><p>徐州丰县的村民认为被拐卖的妇女也是一定会回来的。百分之几的逃跑成功率，一个村同一个姓，她当然会被抓回来。对女性的剥削也逐渐拓展到所有的父权关系中，这就是传统中国社会的幽灵。普京认为乌克兰也一定是会回来的，后者就像一个被长期家暴而不敢轻举妄动的女性，在2014年小心翼翼的迈出民主化的步伐之后，又被拖回那个噩梦。普京还发表了万字长文，<strong>《论俄罗斯人和乌克兰人的历史统一》</strong>，来详细论述乌克兰为什么终将回到俄罗斯的「怀抱」。I mean, she just dont fall for you any longer. Let her go dude. Just move on. 即便她已不再爱你，你还坚信她会回来。啊对，她只是听信了别人的谗言，一定是她的朋友给她灌输了邪恶的思想。这是男女关系中harrassment的起源。台湾人，有百分之几对中国还存有幻想？</p><p>因为我们是一家人。所以你一定会回来的。HxH中，Zeno Zoldyck放Killua离开其宅邸的时候，他大笑着说Killua一定会回来，成为一个Assassin的。他那么自信。</p><p>如果我们善于类比，可以在各种各样的社会关系中找到这种信念的影子。我认为现代社会与民主化需要揭穿这层gaslighting的谎言，脱脂也就是要洗掉自己身上被遗毒的邪恶思想萌芽。让民众意识到这一点，发现这只是独裁统治者的一厢情愿，或者睁眼说瞎话。徐州事件让贵妃害怕到全网封杀，便是它已经在女性群体中掀起了不小的觉醒的波澜。我对国内事件不发表意见，进步也好，退步也好，我只关心我自家门口的一亩三分地。因为没必要参与到无聊的斗争之中。但可以的话，希望还是能把飞碟赶出地球最好。</p>]]></content>
      
      
      <categories>
          
          <category> Tweets </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 毒力撕烤 </tag>
            
            <tag> daily </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>无需主题支持 在hexo博客开启Inline Math</title>
      <link href="2022-02-23-inline-math/"/>
      <url>2022-02-23-inline-math/</url>
      
        <content type="html"><![CDATA[<p>Let’s have a look at inline math. <script type="math/tex">2^6=64</script><br>还以为hexo用别人的主题就没办法支持Mathjax，都准备换到jekyll叻……</p><p>参考 <a href="https://www.jianshu.com/p/e8d433a2c5b7" target="_blank" rel="noopener"> 这篇post</a>.</p><p>下面原文复制过来：</p><p> <br></p><p>在 hexo 中，你会发现我们不能用 Latex 语法来书写数学公式，这对于书写学术博客来说是很大的不便，因为我们会经常碰到很多的数学公式推导，但是我们可以通过安装第三方库来解决这一问题。</p><p><strong>第一步： 使用Kramed代替 Marked</strong><br>hexo 默认的渲染引擎是 <code>marked</code>，但是 <code>marked</code> 不支持 mathjax。 <code>kramed</code> 是在 marked 的基础上进行修改。我们在工程目录下执行以下命令来安装 <code>kramed</code>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall hexo-renderer-marked --save</span><br><span class="line">npm install hexo-renderer-kramed --save</span><br></pre></td></tr></table></figure><p>然后，更改<code>&lt;your-project-dir&gt;/node_modules/hexo-renderer-kramed/lib/renderer.js</code>，更改：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Change inline math rule</span><br><span class="line">function formatText(text) &#123;</span><br><span class="line">&#x2F;&#x2F; Fit kramed&#39;s rule: $$ + \1 + $$</span><br><span class="line">return text.replace(&#x2F;&#96;\$(.*?)\$&#96;&#x2F;g, &#39;$$$$$1$$$$&#39;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Change inline math rule</span><br><span class="line">function formatText(text) &#123;</span><br><span class="line">return text;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>第二步: 停止使用<code>hexo-math</code>.</strong></p><p>首先，如果你已经安装 <code>hexo-math</code>, </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall hexo-math --save</span><br></pre></td></tr></table></figure><p>然后安装 <code>hexo-renderer-mathjax</code> 包：<code>npm install hexo-renderer-mathjax --save</code></p><p><strong>第三步: 更新 Mathjax 的 CDN 链接</strong></p><p>首先，打开<code>&lt;path-to-your-project&gt;/node_modules/hexo-renderer-mathjax/mathjax.html</code></p><p>然后，把<code>&lt;script&gt;</code>更改为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdnjs.cloudflare.com&#x2F;ajax&#x2F;libs&#x2F;mathjax&#x2F;2.7.1&#x2F;MathJax.js?config&#x3D;TeX-MML-AM_CHTML&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></p><p><strong>第四步: 更改默认转义规则</strong></p><p>因为 hexo 默认的转义规则会将一些字符进行转义，比如 <code>_</code> 转为 <code>&lt;em&gt;</code>, 所以我们需要对默认的规则进行修改.<br>首先， 打开<code>&lt;path-to-your-project&gt;/node_modules/kramed/lib/rules、inline.js</code>,</p><p>然后，把:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">escape: &#x2F;^\\([\\&#96;*&#123;&#125;\[\]()#$+\-.!_&gt;])&#x2F;,</span><br></pre></td></tr></table></figure><br>更改为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">escape: &#x2F;^\\([&#96;*\[\]()# +\-.!_&gt;])&#x2F;,</span><br></pre></td></tr></table></figure><br>把<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">em: &#x2F;^\b_((?:__|[\s\S])+?)_\b|^\*((?:\*\*|[\s\S])+?)\*(?!\*)&#x2F;,</span><br></pre></td></tr></table></figure><br>更改为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">em: &#x2F;^\*((?:\*\*|[\s\S])+?)\*(?!\*)&#x2F;,</span><br></pre></td></tr></table></figure></p><p><strong>第五步: 开启<code>mathjax</code></strong></p><p>在主题 <code>_config.yml</code> 中开启 <code>Mathjax</code>， 找到 <code>mathjax</code> 字段添加如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mathjax:</span><br><span class="line">enable: true</span><br></pre></td></tr></table></figure><p>这一步可选，在博客中开启 Mathjax， 添加以下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: Testing Mathjax with Hexo</span><br><span class="line">category: Uncategorized</span><br><span class="line">date: 2017&#x2F;05&#x2F;03</span><br><span class="line">mathjax: true</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>通过以上步骤，我们就可以在 hexo 中使用 <code>Mathjax</code> 来书写数学公式。</p><p>作者：MaosongRan<br>链接：<a href="https://www.jianshu.com/p/e8d433a2c5b7" target="_blank" rel="noopener">https://www.jianshu.com/p/e8d433a2c5b7</a><br>来源：简书</p>]]></content>
      
      
      <categories>
          
          <category> Blogging </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>信息過載</title>
      <link href="2021-12-22-info-overload/"/>
      <url>2021-12-22-info-overload/</url>
      
        <content type="html"><![CDATA[<p>幫老闆寫專著的過程常常面臨著信息過載的困境：大腦已經達到了承載新知識的極限狀態，此後再接收的任何信息都像是丟進了一個無響應的數據庫中。Why We Sleep中提過，睡眠是人腦回顧總結當天接觸到的知識的階段。睡眠分了很多個階段，每個階段有不同的加固記憶的作業，有的作用到長期記憶，有的作用到短期記憶。人一天就睡八九個小時，睡覺時消化不了的神經衝動，一覺醒來就煙消雲散了。</p><p>那麼是否現在無所不在的社群媒體消息會侵蝕掉我們每日有限的記憶存儲空間呢？拿窩自身來說，窩每天固定要刷完Pawoo和豆瓣的時間線，除此之外，還常常關心reddit、twitter、weibo、HN news、The Verge⋯⋯關心完這些還不夠，窩還有RSS，然後翻閱留學論壇尋求跑路的信息，翻閱國境線，有matters，ptt，有個大英文主流媒體，從The Guardian到The Economist，從NYT到WSJ到最近支化的SCMP，播客生活也豐富多彩，The Daily每期必聽，中文民小傳播學播客也一期不落下，給人一種濃濃的政治參與感，NPR的podcastiverse，各種推歌電台。打開油管，日常關心時事與Tech News，遊戲測評到法文街訪到德文小Tips到世界各地的Vlog⋯⋯真的是太他媽多了！！What about my work? What about my academic engagement? Now I find myself can barely learn anything. I couldn’t look through those weighty tomes of textbooks and literatures to extract crucial information that may help with my literature survey. I couldn’t remember what I learned yesterday, even after some basic review work. The unnecessary knowledge is spamming my head and my cyber life and is damn too much for me to take in. 如果不是在狂熱的網頁瀏覽中「擠出時間」來盤算一下這些信息源，我都不知道我每天花了這麼多無用功去stuff my brain with such great deals of irrelevant messages. 這些訊息擠壓掉我們原本的工作休息時間，用信息時代的宣傳伎倆gaslighting us，讓我們在另一個維度共享虛假而繁榮的「全球化」。TikTok工程師想盡辦法讓人們沈溺於機械而無限的滑屏幕習慣之中，臉書在平台上推送無意義而controversial的scum。Web 2.0背後的幻滅感也讓人灰心喪氣。</p><p>我常常自詡不屑於任何人間關係，我喜歡優美的程序與代碼，我喜歡Robot，droid，喜歡不那麼可能傷害別人的事務，人機戀很美好。又回到了經典功利主義的永恆快樂機器話題，如果不是讓人無限著迷的算法吞噬了人們用於工作和生存的時間，吞噬了人們的身體健康和常被認為是唯一wholesome的人間關係，那麼這些給人帶來高額多巴胺分泌的程序、算法、資訊，一定就是壞的嗎？碳原子骨架串成生物大分子，有機物構成了生命體，智人製造了計算機和深度學習算法。然後呢？</p>]]></content>
      
      
      <categories>
          
          <category> Tweets </category>
          
      </categories>
      
      
        <tags>
            
            <tag> daily </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>before_xmax_2021</title>
      <link href="2021-12-17-before-xmax-2021/"/>
      <url>2021-12-17-before-xmax-2021/</url>
      
        <content type="html"><![CDATA[<p>つい卒業から半年も過ぎた。またクリスマスになった。</p><p>この半年間も完成した仕事はだいぶない。留学志願の件も棚上げ。シナの政治環境も悪化しつつある。日本はおミクロン変異株のせいで再び入国中止、そのゆえ翌年に来日の計画を諦めた。未来はヨーロッパに行くかもしれんが、キチンと準備する気配も全くなさそうだ。ただこのワンルームの下宿屋でランダムなウェブページをブラウスしたりして何かのはかないきっかけを待っていたそうだ。</p><p><img src="https://raw.githubusercontent.com/gitkeniwo/image_hosting/main/img/E7DAC647-9205-4F1D-953A-83C76D528274_1_105_c.jpeg" alt=""></p><p>さ、最低にいわれても、それが２０２１の年末になっちゃったよ。これからはただIELTSをちゃんと勉強して何かのヨーロッパ大学に申請しようか。ドイツ語の勉強も改めてやりしたい。学術的な論文を真面目に読みたい。アカデミックなやつになりたい。</p><p>過去は常に現実逃避のことをやったり世を拗ねた生き方をしたりしている。今からの運命はそれによってのリデンプションにしてほしい。</p><p>依舊奉行瘟疫清零政策的北京政權大概還會趁著這一波11月以來由對Omicron毒株的擔憂引發的全球大收緊繼續封關，隔離群眾，驅散民間輿論吧。兩年時間的服從性測試配合著天衣無縫的審查網路，已經造就了戰後以來最可怕的一群Jingoist分子。沒趕上黃金時代的90、00後的一生將被淹沒在當下的逆全球化浪潮之中，精神淨土不斷被buzzwords侵蝕（NFT, metaverse…），西方社會對眼前這隻極具威脅性的披著馬皮的狼綏靖和視而不見，窩對於這世界的未來沒有任何期待。</p><p>還是希望能有好一點的offer，以及一月份雅思不要繼續取消了。</p>]]></content>
      
      
      <categories>
          
          <category> Tweets </category>
          
      </categories>
      
      
        <tags>
            
            <tag> daily </tag>
            
            <tag> xmas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>颱風就要來了</title>
      <link href="2021-07-24-typhoon2021/"/>
      <url>2021-07-24-typhoon2021/</url>
      
        <content type="html"><![CDATA[<p>🌀🌀🌀</p><p><img src="https://raw.githubusercontent.com/gitkeniwo/image_hosting/main/img/IMG_3368.JPG" alt=""></p><p><img src="https://raw.githubusercontent.com/gitkeniwo/image_hosting/main/img/05C44E76-4ECF-44B4-AD48-FD1BBED53844-26231-00000AFC55C321DC.jpg" alt=""></p><p>從昨天開始，我就一直在做準備——購買食物和飲品，給移動電源充電，收衣服，把電動車停到樓道裡面。我一直有條不紊的準備迎接這場熱帶風暴——「<strong>煙花</strong>」，就像是一場水氣的feast，儘管一定會有人因此而失去生命，但這也是我力所不能及之處。</p><p>作為一個inland-born的四川人，這是我第一次準備迎接颱風。在浙大的前四年，颱風季也等於是一晃而過的暑假，意味著我每年都跟登陸浙江的颱風擦肩而過。唯一一次，是在19年暑假，我和L去廣東旅行，那時我們沒關心天氣——沒有關心天氣的經驗，飛機落地之後才知道香港掛起了八號風球。我還記得舉著弱不禁風的折疊傘和L在深圳福田區的寫字樓間躲雨的經歷。那時，颱風就像是被硬塞給我們的一件苦差，而現在，我就像沙漠中將死之人期盼綠洲泉水一般惦記著它，一方面，是前半個月杭州未下一滴雨的涸澤讓人對水感到興奮（忘了說了，前段時間內，我在ZJU續費了科研助理，改變了今後一年內的人生軌跡，也經歷了一次高溫下的痛苦搬家），另一方面我可以躲在結實的建築物裡面，透過玻璃窗欣賞它狂野而粗獷的美（如果能被稱作美的話）：做好準備之後再到來的颱風，就像在動物園的水晶房子裡的森林之王一樣，擁有著最原始的自然特性，卻不對我們造成傷害。</p><p>關於颱風的話題還有很多，無論是全球越來越頻繁的極端天氣，抑或是自然的不可控和人類對之的敬畏也好，我們都可以滿懷熱忱的去探索，從而消解時不時會爬上心頭的虛無之感。我最近也品嘗過了大份量的虛無感，在出租屋裡，不確定的未來，學不完的知識，疲憊的身體與靈魂，在颱風帶來充沛的水氣的同時，我的內心也逐漸被這場熱帶風暴所滋潤，我希望那桀驁不馴的氣旋能夠卷走這片土地上的暑氣和怒火，偉岸的積雨雲能洗刷掉落滿城市各個角落的灰塵。人類是這樣渺小，我憂鬱的日程表將被劃作前颱風時期和後颱風時期，基因讓我們皈依與戀自然教，又或許每個人的內心深處都是Masochistic的，就好像是一個幻想般的設定：在狂風驟雨之後，一切問題都會迎刃而解，地鐵不再擁擠，戀人們在街頭相擁。</p><p>大海對面，遲來一年的東京奧運會也在召開，遺憾的是這次我並沒有按計畫去到日本。我還要刷G，準備申請，做力扣，做題。從這個角度上說，颱風是乏味生活的調味劑。</p>]]></content>
      
      
      <categories>
          
          <category> Tweets </category>
          
      </categories>
      
      
        <tags>
            
            <tag> daily </tag>
            
            <tag> weather </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>in-the-aeroplane-over-the-sea</title>
      <link href="2021-06-21-in-the-aeroplane-over-the-sea/"/>
      <url>2021-06-21-in-the-aeroplane-over-the-sea/</url>
      
        <content type="html"><![CDATA[<iframe src="https://open.spotify.com/embed/album/0vVekV45lOaVKs6RZQQNob?theme=0" width="100%" height="380" frameBorder="0" allowtransparency="true" allow="encrypted-media"></iframe><iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/Wy4uOJMuBgE" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><p>Neutral Milk Hotel，我最近循環了一百遍。我很久沒有聽到過這麼讓我百感交集的音樂了。Jeff Mangum，他有激情，他聲嘶力竭，胡蘿蔔花之王，雙頭男孩，共產主義女兒，每一首曲子都peculiarly marvelous. 回家之後，想重新撿起我的吉他。</p><p>Anne Frank Theory and the recent meme boom.</p><p><a href="https://www.youtube.com/watch?v=5btK93QFAk0" target="_blank" rel="noopener">https://www.youtube.com/watch?v=5btK93QFAk0</a></p><p><a href="http://theinnisherald.com/in-the-aeroplane-over-the-sea-neutral-milk-hotels-timeless-album" target="_blank" rel="noopener">http://theinnisherald.com/in-the-aeroplane-over-the-sea-neutral-milk-hotels-timeless-album</a></p><p><a href="https://www.youtube.com/watch?v=LcaN759M7MU" target="_blank" rel="noopener">https://www.youtube.com/watch?v=LcaN759M7MU</a></p>]]></content>
      
      
      <categories>
          
          <category> Music </category>
          
      </categories>
      
      
        <tags>
            
            <tag> indierock </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>landscape-in-the-mist</title>
      <link href="2021-06-16-landscape-in-the-mist/"/>
      <url>2021-06-16-landscape-in-the-mist/</url>
      
        <content type="html"><![CDATA[<h1 id="Τοπίο-στην-ομίχλη"><a href="#Τοπίο-στην-ομίχλη" class="headerlink" title="Τοπίο στην ομίχλη"></a>Τοπίο στην ομίχλη</h1><p>Landscape In the Mist</p><p>旅途或者归途。</p><p><img src="https://raw.githubusercontent.com/gitkeniwo/image_hosting/main/img/Landscape.in.the.Mist.1988.720p.BluRay.FLAC.x264-HiFi-0009.png" alt=""></p><p><img src="https://raw.githubusercontent.com/gitkeniwo/image_hosting/main/img/Landscape.in.the.Mist.1988.720p.BluRay.FLAC.x264-HiFi-0010.png" alt=""></p><p><img src="https://raw.githubusercontent.com/gitkeniwo/image_hosting/main/img/20210616153559.png" alt=""></p><p><img src="https://github.com/gitkeniwo/image_hosting/blob/main/img/Landscape.in.the.Mist.1988.720p.BluRay.FLAC.x264-HiFi-0001.png?raw=true" alt=""></p><p><img src="https://github.com/gitkeniwo/image_hosting/blob/main/img/Landscape.in.the.Mist.1988.720p.BluRay.FLAC.x264-HiFi-0003.png?raw=true" alt=""></p><p><img src="https://github.com/gitkeniwo/image_hosting/blob/main/img/Landscape.in.the.Mist.1988.720p.BluRay.FLAC.x264-HiFi-0002.png?raw=true" alt=""></p><p><img src="https://github.com/gitkeniwo/image_hosting/blob/main/img/Landscape.in.the.Mist.1988.720p.BluRay.FLAC.x264-HiFi-0004.png?raw=true" alt=""></p><p><img src="https://github.com/gitkeniwo/image_hosting/blob/main/img/Landscape.in.the.Mist.1988.720p.BluRay.FLAC.x264-HiFi-0006.png?raw=true" alt=""></p><p><img src="https://github.com/gitkeniwo/image_hosting/blob/main/img/Landscape.in.the.Mist.1988.720p.BluRay.FLAC.x264-HiFi-0008.png?raw=true" alt=""></p><p><img src="https://raw.githubusercontent.com/gitkeniwo/image_hosting/main/img/20210616153716.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Film </category>
          
      </categories>
      
      
        <tags>
            
            <tag> director-theodoros-angelopoulos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Untitled</title>
      <link href="2021-05-26-Untitled-35/"/>
      <url>2021-05-26-Untitled-35/</url>
      
        <content type="html"><![CDATA[<p>一個雨夜、一些顏色</p><p><img src="https://raw.githubusercontent.com/gitkeniwo/image_hosting/main/img/C090AEA5-EAF5-43D7-B38A-0D6EC0C7383C_1_105_c.jpeg" alt=""></p><p><img src="https://raw.githubusercontent.com/gitkeniwo/image_hosting/main/img/3F1E23EF-6FB8-4E18-BBD5-80634AF0CF3A.jpeg" alt=""></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqw4w9z1ozj31900u0b0r.jpg" alt="E3ED9A17-5F37-4222-89C1-0F43E63C8342"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqw51k7nqhj31900u0hdt.jpg" alt="47D12907-4D45-484A-936A-3DFE4EF494B1_1_201_a"></p><p><img src="https://raw.githubusercontent.com/gitkeniwo/image_hosting/main/img/C330D616-A789-4145-9F02-FAAD5E392100.jpeg" alt=""></p><p><img src="https://raw.githubusercontent.com/gitkeniwo/image_hosting/main/img/D2B99FB7-51ED-4771-80B2-7109FD8AE0D5_1_201_a.jpeg" alt=""></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqw51z18s2j30u60k4wkl.jpg" alt="89738740-F38F-4E42-9B26-CE0C68976139_1_105_c"></p><p>杭州，幾乎是水簾洞了。</p><p><img src="https://raw.githubusercontent.com/gitkeniwo/image_hosting/main/img/E5FB39E5-82A7-4A94-B043-96342EE82004_1_105_c.jpeg" alt=""></p><p>阿莫多瓦也總是這樣鮮豔</p><p>iPhone 12 mini, NOMO 135 Ti 直出</p>]]></content>
      
      
      <categories>
          
          <category> Tweets </category>
          
      </categories>
      
      
        <tags>
            
            <tag> photo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>We will always have Iceland.</title>
      <link href="2021-05-24-Untitled-34/"/>
      <url>2021-05-24-Untitled-34/</url>
      
        <content type="html"><![CDATA[<p>今天聽音樂偶然切到了<em>The Secret Life of Walter Mitty</em>的OST，然後聽的情緒一陣激動。</p><p>第一次看這部電影的時候大概剛上大一，觀影結束之後當時的我似乎並沒有覺得本片具有那種「觸及心靈」的能量，我當時覺得很可笑，「白左」，說它形式大於內容，風光勝過電影敘述云云啦。之後也陸陸續續的又看過好幾遍，也許是因為其名聲在外，也很難不通過各種渠道接觸到它。當我逐漸在四疊半的大學生活中發現層夢想過的理想主義生活不過是一種可悲的「幻覺」，當我沈浸在平淡無奇、味同嚼蠟的日復一日之中，有時候在騎車的路上瞥見紫金港天空上候鳥飛過，或是乏味的熱天午後站在青溪宿舍陽台上望著窗外一成不變的景色時，我突然感受到我的內心也有一個做白日夢的小人在發著牢騷，看著Ben Stiler 飾演的Walter Mitty在NYC一家枯燥的報社做著枯燥到極點的工作，it suddenly occurred to me that，我們絕大多數人也只能是被現實塞進沙丁魚罐頭的Walter Mitty，每天一早從Long Island趕通勤電車，被婚戀網站和約會軟件玩弄，被世界厭惡。這樣的我們，微不足道的我們也是有自己的想法的，在努克近海從直升機跳到輪船上，在冰島Vesturhorn 1号公路一路滑行，穿越半個地球到喜馬拉雅山。這些場景，即便仍然透露著濃濃的商業片味道，在現在的我看來，也是羨慕和感動極了。你可以說它是雞湯，甚至算不上正能量——阿共才不想讓你翹班去雷克雅未克看火山爆發——它確實提醒了我們：生活還有無數種可能性。在天天豆漿饅頭共享單車地鐵的日常中，在科研搬磚做實驗改稿的painful學術裡，在AQI200或雷雨颱風沙塵暴的極端天氣下，在專橫無理企圖控制人心的賽博空間二進制的0與1之間，我們還有白日夢是沒有地獄般的他人可以在自身的主體性之內干涉的，這種意識層面的「積極自由」給予我們這樣一種可能性，透過當前糟糕無比的生活編織的幻象看見我們內心真正的價值與情感，努力讓自身在物質層面獲得自由，這樣的信念，用<em>Casablanca</em>裡面的台詞來說，就是<strong>We will always have Iceland.</strong></p><p><img src="https://raw.githubusercontent.com/gitkeniwo/image_hosting/main/img/6601EA53-F084-461D-8341-6940A73C4E0E_1_201_a.jpeg" alt=""></p><p>整張OST的音軌再生完畢，我思考了一會，打開了notion web版，在某個角落裡寫下：</p><blockquote><p>30歲前歸化日本。</p><p>40歲前移居歐洲。</p><p>然後環遊世界，做一個無國籍人士。</p></blockquote><p>希望我的秘密生活，也能隨著一張神秘的照片、或是一盤讓人心潮起伏的OST，向我徐徐展開。</p><p><del>順便一說，這盤OST全都是神級選曲，幾乎每首都有那種特別莊嚴、宏大的伴奏，最開始好像就是從本片OST翻唱版本的鮑爺的神神曲<em>Space Oddity</em>聽說本片的。</del></p>]]></content>
      
      
      <categories>
          
          <category> Tweets </category>
          
      </categories>
      
      
        <tags>
            
            <tag> thoughts </tag>
            
            <tag> film </tag>
            
            <tag> tweets </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Untitled</title>
      <link href="2021-05-20-Untitled-33/"/>
      <url>2021-05-20-Untitled-33/</url>
      
        <content type="html"><![CDATA[<p>在油管上看了Israel和Gaza之間的武力衝突，然後哭了。</p><p>人類是多麼的專橫，又是多麼的脆弱阿。</p><p>我們還有什麼理由對二十一世紀的後4/5抱有樂觀的信心呢？</p>]]></content>
      
      
      <categories>
          
          <category> Tweets </category>
          
      </categories>
      
      
        <tags>
            
            <tag> news </tag>
            
            <tag> emotions </tag>
            
            <tag> modernity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cactus主题Search跳转问题的小debug</title>
      <link href="2021-05-18-hexo/"/>
      <url>2021-05-18-hexo/</url>
      
        <content type="html"><![CDATA[<h1 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h1><p>Search Page上的搜索模块，搜索关键词的时候可以加载出结果，但点击链接跳转的时候出现问题，404代表github pages找不到该页面。</p><p><img src="https://raw.githubusercontent.com/gitkeniwo/image_hosting/main/img/20210518153234.png" alt=""></p><p><img src="https://raw.githubusercontent.com/gitkeniwo/image_hosting/main/img/20210518153017.png" alt=""></p><p>再让我们仔细看一下，原来这里生成的链接是跳转到了<code>/search/</code>页面+文章标题的地址去了，根据我们贫乏的知识，hexo的文章都是放在post目录下的，并不会在任何<code>/search/</code>目录之下。</p><p><img src="https://raw.githubusercontent.com/gitkeniwo/image_hosting/main/img/20210518161621.png" alt=""></p><p>又去确认了一下，这篇文章本来应该是放在在根目录下，并没有那个<code>/search/</code>路径。</p><p><img src="https://raw.githubusercontent.com/gitkeniwo/image_hosting/main/img/20210518153943.png" alt=""></p><h1 id="解决："><a href="#解决：" class="headerlink" title="解决："></a>解决：</h1><p>参考了一下原主题repo下搜索问题的<a href="https://github.com/probberechts/hexo-theme-cactus/issues/247" target="_blank" rel="noopener">issue</a>。</p><p>Hexo的search模块都是每个主题自己想办法实现的，有的直接用到了<code>hexo-generator-search</code>这个插件帮忙生成，有的是自己写的，search页面实现搜索功能靠的是js，按理说主题目录<code>/source/js</code>下会有<code>search.js</code>这个文件。打开它，我们可以看到cactus主题的search功能是复用了那个插件的代码。</p><p><img src="https://raw.githubusercontent.com/gitkeniwo/image_hosting/main/img/20210518154430.png" alt=""></p><p>然后我们逐行检视代码，找到生成url的那一行。</p><p><img src="https://raw.githubusercontent.com/gitkeniwo/image_hosting/main/img/20210518155125.png" alt=""></p><p>这一行大概就是把搜索结果放到一个列表里面，列表的元素是超链接，超链接的href <code>dataUrl</code>就是我们想改掉的url，这里就有点问题，好像并没有出现预想之内的字符串<code>&quot;/search/&quot;</code>与文章标题url的拼接这样的处理方式，这好像就需要我们直接在<code>dataUrl</code>上做文章。观察上面的代码，<code>dataUrl</code>实际上是<code>data.url</code>这样一个属性，data又是<code>forEach()</code>下遍历的元素，应该是一个对象，对<code>datas</code>这个数组里面的每个<code>data</code>执行花括号定义的<code>function(data)</code>(后面的代码全是function的内容)。观察function里面是没有循环的，所以它想展示所有的只能是对最开始的<code>datas</code>数组遍历（于是猜想<code>datas</code>应该就是文章列表的xml结构数据），这有点像<code>pandas.Columns.apply()</code>函数，这个函数接受另一个函数名的参数，对pandas数据表里该列每个元素执行接受的函数的操作。</p><p>再往前看，这段涉及ajax什么的我就看不懂了，但大概是让datas接受某个xmlResponse，这个reponse我们可以想到应该就是所有文章的列表。</p><p><img src="https://raw.githubusercontent.com/gitkeniwo/image_hosting/main/img/20210518155842.png" alt=""></p><p>这么说好像还是一个黑箱，于是我们直接<code>$hexo -s</code>启动服务器，在<code>localhost:4000/search/</code>本地调试一下，打开safari，⌥+⌘+I (I for inspect)召唤出调试界面，然后找到sources，在输入框里随便输点内容之后，下面就出现了一个<code>search.xml</code>文件，点开看一看，好像的确就是所有文章的feeds。</p><p>xml文件的<code>&lt;title&gt;</code>, <code>&lt;url&gt;</code>, <code>&lt;content&gt;</code>几个tag刚好能对应上面赋值给<code>datas</code>的代码，那么，出问题的应该就是xml里面的url了。再仔细观察一下这个url，发现它直接就是这篇博文的md文件标题了，大概就是<code>post-title/</code>这样的形式，在前面没有任何斜杠表示其路径。</p><p><img src="https://raw.githubusercontent.com/gitkeniwo/image_hosting/main/img/20210518160112.png" alt=""></p><p>到这里其实就明白了，因为在网页中直接点开<code>some-title.file/</code>这样的路径链接的话，重定向其实是直接在当前目录的后面加入这一段的路径作为整体的链接跳转。我们本来在search页面，也就是<code>githubpages.github.io/search/</code>这个路径之下，再点开一个首部没有斜杠的链接就会被定位到<code>githubpages.github.io/search/some_post</code>这里去，而这里什么都没有，所以GitHub pages就给出了404信息。</p><p>那解决的办法也很简单。</p><p><img src="https://raw.githubusercontent.com/gitkeniwo/image_hosting/main/img/20210518161355.png" alt=""></p><p>只要在这里加个斜杠就好了。<del>吐血</del></p>]]></content>
      
      
      <categories>
          
          <category> Blogging </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>film-leclisse</title>
      <link href="2021-05-16-film-leclisse/"/>
      <url>2021-05-16-film-leclisse/</url>
      
        <content type="html"><![CDATA[<p>股票交易市場，為數字而瘋狂的人群，金錢被視為最通用的工具，用來達成各種各樣的目的，但這個過程中會出現「片面的理性化」的困局。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>奇遇</title>
      <link href="2021-05-16-film-lavventura/"/>
      <url>2021-05-16-film-lavventura/</url>
      
        <content type="html"><![CDATA[<p>莫妮卡維蒂在風中飛揚的金髮，她空虛而困惑的神色，本身就足夠讓人心煩意亂了。《紅色沙漠》如是，《奇遇》也如是。</p><p>兩個半小時的CC藍光修復版，義大利語英文字幕，我可以清晰的看見海島上植被的紋理，莫妮卡維蒂每根金色的髮絲。值得一提的是，《奇遇》CC版的封面也常常被人提名為最受喜愛的CC海報，偏深藍的灰度色調與莫妮卡維蒂動人的側臉<del>，這樣的海報才配得上安大師的奠基作啊</del>。</p><p><img src="https://m.media-amazon.com/images/M/MV5BOTZlYTJmMmUtZDgzMC00N2RjLWIyMDctZjE0ZThmNjAxMzI5XkEyXkFqcGdeQXVyMTA1NTM1NDI2._V1_.jpg" alt=""></p><p>影片裡的場景可以用delicate來形容，看到不只一個人說，整部影片在觀影過程中似乎索然無味，但在後來的日子裡那些畫面總是會在腦海中閃過，在夢境裡出現。也許是嶙峋而蕭瑟的海島畫面過於犀利了，近乎垂直的懸崖和率直滾入大海的石塊，慘白的天空。另外，全片也都沒有出現景深鏡頭，沒有邊緣的模糊和大面積的失焦，所有的背景無論是廣闊的島嶼，還是繁忙的街道，抑或是宏偉的教堂和建築群，都被安大師清晰地展現在畫幅之中。</p><p><img src="https://raw.githubusercontent.com/gitkeniwo/image_hosting/main/img/20210516204801.png" alt=""></p><p>安大師很喜歡這種一前一後的構圖，人與人之間的距離是那麼的遙遠。</p><p><img src="https://raw.githubusercontent.com/gitkeniwo/image_hosting/main/img/20210516214408.png" alt=""></p><p><img src="https://raw.githubusercontent.com/gitkeniwo/image_hosting/main/img/Screen%20Shot%202021-05-16%20at%208.16.26%20PM.png" alt=""></p><p><img src="https://raw.githubusercontent.com/gitkeniwo/image_hosting/main/img/20210516205534.png" alt=""></p><p>自然環境中的聲音，海浪與暴雨，汽車發動機與火車轟隆駛過，繁華大街上嘈雜的人聲，聽起來都不是那麼的悅耳，甚至可以說是讓人心煩。安娜一開始的神隱，反而加重了我們心中的愧疚感，與男主的hookup更是把那種不安的情緒推倒了頂峰，灼人的夏日天氣，藝術家工作室裡的女性裸體畫，在決定接受男主的愛意之後，街上男人的注視也讓莫妮卡內心焦灼，拼命壓抑真實的感情，認為自己行徑醜惡，這種永遠在試探中的矛盾心情，也是現代城市中人類情感危機的寫照。莫妮卡的心情從最開始對安娜失蹤的關心，到對Sandro示愛的抗拒，再到接受並煎熬，最後發現這「愛情」背後的空虛與可笑，幾乎就是安大師對這片情感荒漠的逼視，對友情、愛情、一切人類親密關係的拷問。他太cynical了，黑白色調甚至產生了不真實感。片中人物都那麼空洞、乏味，有一句沒一句的搭話，相互的猜忌與顧慮，好像這個世界上已經沒有了任何意義，人物又是那麼的荒誕，不停的嘗試著尋找一些「存在感」。我們身邊有那麼多的親朋、泛泛之交，但我們又那麼孤獨、無依無靠，與他人之間永遠是疏離的，這就是現代化社會對人內心的<strong>異化</strong>吧。在滿足了基本的生理和安全的需求之後，人類彷彿在鋼鐵叢林中丟掉了尋找愛與歸屬的能力，溝通充滿了謊言，承諾失去了份量，配偶的陪伴也貌合神離。沒有複雜而具有吸引的情節，本片更注重培養這種心境，讓我們置身事外去relate到這種荒涼的感覺，一個個冰冷的鏡頭背後導演想要傳達的意圖。    </p><p>看完之後感到了絲絲涼意。杭州連著下了幾天的雨，前兩天武漢有雷暴、蘇州有龍捲風，但宿舍裡不開空調的話還是悶熱，開了空調又是直觸內心的寒意。看安大師的作品就像吃冰糕。</p>]]></content>
      
      
      <categories>
          
          <category> Films </category>
          
      </categories>
      
      
        <tags>
            
            <tag> modernity </tag>
            
            <tag> director-antonioni </tag>
            
            <tag> art-cinema </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>For Frodo</title>
      <link href="2021-05-14-film-lotr/"/>
      <url>2021-05-14-film-lotr/</url>
      
        <content type="html"><![CDATA[<p><strong>LOTR三部曲</strong>大陸院線重映，今天是第三部<em>The Return of the King</em>正式上映的日子，這一週內斷斷續續的去影院看完了，雖然每一部都非常憋尿但這已經在是刪減了很多內容的前提之下放映的了。看完之後我想，這就是所謂的史詩吧，恢宏、巨製，我貧瘠的語言沒有辦法描述整個三部曲的畫面帶給我的震撼。</p><p>更讓我震撼的，還是這三部曲其實是在2001-2003年期間上映的這個事實——差不多和我同歲了，又去了解了幕後關於Peter Jackson和整個劇組人員拍攝過程中做出的犧牲和努力（例如本片三部曲幾乎是在同時拍攝完成的、拍攝結束後很多演員都買了一匹馬、奧蘭多的弓斷了等），以及無數魔戒粉絲七年間的堅守和期待，很難不承認這是有史以來最成功的原著改編作品。</p><p>大多數人會更喜歡人皇阿拉貢那條故事線，斷劍重鑄、亡者軍團、白城守衛戰，但我還是更敬佩兩個Hobbits護送魔戒到火山口的故事，我覺得這裡面很多情節和對話才是本系列想要傳達的核心，像Sam對Frodo忠貞不渝的友情和幫助，兩個弱小的赤腳的霍比特人穿過摩多的邊境，走過黑暗沼澤攀登過怪石嶙峋的險峰，一路上缺水少糧累的半死還被魔戒弄得神魂顛倒，以及同情咕嚕的同時又對抗著其代表的墮落腐爛的心智等等。</p><blockquote><p>Hold your ground! Sons of Gondor, of Rohan, my brothers! I see in your eyes the same fear that would take the heart of me. A day may come when the courage of men fails, when we forsake our friends and break all bonds of fellowship…but it is not this day. An hour of woes and shattered shields, when the age of men comes crashing down. But it is not this day! This day we fight! By all that you hold dear on this good Earth, I bid you stand, men of the west!</p><p>—Aragorn</p></blockquote><p>凱特布蘭切特扮演的精靈女王對Frodo說，you are doomed. 但她又說，只有你才能找到銷毀魔戒的辦法。我們在面對絕望的命運的同時，能否擁有如Frodo銷毀魔戒一般的決心呢？他原本只是一個在像英格蘭一般風景如畫的Shire無憂無慮的小hobbit而已啊，魔戒找上門來之後，好像命運已經急轉直下沒有任何出路了，自己弱小、膽怯，明知道是一個不可能完成的任務，也只能硬著頭皮上了。所幸的是Frodo不只是他獨自一個人，他還有Sam，代表著人類之間美好的友情，在魔多境內，人類聯合軍送死去吸引了魔眼的注意力。魔戒想要傳達和讚頌的，<strong>是人類的愛、勇氣與堅韌，是忠貞的友情，是對正義的堅守</strong>，即便像hobbits這樣弱小的角色，也能說服恩特向埃斯加德發動進攻，守衛白城，銷毀魔戒，連人皇都能對他們說上一句「<em>My friends. You bow to no one.</em>」。即便在命運的對立面，我們也沒有理由放棄。</p><blockquote><p>I WISH THE RING HAD NEVER COME TO ME. I WISH NONE OF THIS HAD HAPPENED.</p><p>—Frodo</p></blockquote><p>坦率來講，這是一大桶的雞湯，但是它同時又是那麼的香，你喝下一口能慢慢辨識出好多種味道，有苦澀，有鮮嫩，有濃稠，比所謂的「社會正能量」——一大杯放了幾個月的白開水，不知道高到哪裡去。</p><p><img src="https://raw.githubusercontent.com/gitkeniwo/image_hosting/main/img/20210515000253.png" alt=""></p><p>不得不說，Elijah Wood的那雙藍眼睛真的是絕了⋯⋯他在最後說”THERE IS NO REAL GOING BACK”的時候我心都碎了。终于结束了，一切如常，我却回不去了。在偉大的使命被完成的同時，魔戒給人帶來的創傷就連時間也無法彌補，這也暗示了現實生活中每個人的經歷都會陪伴他一生的道理。</p><p>Eowyn在白城之役中幹掉the Witch King的那段在影院現場效果也特別棒，”<em>I am no man.</em>“在女性主義越來越成為主流敘事的當下，重新回味這句多年以前的台詞心中也是感想萬千。可惜的是，院線版把Eowyn與Faramir對上眼即這兩人的結局給刪掉了，差評。She deserves more love! BTW Eowyn的演員還演過國土安全第五季柏林線裡面一個非常可惡的女人⋯⋯</p><p>另外，我也才意識到後來的很多故事和作品，包括冰與火之歌、曠野之息，好像都或多或少的借鑒了魔戒的背景——活死人軍團，災厄迦儂的城堡⋯⋯很遺憾我都21歲了才開始接觸《魔戒》這部作品，我一直相信好的作品可以改變我們的人生軌跡，改變我們對世界的看法，LOTR很顯然就是這樣的作品之一。</p><blockquote><p>For Frodo!</p><p>—Shouted Aragorn, with his eyes watery and red.</p></blockquote><p>其實在那一刻，我的心也在一同嘶吼著。<em>For Frodo.</em></p>]]></content>
      
      
      <categories>
          
          <category> Films </category>
          
      </categories>
      
      
        <tags>
            
            <tag> modernity </tag>
            
            <tag> film-fantasy </tag>
            
            <tag> lotr </tag>
            
            <tag> director-peterjackson </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pics</title>
      <link href="2021-05-12-pics/"/>
      <url>2021-05-12-pics/</url>
      
        <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/gitkeniwo/image_hosting/main/img/IMG_2250.jpg" alt=""></p><p>下午又去了單向空間，這是我在杭州唯一的精神家園了。</p>]]></content>
      
      
      <categories>
          
          <category> Tweets </category>
          
      </categories>
      
      
        <tags>
            
            <tag> photo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>不要溫和地走進那個良夜</title>
      <link href="2021-05-11-Untitled-32/"/>
      <url>2021-05-11-Untitled-32/</url>
      
        <content type="html"><![CDATA[<h1 id="1不要溫和地走進那個良夜"><a href="#1不要溫和地走進那個良夜" class="headerlink" title="1不要溫和地走進那個良夜"></a>1不要溫和地走進那個良夜</h1><p>詩/迪蘭·托馬斯<br>譯/巫寧坤</p><p>不要溫和地走進那個良夜，<br>老年應當在日暮時燃燒咆哮；<br>怒斥，怒斥光明的消逝。</p><p>雖然智慧的人臨終時懂得黑暗有理，<br>因為他們的話沒有進發出閃電，他們<br>也並不溫和地走進那個良夜。</p><p>善良的人，當最後一浪過去，高呼他們脆弱的善行<br>可能曾會多麼光輝地在綠色的海灣里舞蹈，<br>怒斥，怒斥光明的消逝。</p><p>狂暴的人抓住並歌唱過翱翔的太陽，<br>懂得，但為時太晚，他們使太陽在途中悲傷，<br>也並不溫和地走進那個良夜。</p><p>嚴肅的人，接近死亡，用炫目的視覺看出<br>失明的眼睛可以像流星一樣閃耀歡欣，<br>怒斥，怒斥光明的消逝。</p><p>您啊，我的父親，在那悲哀的高處。<br>現在用您的熱淚詛咒我，祝福我吧。我求您<br>不要溫和地走進那個良夜。<br>怒斥，怒斥光明的消逝。</p><p>—5.10 成都四十九中學生墜樓事件。</p><h1 id="2全部遇難"><a href="#2全部遇難" class="headerlink" title="2全部遇難"></a>2全部遇難</h1><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqex4df337j30pb0nzaf8.jpg" alt="AD06C72E-2850-4A55-9FB8-E6D6CE244C5A_1_105_c" style="zoom:33%;" /></p><h1 id="3死的兩面性"><a href="#3死的兩面性" class="headerlink" title="3死的兩面性"></a>3死的兩面性</h1><h2 id="其壹"><a href="#其壹" class="headerlink" title="其壹"></a>其壹</h2><p>也許，對中國人來說，死就是天大的事情了。自己的子女的死亡，就好像池塘中搖蕩的生命蓮葉直接被連根拔起，成為無依無靠的浮萍。我不排斥中國家庭中對子孫的重視，「天倫之樂」，那位母親——我不敢想像她以後的生活還能如何繼續下去。中國人一直壓抑著作為現代人類的基本訴求，靠的就是「日子還是要過下去」這句話。留得青山在，不怕沒柴燒。把人家孩子弄沒了，青山都燒了，一個家的支柱垮了，別人能不跟你拼命嗎，這日子還怎麼過下去？那個學校裡，被噤聲的無數個同學和他們的家長，他們怎麼坐得下去？</p><p>看到有人讓那些沈默的同學在裝作沒事繼續高考（但會損失自己的良心）和勇敢站出來發聲之間做選擇。下面有人就反駁了，讓同學不要斷送了自己未來。有人「告誡」同學們，說以後的日子裡最不重要的就是你的高考成績，而在這種人生節骨眼上的大事上做出的選擇可是關係到自己一輩子的，<strong>阿爾貝加謬說，判斷人生值不值得活，這是哲學最基本的問題</strong>——如果你一生都因此蒙上陰霾，那高考考怎麼樣也確實無足輕重了。這些說法在不在理我先不討論，——顯然，如果他高考考到了清華，後來又去了MIT，CalTech等一流高校肉身翻牆，那他結合自己經歷在牆外的確可以繼續為國內民主化發光發熱——這些說法，在我看來，就已經很強加於人了。人不是我推的，我也活在地獄裡面，你怪我新陳代謝釋放熱量拉高地獄平均氣溫嗎？</p><p>在校門外聚集的人群，手裡舉著白花表示悼念，這麼一個溫馨的舉止在牆內已經被解讀為「有策劃、有預謀」了。這種級別的要素察覺，是因為對HK過度敏感了吧，幾乎可以套進meme了，或是夜更かし的圖片剪影試驗（シルエットテスト）。我看到這種言論冒出來，就好像病毒經歷了漫長的潛伏期後指數增長，然後默默關掉了所有有關頁面，就像在街邊看到了一坨大便，想要快速走過去一樣。我知道，這24小時內短暫的民憤又會被操縱的網絡審查和宣傳話術快速扼殺掉，定性，克隆人的復讀，然後不了了之。<strong>東八區阿，果然沒有新鮮事</strong>。</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqevb5sa1wj30um0u018k.jpg" alt=""></p><h2 id="其贰"><a href="#其贰" class="headerlink" title="其贰"></a>其贰</h2><p>有的人是被動死亡的。有的人是主動死亡的。</p><p>剛剛跟我媽通電話，她急切的問我今後的打算，她說，萬一瘟疫一直拖著幾年都出不去，我還是要做好「兩手準備」——簡言之，考國內研究生。我之前做畢業設計的時候已經詳細了解了國內研究生到底是個什麼情況，現在一個字來總結，屎。具體來說，你遇上好導師的概率非常微小，大部分時間都在幫忙搬磚做雜事，浪費自己生命罷了。答辯，盲審，查重；創新點，一作，影響因子，SCI。坦率來講，在畢業設計跟著導師短暫的一窺之後，我對於國內所謂的學術圈已經提不起任何興趣了——一個簡單的想法，「連xx的人都可以做學術，這⋯⋯」罷了，國內哪行那業又何嘗不是如此呢？跟朋友經常會提及一個<strong>信息差</strong>的概念，大概就是，進去前是懷揣著夢想的年輕人，進去後⋯⋯有跳樓的，有被卡著好幾年畢不了業的。再加上我是一點也不喜歡H市這個鬼地方，想到還要孤苦伶仃的在這呆n+ yrs我大概也會跳樓吧。都是前腳跨進門檻之前信息不對等的緣故，不清楚裡面到底是雕梁畫棟還是敗絮其中。總之，和我媽通話的過程中，她老是強調著，你應該怎麼做，你應該怎麼做。我怒了，我說，「那我就不可以什麼都不做嗎？」人生本來就是一個不可逆的過程，我就不可以偶爾停下來思考一下哲學的基本問題，從哪兒來，到哪兒去嗎？為什麼非要一刻也不停的進入下一個階段？在CC98上，我看到大量的匿名貼抱怨研究生生活的不如意，導師放養、實驗無果、轉碼⋯⋯這一方面是信息差的緣故，另一方面，難道不是因為這些人對自己<strong>不負責任</strong>嗎。看到有象友說，中國人生活的<strong>容錯性</strong>太低。難道不是嗎？看到有朋友說，國外的人生真的是有無限種可能性，以前在國內根本沒有這種概念：炒股、買房、學區、補習班、調休、黃金週一起堵在高速上⋯⋯國內的人生就是在這一系列令人疲乏的名詞中做排列組合而已，但國外的人，他們的人生是一個沒有上限的無窮遞增數列，你可以gap一年環遊世界，可以辦樂隊，可以去街頭賣唱，去雪山露營，像無依之地裡一樣開RV在落基山脈流浪，隨時隨地跟朋友一起hangout開party，快三十歲了轉行讀master的人遍地開花。這一行做累了重新念書學習，兩年後又做起了另一行。每一天都是嶄新的自己——人生本應該如此。很多時候我感到疲倦，我厭惡那種盛行於中國人之間交談的<strong>爹味</strong>，Mansplaining:「你應該做這件事」，「你應該做那件事」，你不要孩子老了可是會後悔的！⋯⋯我討厭別人告訴我應該做什麼事。我是一個獨立的個體，不是像<em>Psycho Pass</em>裡面シビラシステム那樣與無數個大腦共享思維，人的思想不應該受到別人的「干涉」，可以從外界獲取信息汲取萃取提煉出自己的精華而不是像流氓程序一樣強制安裝無法卸載。我就這樣對她說，我說，「你看看讀研跳樓的那麼多，你也不想想為什麼」。她先是頓了頓，好像對我拋出這個話題沒有準備似的，又或者，在思考為什麼我會這麼說，我會不會跳樓呢？她想了一會，還是很固執的說「那是⋯⋯那些人自己承受能力不足⋯⋯」後來我跟她聊了什麼我都不記得了，當時腦袋裡面只是一直在思考，為什麼她會說出這樣的話。她不懂學校宿舍裡漫無天日的時間，不懂科研壓力與枯燥的數據對人天性的扼殺，不懂這樣一個<em>神聖</em>的高校裡面行政的繁雜和不近人情。我有太多話湧到嘴邊，但我選擇了苦笑一聲結束對話。我想到了大學四年每個考試週不安的夜晚，想到做畢設的時間在床上躺到五點窗外天明，想到了ZJU宿舍的水泥地板，公廁裡尿素揮發出刺鼻的氨氣的味道，想到無數的「青馬學院」復讀無意義文字的消磨生命的講座，想到周圍的人群中有極大比例想要收復台灣島，不惜用槍砲和戰火的Nationalsozialisten。Mais non, dison, non. My answer is definitely no. </p><p>但除此之外，我也講不出關於我為什麼還要活著的議題。可能是膽小。可能是沒文化，不懂哲學。欠缺基本的價值觀教育。</p><p>總之，畢業回家後教育我媽的工作，還任重道遠。</p><h1 id="4法蘭西"><a href="#4法蘭西" class="headerlink" title="4法蘭西"></a>4法蘭西</h1><p>與桂枝形成鮮明對比的，就是法國了，最近在看Éric Rhomer的四季。分別是Conte de Printemps / d’Été / d’Automne / d’Hiver (神馬，四季裡面居然有三個詞都是元音/啞音h開頭)。然後迅速被Melvil Poupaud圈粉了。他居然還主演過<em>Le Temps qui Reste (時光駐留)</em> 和 <em>Lawrence Anyways(雙面勞倫斯)</em>，前者是著名好評基片，後者更是Xavier Dolan關於木桶飯(mtf)主題的片子。</p><p><img src="https://raw.githubusercontent.com/gitkeniwo/image_hosting/main/img/D5D10759-7423-436D-B0B0-46ECBEB7046D_1_201_a.jpeg" alt=""></p><p>帥暈。</p><p>此外，還充滿了對法國人的羨慕：在法國各地擁有一個帶jardin的大豪斯，推開窗就是草長鶯飛碧海青天，在海灘上嬉戲，在輪船上大聲歌唱，跟很多喜歡的人一起約會，一起討論自我，討論愛情，討論哲學。如果有下輩子，真希望投胎到法國！</p><h1 id="5內臟"><a href="#5內臟" class="headerlink" title="5內臟"></a>5內臟</h1><p>輪子系媒體總是說party活摘器官，但據我觀察，Party好像很久都沒搞過這種事情了，此類傳聞大概是飢荒年間的事情吧，不過就你國堪憂的人權來說，這樣是真的也不會讓我驚訝。緬甸詩人Khet Thi最近也享受了此待遇。Junta，F U。</p><p>Party，——關於你，我現階段還不敢F U。</p><blockquote><p>&lt;無題&gt;  </p><p>把我們活埋？ </p><p>而你們不知道</p><p>我們都是種子</p><p> —Khet Thi</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Tweets </category>
          
      </categories>
      
      
        <tags>
            
            <tag> politics </tag>
            
            <tag> poem </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Untitled</title>
      <link href="2021-05-07-Untitled-31/"/>
      <url>2021-05-07-Untitled-31/</url>
      
        <content type="html"><![CDATA[<p>一個好消息，朋友們，今天窩終於從<strong>畢業設計的陰霾</strong>之中走出來了。前幾天窩佬真的萬念俱灰，已經做好了延畢的準備正想找老師坦白，又突然發現這個模型的數據並不是沒有可操作性。總之，初稿現在已經交上去了，然而這並不代表已經結束，只能說最近一段時間不會那麼pushy，可以稍微緩和一點做事情了。11號還有離散的期中考試，再之後修改意見下來又要忙一陣子了，可不敢怠慢。</p><p>今天去看了<em>「魔戒」</em> 第一部，這居然是<em>2001年</em>  <u>(划重點)</u>的東西，看完又想感嘆只有<del>窩永遠喜歡但移民不過去的</del>腐國才能拍出這種史詩，裡面的每個角色都很難不成為經典。<!-- 並且窩佬在阿拉貢出場~~露臉~~的十秒之內就被圈粉 （/掩面）。 -->另外，丹麥人真的有種特殊的氣質，以至於我的pattern recognition一瞬間就聯想到了詹姆蘭尼斯特和拔叔<br><!-- （wait，難道不是偶然得知V父母有一方是丹麥人之後才突然想到嗎）。氮素——unfortunately Viggo Mortensen本人今年已經63歲了(*what actual fuck*) ，也就是說他演阿拉貢的時候都四十多了⋯⋯~~但這並不妨礙我🥺~~ --></p><p>最近其他事情也發生了好多好多，平時走路都會在腦海裡翻來覆去想問題，一坐到電腦面前就感覺想說的話overwhelmingly湧到心頭，但是今天已經很累了，就暫且不談了。從NHD上leech了魔戒的加長版(<em>Extended version</em>)，這部居然還能更長，電影院裡就有三個小時，藍光壓制版居然能到3:42，然後我看第三部好像有四個半小時⋯⋯然而這當然是好事情，給窩拍到十小時也不為過haha。</p><p>說到延畢的事情，最開始我想，延畢也不一定是壞事情，然後腦內補全了延畢一年的可能性，但最後給我當頭棒喝的還是昨晚😠五一公假已經過去了，但宿舍依然晚上要斷電，把我熱成了個傻逼晚上翻來覆去無法入眠三點才好不容易昏睡過去六點又熱醒。然後我就突然想到我都21歲了在住宿方面還要如此受限於人接受社會主義學校的管理真的是totally unacceptable. 然後伸出手掐斷了浮在半空中的延畢的幻想。</p><p><img src="https://raw.githubusercontent.com/gitkeniwo/image_hosting/main/img/DA5C5488-D599-4400-97DE-19487B4FC17D_1_105_c.jpeg" alt=""></p><p>十點半過看完電影，在古墩路與余杭塘路交叉路口等信號燈拍了下。夜裡的杭州主幹道奔騰不息的車流有點恐怖，就像他們劫持了時代，劫持了我們的未來，像沒有靈魂的軀殼一般，硬要有勇無謀的駛向不知何處的遠方。</p><p><img src="https://raw.githubusercontent.com/gitkeniwo/image_hosting/main/img/3AAB2962-2602-4D0C-81D9-86953FBF9CE9_1_105_c.jpeg" alt=""></p><p>還是希望有人陪我一起看電影。</p>]]></content>
      
      
      <categories>
          
          <category> Tweets </category>
          
      </categories>
      
      
        <tags>
            
            <tag> daily </tag>
            
            <tag> 小并感 </tag>
            
            <tag> zju </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test</title>
      <link href="2021-04-19-pawoo-embed/"/>
      <url>2021-04-19-pawoo-embed/</url>
      
        <content type="html"><![CDATA[<p>剛發現Pawoo有一個「埋め込み」的功能，來實驗一下。</p><p><iframe src="https://pawoo.net/@Keniwo/106084885593966614/embed" class="mastodon-embed" style="max-width: 100%; border: 0" height="330" width="400" allowfullscreen="allowfullscreen"></iframe><script src="https://pawoo.net/embed.js" async="async"></script></p>]]></content>
      
      
      <categories>
          
          <category> blogging </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mastodon </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Untitled</title>
      <link href="2021-03-28-Untitled-30/"/>
      <url>2021-03-28-Untitled-30/</url>
      
        <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/gitkeniwo/image_hosting/main/img/IMG_16052.jpg"  /></p><p>So we beat on, boats against the current, over the long tedious winter and nearly the spring, borne back ceaselessly into the summer.</p>]]></content>
      
      
      <categories>
          
          <category> Tweets </category>
          
      </categories>
      
      
        <tags>
            
            <tag> daily </tag>
            
            <tag> photo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>picgo - 折腾一下新图床</title>
      <link href="2021-03-27-picgo/"/>
      <url>2021-03-27-picgo/</url>
      
        <content type="html"><![CDATA[<p>寫博客的時候總是很擔心圖片的問題：存在本地不方便，直接用圖床md鏈接省事且現代化。但隨之而來的又一個問題是：放在外面的cdn上的東西，怎麼保證他不會跑路？舉例來說就是現在ipic免費版支持的微博圖床，匿名上傳，接受範圍內的壓縮，但，萬一微博垮了怎麼辦？且不說夾總還維護著CCP的內容審查，就算微博自己鋪天蓋地的放廣告、壓榨用戶體驗，死亡也是早晚的事情。微博如果垮掉了，我博客里的圖片都會可憐的被清光，只會在原處剩下html找不到資源的破碎畫板小圖標——現在去看12年以前的百度貼吧的古董貼，所有的圖片都隨風而逝了，僅留下一道賽博疤痕。所以，現在就得考慮一個圖床時效性的問題，因為大多數圖片是沒有備份的，倘若圖床跑路，圖片是無論如何也無法輓回了。雖然這樣與時間、歷史、歲月對抗的行為總體上來說是徒勞無功的——我們無法預知我們死後的變化，誇張點說甚至無法預知我們下一秒的變化，指不定ISIS明天恐襲Twitter總部，億萬條推文都毀於一旦，而背後的理由僅僅是因為Twitter對阿拉伯世界宣稱支持<strong>La liberté d’expression</strong>——但我還是盡可能的希望延續這種存在。那麼通覽全球，我覺得能活的最久的service provider，一個是Apple/Goole，另一個就是Github了。所以，我也盡可能希望自己的一切網絡遊戲都能依靠在GitHub周圍——比方說我的Blog。Github是最不可能垮掉的服務商了，所以，GitHub如果提供Image Hosting Service的話我付費支持，但很可惜沒有。</p><p>於是我又找啊找，發現了一個叫<a href="https://github.com/Molunerfinn/PicGo" target="_blank" rel="noopener">PicGo</a>的東西。</p><p><img src="https://raw.githubusercontent.com/gitkeniwo/image_hosting/main/img/20210328004813.png" alt=""></p><p>可以看到它一個是支持的雲服務多，另一個是它支持把你自建的Repo當成圖床來用。</p><p>這是我的配置。其中Token的生成可以去查閱它的官方手冊。</p><p><img src="https://raw.githubusercontent.com/gitkeniwo/image_hosting/main/img/20210328004938.png" alt=""></p><p>最開始的時候一直上傳不成功，我懷疑可能是我的SS 1087端口這個HTTP代理有問題（終端也有同樣的情況）於是我現在是不加代理的在使用，體驗就是特別慢，和ipic的微博圖床秒傳無法比……</p><p><img src="https://raw.githubusercontent.com/gitkeniwo/image_hosting/main/img/20210328005226.png" style="zoom:50%;" /></p><p>但好在還是可以用的。<del>希望ipic作者也能提供一下GitHub的圖床，我一定給錢</del></p><p>此外還要繼續考察一下這個repo有沒有容量的問題……<del>又想到了git-lfs把github帶寬撐爆直接給我寄bill那件事</del>……</p><p>好像墙内加载<code>raw.githubusercontent.com</code>域名的图片也很慢，直接把该域名添加到ss user PAC里面。</p><p>另外，在typora或者Mark text里面引用md链接的加载速度也差不多，这俩编辑器本质还是html，查找链接引用的资源还是走https，所以需要一直挂着ss。</p>]]></content>
      
      
      <categories>
          
          <category> Tech </category>
          
      </categories>
      
      
        <tags>
            
            <tag> image-hosting </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>scrapy的学习笔记</title>
      <link href="2021-03-27-scrapy/"/>
      <url>2021-03-27-scrapy/</url>
      
        <content type="html"><![CDATA[<p>A side note taken when learning <code>Udemy - Scrapy Powerful Web Scraping &amp; Crawling with Python</code></p><h1 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h1><p>The Official Site is <a href="https://scrapy.org" target="_blank" rel="noopener">here</a>.</p><p>You can just <code>pip install scrapy</code></p><h1 id="To-Start-With"><a href="#To-Start-With" class="headerlink" title="To Start With"></a>To Start With</h1><h2 id="Create-Project"><a href="#Create-Project" class="headerlink" title="Create Project"></a>Create Project</h2><p><code>scrapy startproject example example.com</code> can help you start with your first project.</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1goyw93s1naj319a0l4wmc.jpg" alt=""></p><p>As we can see, after we enter the command, the corresponding project folder is already automatically made in our current directory, with all the auxiliary .py files generated at your disposal.</p><p><img src="https://raw.githubusercontent.com/gitkeniwo/image_hosting/main/img/20210328002913.png" alt=""></p><h2 id="Scrapy-Shell"><a href="#Scrapy-Shell" class="headerlink" title="Scrapy Shell"></a>Scrapy Shell</h2><p>Open terminal and type <code>scrapy shell</code> to enter the interactive .</p><p><img src="https://raw.githubusercontent.com/gitkeniwo/image_hosting/main/img/20210328002640.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Tech </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> python-scrapy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Untitled</title>
      <link href="2021-03-14-Untitled-29/"/>
      <url>2021-03-14-Untitled-29/</url>
      
        <content type="html"><![CDATA[<p>最近 ——</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1gojedv2qtaj20u60k4jyo.jpg" alt=""></p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1gojedvltbbj20k40u67f0.jpg" alt=""></p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1gojedyoj28j20u60k4jxz.jpg" alt=""></p><p>一門課（離散）和一門畢設。</p><p>春天來了，</p><p>我們在絕望的平原上矗立著，</p><p>呼嘯的寒風不減凜冬的威嚴。</p><p>上帝為什麼要讓人類身處遼遠的曠野，</p><p>內心卻彌留在永不與外界相連的孤島上。</p><p>『それが、</p><p>心の間に存在してるATフィルドなんや』って</p><p>もう迷う、</p><p>もうわからん。</p><p>hexo的md不支持數學公式，</p><p>糟心的一切。</p>]]></content>
      
      
      <categories>
          
          <category> Tweets </category>
          
      </categories>
      
      
        <tags>
            
            <tag> photo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Discrete Mathematics.</title>
      <link href="2021-03-07-Untitled-28/"/>
      <url>2021-03-07-Untitled-28/</url>
      
        <content type="html"><![CDATA[<p>Discrete Mathematics.</p><h1 id="Appendix-LaTeX-Expressions-that-the-Course-Could-Use"><a href="#Appendix-LaTeX-Expressions-that-the-Course-Could-Use" class="headerlink" title="# Appendix: LaTeX Expressions that the Course Could Use"></a># Appendix: LaTeX Expressions that the Course Could Use</h1><h3 id="Quantifiers"><a href="#Quantifiers" class="headerlink" title="Quantifiers"></a>Quantifiers</h3><p>$\forall$: \forall</p><p>$\exists$:  \exists </p><p>example latex template,  see: <a href="https://www.zhihu.com/collection/296441755https://www.zhihu.com/collection/296441755" target="_blank" rel="noopener">https://www.zhihu.com/collection/296441755https://www.zhihu.com/collection/296441755</a></p><h1 id="1-Logic-and-Proofs"><a href="#1-Logic-and-Proofs" class="headerlink" title="1. Logic and Proofs"></a>1. Logic and Proofs</h1><h2 id="1-1-Propositional-Logic"><a href="#1-1-Propositional-Logic" class="headerlink" title="1.1 Propositional Logic"></a>1.1 Propositional Logic</h2><blockquote><p> <strong>Definition 1.1: Propositions</strong></p><p>A proposition is a declarative sentence (that is, a sentence that declares a fact) that is either true or false, but not both.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Maths </category>
          
      </categories>
      
      
        <tags>
            
            <tag> math-discrete-math </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Existential Dilemma</title>
      <link href="2021-02-20-untitled-0/"/>
      <url>2021-02-20-untitled-0/</url>
      
        <content type="html"><![CDATA[<p><em>À Bout de Souffle</em>, 戈達爾的《筋疲力盡》，向我們展示了這樣一個存在主義的困境。女主人公Patricia不清楚自己到底是因為自己不自由而不開心，還是因為自己不開心而不自由。她忽而激烈的抵觸追求她的Michel，又忽而對他投懷送抱，到最後甚至把縈繞在自己身上的哲學問題拋給了這個男人。Michel，如果以傳統的眼光來看的話，他是一個不折不扣的流氓，他若無其事的殺掉一個警察，又若無其事的在巴黎的大街上閒逛，與女孩打情罵俏。第一次看完整部影片，我心裡面是有一個大大的問號的，作為「新浪潮」的開山之石，在鼻音濃厚的法語對話和單調乏味的黑白色彩里，很難不感到昏昏欲睡，全片也似乎沒有一個明確的情節，或者說沒有一條顯著的故事線，以至於我回倒了好幾遍，找到一個個自認為關鍵的情節點開始梳理，卻也覺得不知其所。就是這樣的一部影片，在電影史上具有舉足輕重的地位。那時的我還不瞭解電影歷史，雖然早早的瀏覽過一遍<a href="https://www.amazon.com/认识电影-（全彩插图第12版）-美-路易斯·贾内梯（Louis-Giannetti）/dp/B01MG7F8M0" target="_blank" rel="noopener">《認識電影》</a>，書裡面講述過的剪輯手法也好啦、場面調度也好啦，全都拋之腦後了；也不瞭解60年代的法國和西方世界的左傾運動；更是不懂哲學啦，什麼存在主義、荒誕主義之類的，加繆？聽說過，也看過《局外人》，但也僅僅是局限於豆瓣讀書TPO100的程度，還在貴國牆裡面念高中的我哪裡有機會去瞭解《局外人》的創作背景和加繆本人的故事——完全是當作一個獵奇而乏味的、翻譯腔明顯的小故事來讀的。</p><p>所以，當這個世界一點一點向我撕開它的偽裝，讓我得以將之前所見的斷片拼湊起來，就像殘缺不全而尚未完成的拼圖的那樣，我也時常感嘆這背後複雜的玄機，人文，自然科學，工學，藝術，他們之間的聯繫是那麼的緊密，與我正在積極探索的領域相對應的，我的愛好也在不斷的變化之中。自高中開始，我就一直有種奇妙的「未充分準備好」的感受，其形成之初因，大抵是對於高考這場容錯率極低的試驗的自適應。直到高中畢業後第四年的今日，我也常常夢到高考迫在眉睫但我語文/數學/…還完全沒有復習這樣的場景，這樣的情景對於我的潛意識來說是個非常糟糕的狀態，以至於每每夢到類似的場景我都會感到全身緊繃，絕望和無助。到現在，我也為這種「匆匆準備」的心理預期而累，倒也不是我每日都被自己內心壓迫著去工作、去學習，而是我在大部分休憩的時間也感到一種稍縱即逝的不安感。日復一日的假定自己沒有「準備好」，沒有做足夠的工作去應付專業課的考試，沒有準備好托福、日本語能力測試，不單是各種測驗，這樣的「應試思維」誠然已經延展到了我生活中的每個部分，我的愛好，我的人際關係，我的職業規劃。我會因為這周沒有看完某幾部特定的電影而自責，會因為不自知的玩了一下午遊戲而沒有按照計劃學習法語/德語而深深懊悔，甚至會由於最近兩三天沒有攝入足夠的膳食纖維坐立不安。焦慮就是這樣overwhelming。最近一段時間，則是因為畢業設計的問題，每天都寢食難安，下午夕陽西沈的時間，孤獨、恐懼、荒誕，令人毛骨悚然的情緒盤旋在我的房間裡面，我感到一切都是沒有意義的。</p><p>那麼是沒有意義的嗎？所以我最近開始探索哲學這一方面了。老實說，哲學的著作是非常乏味的。ZJU有一門《希臘羅馬哲學》的通識課，我試著去讀過亞里士多德的《尼各馬可倫理學》。無果。太令人感到無趣了。我想有很大一部分的原因是翻譯的問題，歐洲語言按字翻譯成中文的時候總是繁瑣冗長的，formidable and daunting. 我們的思緒就在繞來繞去的中文表達里迷失，然後飛到書本之外去了。我不清楚是不是只有我一個人有這樣的經歷。正好今日在家中做一些清掃，我翻到了學生時代曾購買過的「村味」封面和排版的文學名著們，如《愛的教育》《巨人傳》等，總之，感謝貴國義務教育階段的「世界文學名著」，那些拗口而難記的人名，深深的勸退了我，有點不好意思的承認，我幾乎從未完整的讀完過任意一本翻譯過來的「文學名著」，現在個人對中文譯本的抵觸和排斥、至於看書一定要找到對應的英文、日文原版來翻看，大概由此起吧。希臘羅馬時代哲學讓人昏昏欲睡，但二十世紀的哲學又是那麼有意思，譬如存在主義，它講到是我們每個人在生命中不斷作出的選擇塑造了我們的本質，我們不是生來就是善或惡的，這是多麼有趣啊，我最近這段時間一直在思考這些問題，以前就根本沒有這樣的想法，現在——經歷了「這麼多事」之後，我也算是切身實地的體會到了世界的「Absurdity」，從而想要更加清楚的理解我們的生命。認識到哲學的趣味，還是因為去瞭解了大量的影視作品背後的創作思想。好的作品，它結合了藝術、音樂、歷史、哲學，把創作者吃過的無數偉大的作品提煉、發酵，再澆築成新的摩天大樓。伍迪艾倫把大文豪們的風流軼事都拍進了《午夜巴黎》，荒木sen sei用自己喜歡的搖滾樂隊及其作品名來為自己漫畫里的人物和招數命名，《猜火車》的背後是貫穿整個90s頹廢而輝煌的Britpop，Rick &amp; Morty 整整四季的無釐頭的平行宇宙歷險都是為了探討存在和荒誕的無數種可能性，甚至你可以說《Magica☆Madoka》和《Steins:gate》就是宅文化寄居在宅文化之上像珊瑚蟲形成環礁一樣最後開出的絢爛的花。類似的例子太多太多。</p><p>所以，我目前繼續活下去的理由，是為了「瞭解更多」。我想瞭解這個世界，這個宇宙。想看到意識形態和政權的交替，想聽到美妙的音樂、讀到更抓緊人心的故事，我想見證人類這樣的有機生命體創造出Cyborg硅基「生命體」的時代。我的選擇，造就了我本身，那我本身就更像是一個觀光客吧，我也希望自己是一個觀光客。這是到今天為止的我的想法，隨著我學到更多的東西，它還在飛速的改變之中。</p><p>附：</p><p><a href="https://telegra.ph/What-Jean-Luc-Godard-Taught-Me-About-My-Current-Existential-Crisis--by-Caroline-Alice-Guerin-02-20" target="_blank" rel="noopener">https://telegra.ph/What-Jean-Luc-Godard-Taught-Me-About-My-Current-Existential-Crisis--by-Caroline-Alice-Guerin-02-20</a></p>]]></content>
      
      
      <categories>
          
          <category> Tweets </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tetsugaku </tag>
            
            <tag> existentialism </tag>
            
            <tag> director-jeanlucgodard </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「电影史话」的一点小笔记（更新中）</title>
      <link href="2021-01-24-theStoryOfFilms/"/>
      <url>2021-01-24-theStoryOfFilms/</url>
      
        <content type="html"><![CDATA[<p>「电影史话」的一点小笔记（更新中）</p><h1 id="E01"><a href="#E01" class="headerlink" title="E01"></a>E01</h1><h2 id="The-Phantom-Ride"><a href="#The-Phantom-Ride" class="headerlink" title="The Phantom Ride"></a>The Phantom Ride</h2><p>first shot by George Albert Smith in <em>A Kiss in the Tunnel</em>. Filmed from the front of the train.</p><p><strong>Claude Lanzmann</strong>: <em>Shoah</em> (1985) </p><p>The shots about lines that took the Jews to the gas chamber.</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmyvgdlzqwj316l0u01kz.jpg" alt="image-20210124163726479"></p><p><strong>Stanley Kubrick</strong>: <em>2001: A space oddesey</em> (1961) </p><p>The </p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmyve0f0d1j31sn0u0hdu.jpg" alt="image-20210124162345532"></p><p>BTW: 我还想起了Kieslowski的<em>Trois Couleur: Rouge</em> (1994) 开头那一段。</p><h2 id="Meanwhile-Editing"><a href="#Meanwhile-Editing" class="headerlink" title="Meanwhile Editing"></a>Meanwhile Editing</h2><p>from what happens then to what happen meanwhile.</p><p>test <img src="https://tva1.sinaimg.cn/large/008eGmZEly1gmzsf088y4g300z00r741.gif"></img>  and this is it. </p>]]></content>
      
      
      <categories>
          
          <category> Films </category>
          
      </categories>
      
      
        <tags>
            
            <tag> film-history </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日本語勉強＞日本人の知らない日本語</title>
      <link href="2021-01-23-nihongo-1/"/>
      <url>2021-01-23-nihongo-1/</url>
      
        <content type="html"><![CDATA[<h1 id="episode-1"><a href="#episode-1" class="headerlink" title="episode 1"></a>episode 1</h1><p><strong>予備校</strong>（0） 補習學校</p><p>モビルスーツ　機動戰士</p><p>マグロ（金槍魚）</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmxm5k0559j30su0f5aan.jpg" alt=""></p><p>・マグロはその形によっていくつか数え方がある。</p><p>*数え（かぞえ）</p><p>海に泳(oyo)いでる時は<strong>一匹</strong>、だが吊り上げる(tsuriageru)と<strong>一本</strong>。それを市場(ichiba)で切りわけると一丁になり、さらに切り分けたものはひとかたまりという意味で一塊。</p><p>スーパーでは一冊（ひとさく）。そして人の口に入る時は一切れ。</p><h2 id="魚介類"><a href="#魚介類" class="headerlink" title="魚介類"></a>魚介類</h2><p>鮪（マグロ）</p><p>チョウザメ　鲟鱼 sturgeon</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmxmhp5lhoj30xc0ir1kx.jpg" alt=""></p><p>鮭（さけ・シャケ）三文鱼</p><p>この漢字は中国でフグっていう意味</p><p>フグ河豚　　ウニ海膽</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmxmk2poetj30su0f5jrv.jpg" alt=""></p><h2 id="ラーメンの数え方"><a href="#ラーメンの数え方" class="headerlink" title="ラーメンの数え方"></a>ラーメンの数え方</h2><p>スープ・具・麺 (めん) を椀 (わん) や丼に盛ると「杯」で数えます。 飲食店で注文を受け、景気付けに店員が「<strong>ラーメン1丁</strong>」のように「丁」で注文を数えることがあります。</p><p>＊景気つけ：景気とは元気のよいこと。可以理解為打氣。</p><p>＊香港出前一丁</p>]]></content>
      
      
      <categories>
          
          <category> Languages </category>
          
      </categories>
      
      
        <tags>
            
            <tag> japanese </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日本語勉強＞夜更かし２１０１１１期</title>
      <link href="2021-01-22-yofukashi/"/>
      <url>2021-01-22-yofukashi/</url>
      
        <content type="html"><![CDATA[<p>夜更かし２１０１１１期</p><p>リンク：🔗 <a href="https://www.bilibili.com/video/BV19r4y1T7oA" target="_blank" rel="noopener">https://www.bilibili.com/video/BV19r4y1T7oA</a></p><p>・貧乏人に<strong>打ってつけ</strong>、私にはぴったし</p><p>打ってつけ：适合</p><p>ぴったし：ぴったり（うまくあう）也可以表示紧紧的，严实的</p><p>ぴったりよりそう</p><p>・<strong>ありとあらゆる</strong>ものが足りていない（江戸川区）</p><p>ありとあらゆる＝すべての</p><p>・<strong>金玉</strong>のおかけでちょっと金が入ってきた。</p><p>金玉＝睾丸</p><p>金=きん（読み方注意）</p><p>・母<strong>バカウケ</strong>、娘苦笑い</p><p>馬鹿受け＝傻笑</p><p>苦笑い　にがわらい</p><p>・しかし、その話には<strong>裏がある</strong></p><p>但是，这个说法还有另一面</p><p>・こう見えて俺<strong>ビビリ</strong>なんで</p><p>ビビリ　びびる＝害怕</p><p>・<strong>離婚されたんじゃない。こっちがしたんだよ</strong>。</p><p>不是我被离婚，是我提出的离婚。</p><p>・夜更かし<strong>恒例</strong>　(ko rei)</p><p>・環七(kannana)/環八　环状线　阿佐ヶ谷</p><p>・オーラが違いますね</p><p>オーラ气场</p><p>・お昼の時はなんか<strong>中ぐらい</strong>な感じです</p><p>中（chu）ぐらい（中位）　不高不矮</p><p>・個店　有个性的店铺</p><p>・最善をつくします 尽最大努力。</p>]]></content>
      
      
      <categories>
          
          <category> Languages </category>
          
      </categories>
      
      
        <tags>
            
            <tag> japanese </tag>
            
            <tag> yofukashi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Protruding Tentacles</title>
      <link href="2021-01-12-Protruding-Tentacles/"/>
      <url>2021-01-12-Protruding-Tentacles/</url>
      
        <content type="html"><![CDATA[<p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gml854nfq3j31zf0u0kjn.jpg" alt=""></p><p><em>36:29, Into The Wild (2007)</em></p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gml8sps1snj31zr0u0x6s.jpg" alt=""></p><p><em>40:03 </em></p><p>羨慕他可以放下周圍一切的勇氣。梭羅說，give the truth. 或許，我們只是一直活在生活的假象之中，迷失了方向。</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gmla41dy9bj320d0u0qv8.jpg" alt=""></p><p><em>1:18:34</em></p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gmla6o986nj31zw0u0u0y.jpg" alt=""></p><p><em>1:20:04, Call Of The Wild, Jack London</em></p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gmlb2pdhlyj320g0u0hdw.jpg" alt=""></p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gmlbo0w3dlj31zw0u0b2b.jpg" alt=""></p><p><em>Doctor Zhivago</em></p><p>看到最後，才知道這是一個真實的故事，有一個人真實的人，他經歷了這些事。<br>Good to know he finally found something he’d been persuing.</p><p>*(This is the first post using the tag <u>#Protruding_Tentacles</u>, and there will be plenty of them, depicting my unaccomplished dreams)</p>]]></content>
      
      
      <categories>
          
          <category> Tweets </category>
          
      </categories>
      
      
        <tags>
            
            <tag> film </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sleepless Night</title>
      <link href="2021-01-10-Sleepless-Night/"/>
      <url>2021-01-10-Sleepless-Night/</url>
      
        <content type="html"><![CDATA[<p>兩點了，全宿舍都還在做開題報告，因為明天中午之前需要提交。</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmj4zlrmybj31900u01kx.jpg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Tweets </category>
          
      </categories>
      
      
        <tags>
            
            <tag> daily </tag>
            
            <tag> 學術 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Untitled</title>
      <link href="2021-01-10-Untitled-27/"/>
      <url>2021-01-10-Untitled-27/</url>
      
        <content type="html"><![CDATA[<p>西二教學樓上自習的記憶。遠山淡影。<br><!-- ![](https://tva1.sinaimg.cn/large/008eGmZEly1gminhw3u7qj31900u01kx.jpg) --><br>沒有霧霾的天空。連綿起伏的申花路的高層住宅。跨越啓真湖面的凝視。<br><img src="https://raw.githubusercontent.com/gitkeniwo/image_hosting/main/img/7BB73D82-DD1F-4C6B-9616-D0DF1A141A1C_1_105_c.jpeg" alt=""><br>冬日的午後。</p><p>Let time stay paused at this moment.<br>Faisons plaisir au présent.</p>]]></content>
      
      
      <categories>
          
          <category> Tweets </category>
          
      </categories>
      
      
        <tags>
            
            <tag> daily </tag>
            
            <tag> photo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Untitled</title>
      <link href="2021-01-09-Untitled-26/"/>
      <url>2021-01-09-Untitled-26/</url>
      
        <content type="html"><![CDATA[<p>天高雲淡。體感4攝氏度，AQI 47。我們活在同一片藍天下，我們的生活都是一坨狗屎。</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gmhiou029dj31900u07wh.jpg" alt=""></p><p>It’s 2021 and I don’t feel a fucking thing. It’s nice that you don’t feel things when surrounded by endless shit. The hippies say the numbness is cool. The Chinese is always cool.  </p><p>Est-ce-que c’est le néant grand ou la mort du cœur. </p><p>Je ne sais pas. Je ne saurais pas. </p><h1 id="最近在幹嘛"><a href="#最近在幹嘛" class="headerlink" title="最近在幹嘛"></a>最近在幹嘛</h1><p>寫論文，嚴格來說是開題報告，就像人類分裂一樣，剛才還心如死灰，覺得沒救了想要結束一切，現在又彷彿看破天機，在電腦上如饑似渴的打字。<strong>Bipolar disorder</strong>, as one might suggest. 有時候你覺得正在面臨著人生中的關鍵時刻，但回過頭來看，好像只是自己太真劍，把期望、信心、自尊，把整個人都押上去準備大幹一場，最後那一股蠻勁也只是寂寞罷了。世間事大抵如此。</p>]]></content>
      
      
      <categories>
          
          <category> Tweets </category>
          
      </categories>
      
      
        <tags>
            
            <tag> daily </tag>
            
            <tag> photo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>紀念</title>
      <link href="2020-12-31-Untitled-25/"/>
      <url>2020-12-31-Untitled-25/</url>
      
        <content type="html"><![CDATA[<p>我一直在思考，怎麼度過糟糕的2020年的最後一天。這簡直太讓人心煩了。我應該出去看一場電影？我應該去西湖、去西溪濕地閒逛一天？我應該找幾個朋友出去大搓一頓？還是應該上Coursera好好學習，以表示接下來的時間我將努力準備跑路？</p><p>這種無謂的尋求紀念的想法本身就讓這一天變得很糟糕了。我焦灼不安，有一股巨大的美好事物將要逝去的感傷和無可奈何，儘管2020不能稱得上叫人懷念，但對於我來說這意味著我20歲的開端。我一定要做點什麼。事實上，我並沒有那種可以在12月31日做出什麼讓人大跌眼鏡的事情的能力。我是那麼的普通和平庸。從睜開眼起就伴隨著我的那股惴惴不安的焦慮其實是我內心對自身的mediocrity的震怒。</p><p>回過頭來看自己的人生，又何嘗不是充滿了這種刻意的紀念符號呢？坦率來講，我是個非常乏味的人。我缺少一些能讓我像打了雞血一樣主動去狂熱擁抱的愛好。從小到大我最擅長做的事就是fitting-in，強迫著自己去融入與周圍的環境，不停的洗刷心目中自己的形象，讓他顯得不那麼weird，不那麼在別人眼前抬不起頭。《進擊的巨人》裡面的ライナー和ベルトルト不也是這樣才潛伏進調查兵團的嗎？不斷的給自己的靈魂灌輸虛假的幻想，直到誕生多個人格，分不清自己到底是へいし還是せんし。所以，我這樣ダメな人間，也就是依賴於如此的紀念符號而存活至今的。它們是我的假面，是我人格的支柱，就像程式設計裡面一個類的屬性和方法一樣。</p><p>說了這麼多，我現在，只是有點厭倦這種無謂的假裝了。劉瑜說，她並不是在交友方面有什麼障礙，大多數時候她只是懶，懶得去經營一段關係。我現在也不是得了什麼抑鬱症才對周圍缺乏興趣，只是懶得去發現那些可做可不做的事情，懶得去打卡，去花費功夫去消耗機體的能量，去搜羅一筐標籤貼在自己身上，然後靠他人的目光來定義自己。</p><p>2021，我懶得做這些事了。</p><p>杭州的嚴冬，手腳都凍得無法屈伸，日程表上，畢業設計、期末考試⋯⋯我累了。2020的最後一天，我不想出門看電影，不想逛街不想跟人類聚餐，不想高談闊論許下一堆實現不了的resolution，不想參與ZJU學生節的狂歡，也不想裝作我熱愛學習。我只想躺在床上，開著空調，慵懶的度過一下午而已。打開窗戶走到陽台，零攝氏度的冷空氣瞬間包圍了我，對面宿舍的樓上西斜的陽光，樓下電動車的鳴叫，難得的空氣質量優秀，遠處能望見申花地區層層疊疊的高層住宅。</p><p>假裝今天不是2020的最後一天。2020不值得紀念。</p><p><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gm75wxvi64j312i0u0e81.jpg" alt=""><br><em>by iPhone 12 mini, NOMO 135Ti</em></p>]]></content>
      
      
      <categories>
          
          <category> Tweets </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 毒力撕烤 </tag>
            
            <tag> daily </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>寒潮將至</title>
      <link href="2020-12-29-Untitled-24/"/>
      <url>2020-12-29-Untitled-24/</url>
      
        <content type="html"><![CDATA[<p>一下午之間，杭城氣溫降至零下13度。</p><p><img src="/img/20122901.JPG" alt=""></p><p><img src="/img/20122902.JPG" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Tweets </category>
          
      </categories>
      
      
        <tags>
            
            <tag> daily </tag>
            
            <tag> hangzhou </tag>
            
            <tag> photo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Untitled</title>
      <link href="2020-12-28-Untitled-23/"/>
      <url>2020-12-28-Untitled-23/</url>
      
        <content type="html"><![CDATA[<p>禮拜一，又是滑水的禮拜一，從睜眼就開始的焦慮，壓倒性的緊張情緒，外化為不停的做無意義的事情，試圖麻痹自己的所有感官，讓思維滯留在機械性地重複裡面，簡而言之，不停的玩手機，直到下午與導師面見的時間逼近，最後才確定今天是匯報不了什麼東西了，膽戰心驚的寫訊息，順便還問了下學院搬遷到大西區的問題嘗試緩解一再拖延的尷尬。</p><p>然後又幹了什麼————我自己也說不清了，總之一定是某種機械性的重複，徒勞的消遣，對自己人生的無責任。更糟糕的是我不僅能在滑水後重新審視的過程中理解到這種罪惡的人生浪費，更讓人暴跳如雷的是我在滑水的過程中是完全清醒且明白的。也就是說，我知道自己正在做無聊的事情，可我就是不想停下來。從精神分析的角度講，這種知曉全局情勢的不作為更讓人憤懣—或者說，更傷人自尊。於是乎，這件事好像走進了黑洞一般，焦慮讓我的機體有滑水傾向，而越滑水我是越焦慮的。</p><p>倘若我能夠認識到人生的無意義性，那麼在滑水這個本應緩解焦慮的動作中，我才能把自己從惡性循環裡解放出來。比如說，我知道自己就是個垃圾，那又怎麼樣啦？我人生的意義就是在不斷的消遣中安穩度過。我就是喜歡低俗的奶頭樂，喜歡迷人的時間陷阱。諸如此類的自我暗示，將摸魚這件事正當化。想想Nanami說過的話，<strong>労働はクソです</strong>。即便是父母提供經濟資助的大學期間，只要做好本分的學習工作，其他比如桂枝強加於人的傻逼東西通通見鬼去吧，不摸魚才是傻逼呢。</p><p>這麼想，好像心裏面好受了很多。畢竟，在這個世界活下去真的很難了。<strong>跑路</strong>才是我當下的人生意義。</p><p>東京都和韓國接連確診了變異的COVID案例，不知道上海還能堅持多久。昨天NF發佈了<em>Death to 2020</em>(偽)紀錄片，所謂的笑著笑著就哭了。今天，WHU一位同學因考驗失敗從樓上跳了下來。廣東一所高校的男生在課上把濃硫酸從兩個女生的頭上澆了下去。還有很多不能以中文使用者身份討論的時事。<strong>「大半個中國，什麼都在發生。火山在噴，河流在枯。」</strong></p><p>今晚還看了<em>《頤和園》</em>。然後去單曲循環了郝蕾的<em>《氧氣》</em>。</p><p>院線好評如潮的<em>Soul（心靈奇旅）</em>，我在NHD上找到資源看了，有一點後悔沒去電影院，畢竟冬天+一個人，還有本月支出有點過高了，預算不夠。以為跟COCO一樣我會哭的稀裏嘩啦，結果沒有，儘管我還是很想哭的。我們這樣的小鎮做題家，是牧草，是螺絲釘，就是受不了這種談夢想的vibe。你問我有什麼夢想？出生在瓷器國，這問題依然淪為了一個笑話。還有友鄰吐槽：22最後好像跳到了中國去。迪士尼可太狠了。</p>]]></content>
      
      
      <categories>
          
          <category> Tweets </category>
          
      </categories>
      
      
        <tags>
            
            <tag> daily </tag>
            
            <tag> 小并感 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Untitled</title>
      <link href="2020-12-23-Untitled-22/"/>
      <url>2020-12-23-Untitled-22/</url>
      
        <content type="html"><![CDATA[<p>午夜零点从宿舍楼道间走过，依次闻到了麦当劳川香酱、干拌麻辣烫、椒盐炸鸡、烤冷面的味道。</p>]]></content>
      
      
      <categories>
          
          <category> Tweets </category>
          
      </categories>
      
      
        <tags>
            
            <tag> daily </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>狭窄与幽闭</title>
      <link href="2020-12-18-Untitled-21/"/>
      <url>2020-12-18-Untitled-21/</url>
      
        <content type="html"><![CDATA[<p>我喜欢什么样的空间？在问这个问题之前，首先需要明确的是，人类应该有权利去选择自己喜欢的生存空间。这就是说这个人的生存空间并不是一成不变的，也不应该被其它社会结构约束着，倘若做不到这一点，在我这里就是一个吃人的社会。狭窄的香港是吗？也许，但香港人有every right选择香港以外的地方定居。中国大陆，朝鲜，很遗憾，你一出生，你的户籍就被锁死在某个随机分配的区域之类，剩下的，从概率学上讲（九亿中国人月收入不足2000¥），只能听天由命了。</p><p>我个人更喜欢紧凑的空间，compact，well-designed，是一种有秩序的对周围环境的最大化利用。香港又是一个很好的例子，虽然香港常常给人留下狭窄而逼仄的印象，细细长长的高楼，双车道，正面看很苗条的叮叮车，只能容下一个人宽度的自动扶梯，事实上，香港的面积跟新加坡相差无几，只是地貌多山，真正适合开发大规模房产的地方很少很少。但正是这种簇拥的、熙熙攘攘的氛围定义了香港，香港也不会因此而受到嫌弃，它塞下了700w的常住人口。除了不能让你在视觉上感到开阔之外，香港在这股紧凑的设计森林之中更多体现的是它作为世界级的经济体所展现出的发达。香港的商场虽然都挤在MTR的站点之上，几十层的高楼之下，走进去你完全不会感到压抑，铜锣湾时代广场，太古城中心，都是经过了长长的MTR地下出口之后才豁然开朗的，让我印象最深刻的是旺角朗豪坊，坐电梯到6层还是10层之后，这个商业综合体的全貌才在你眼前缓缓展开，虽然囿于旺角的寸土寸金它的截面面积不会很充裕，但设计师在这栋大厦的中部挖空了5、6层，再配合大型的悬吊艺术装置制造了一个literal空中花园，超长的直通顶层的自动扶梯也让第一次走进这里的人停不下口中的惊叹。MTR HKU station通往港大的出口有三部垂直电梯，因为港大在山上，而地铁站在地上。桂枝的话肯定让你出地自己爬山去，但这里是香港，在肿共插手之前是最接近理想自治城市的地方，自然也会诞生这种便利的结构，从港大A出口乘坐电梯到山顶，电梯门一打开，没来过的人又会惊叹了。明明刚刚还在地底下，港岛线淡绿色的内饰，一排商店在站内铺开，美心和711，突然之间眼前就是HKU红砖外饰的校园轮廓。香港是紧凑而立体的，在MTR的站内，你会联想到自己上方驶过的叮叮车和人群，油麻地弥敦道的地道，从海防道望向海港城的反射着澄碧天空的办公楼幕墙，中环IFC海蓝色的天桥，抑或是从Apple走到太古广场走到金钟高等法院。香港的立体结构让人着迷。东京也是这样，虽然我还没有机会去东京，但从各个剧集和油管上的视频我已经感受到了东京的立体，是一种涌跃在日式简洁的线条语言之间的鲜活。</p><p>但是我不喜欢幽闭，这种幽闭不是绝对意义上的物理度量来定义的，比如，让人住在5平米的小屋之内，又比如桂枝大学十多平米的宿舍却要四个人共享，那么每个人实际利用的空间也是很小的。虽然这种具体到数字的狭窄听起来就让人变色，共情能力强的人甚至能直接想象出困于此般幽闭房间里状态而感到不寒而栗，但这都不是幽闭的特征。因为，我之前就说过，人是可以流动的。如果只在这种幽闭的世界里呆上一秒钟，那就完全不是问题，体验一下死后住在棺材和骨灰盒里是什么感觉嘛。但是，如果人被囚禁在这种状态里面，这无疑是一种糟糕透顶的情境了。</p>]]></content>
      
      
      <categories>
          
          <category> Tweets </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>关于繁体字</title>
      <link href="2020-12-10-tweet/"/>
      <url>2020-12-10-tweet/</url>
      
        <content type="html"><![CDATA[<p>今天浏览98的时候意外的发现了一位华裔留学生写的自己在ZJU的经历，絮絮叨叨了好几页，以美本和国外的经历来吐槽贵校种种非人道的设计和制度，看下来还算有趣，但是他本人由于在加拿大呆了很久，学中文的时候就是学的繁体字，所以整篇文章也都是繁体字。不出我的意料，下面的回复里也充满了对繁体字的偏见。有人评论因为繁体字再加上这篇文章太长，他的阅读速度降低到了龟速，看到1/3的时候就想吐血，还有人直接就从动机和意识形态的角度质疑文章的作者，毕竟这篇回忆录里也没说几句浙大的好话，可能戳痛了他们内心里面的某种价值。在豆瓣八组看到因为使用了繁体字而被炎上的现象我大概不会诧异——毕竟Ta们代表了真实的贵国人文化水平。但是在<del>你</del>我校也看到这样的现象足够让我灰心了——即便我在大一的时候就不断的提醒自己降低对贵校的期望值，每当这样残酷的现实向我袭来，我心中也还是有种说不出来的滋味。</p><p>其实我心里面是清楚的，每次看到留学生/海归/台湾HK人/外籍华裔人士在中文论坛分享自己的经历，帖子后面的纯种<strong>中国人</strong>的评论总是绕不开这几个话题：繁体字，意识形态，洋大人。</p><p>也会有通情达理的人，视野开阔的人，但只要人气一上去，或者小众论坛里的内容被拎到一个含中国人浓度更大的地方等待路过的吃瓜群众来品头论足，这些让人感到恶心回帖总是会出现。他们好像非常精明，但对我来说有点过于精明了，他们似乎能够瞬间定位到文章里面可能引起某个群体不适的地方，然后以市侩而老练的句式指出，以求获得更多同伴的支持。</p><p>所以，繁体字，在这样的文化环境下，已经与「台独」「民主自由」这样的字眼绑定起来了。只要不用简体字，你就是不尊重我们的阅读习惯，你就是居心叵测，台湾间谍——我已经倦于看到这些缺乏逻辑感的话术了。It’s deranged and repulsive. 经历了十二年的衡水、毛坦厂式教育，再gone through所谓的思修、毛概这些洗脑课程，圈养在封闭的国门和局域网里面，从统计学的角度上讲，很难不诞生这样仇外的文化现象。「警惕」、「别被公知、恨国党带了节奏」……OK, I hate repeating these shit words, and this is the last time. 所以活在红色高压之下的人们，高中生、大学生、职业技术学院的学生、打工人，他们总是在留意着某些看不见摸不着的事物，就像是病毒，或者恶魔。他们活在这样的语境中，活在一段「屈辱」的历史之下——虽然我不知到底有什么正当性可以让我们直接继承「大清」的「灾难」。他们的一举一动都是被嵌进潜意识里的集体叙事所影响着的，this disproposition to protect this intangible group,  the nation. 可是最讽刺的是在这里面又有多少人能够说得清自己为何与这个集体是息息相关的呢？少的可怜。或者说，意识到应该去探索这种link的人，也都意识到了原来一直以来都是这个「集体」do them the most harm. 所以，人们为什么不能产生这样的意识呢？意识，要么得靠自己figure out，要么是从别人那里获得的。今天看到北师大的统计说中国有9亿人月收入在2k CNY以下。Surely  appalling number. 是生活的压力阿，是overpopulation，家庭的供养，无论如何也要抚养的子嗣，房屋与教育的费用，是户籍制度，是多变的政策，是城管，是法律——这要细说的话就是一部当代“共产”中国史了。生活的压力让人们没有时间去思考，家庭和传统礼教让人们疲于奔命、疲于应付一种虚幻的人际关系。最近<strong>蛋壳公寓</strong>暴雷的话题下，一边被扫地出门，一边支持HK Police的pinky们就是一个特别好的例子。这可还不够，通往世界的网络出口被掐断，知识分子的大声疾呼被删除，网络警察一丝不苟的清除掉人们的记忆，受过高等教育的程序员、研究者，他们当然有能力探索更广阔的网络空间，所以在程序员群体中，「不爱国」的人的比例也大大提升了，但是一般人呢？那9亿月收入不足2k的中国人呢？所以，这种意识，在自己身上很难开花结果，也没有渠道从别人那里获得，其结果就是，可以任由他人来糊弄。于是教科书可以篡改，思想可以被植入，人人都是vigilante，想到台湾人拍了一部电影来揭露当年戒严时期的检举匪谍的口号，并在全国上映了，海峡对岸却一直检举到了2020年，甚至还会继续。</p><p>所以啊，跳出自己的舒适圈来看，我们身边的环境已经这么坏了，那个说因为是繁体字所以阅读困难的评论也就不足为奇了。我们国家花了20年简化了汉字，又花了20年简化了人心。繁体字消逝的年代，我还没有出生，但是在很多80年代的照片里面看到过，电影票据，市场商店招牌，街头的口号，早年的麦当劳门店……人心消逝的年代，我亲身感受到了，就发生在我的身边，我的同龄人，同学，朋友，同一个城市的大学生，在知乎上豪言壮语的青年。中共用教育抹杀掉了一代人，五六十年前，它用无教育抹杀掉了另一代人，虽然两者本质上是一样的。它不停的制造对立，所以才会有“洋大人”，“台蛙”和“废青”。所以才会有“蝈蝻”和“女拳”。这些话题都涉及了太多的东西，今晚是没办法写下去了。一方面，我理解为什么贵校同学对留学生有如此大的恶意，但问题的核心在于这并不是留学生他们主动造成的，they don’t mean it, EITHER. 就像98上这篇文章的作者自己也说了，他们也要承担3倍于local中国学生的学费，这还不包含其他生活费用，再加上人家大学以后都是自己cover学费开销的，这就更困难了。另一方面，就像我之前说的，他们太过“精明”了，这也是在如此「内卷」的环境中自然进化出的生存之道吧，结合别人的背景来看，贵校的条件的确是一坨shit了，相关的抱怨还会有国外的举证对比来印证，但有的人就是能从这里面读出condescending的语气给予反驳，气急败坏的，还会加上传统艺能请别人去国外发帖。所谓的包容与多元在当前的政治环境下已经是一个大家心知肚明的笑话了，直接说我们不欢迎外国人，玻璃心护校，虽然小气了点，不浪费大家时间岂不是更好。</p><p>因此，我可以在这直言我讨厌中国人，I hate Chinese. 但是要加限定条件，我讨厌<strong>上述</strong>的中国人，讨厌<strong>那些</strong>人。有人会说，这也不是他们的错，他们也是一个个活生生的个体，也饱受tg的洗脑与荼毒。Sigh，我真的不是<em>圣人</em>，我也是个暂时在桂枝国内浮沉的普通人，我没有博爱的精神，我从小就跟他们一起长大，活在他们的掌控之下，<strong>so sick</strong> of all the shit. TLDR管不了那么多了。我只希望余生永远不要再跟他们有交集。 </p><h2 id="Love-amp-Peace"><a href="#Love-amp-Peace" class="headerlink" title="Love &amp; Peace."></a>Love &amp; Peace.</h2>]]></content>
      
      
      <categories>
          
          <category> Tweets </category>
          
      </categories>
      
      
        <tags>
            
            <tag> chinese </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>时时刻刻</title>
      <link href="2020-12-09-film-thehours/"/>
      <url>2020-12-09-film-thehours/</url>
      
        <content type="html"><![CDATA[<p><em>Virginia Woolf</em>, 她的语言，她的文字，闪烁，飘忽，飞快的变幻，急剧的更替。她是一位女性作家，意识流(Stream of Consciousness)派的代表人物。她跟「尤利西斯」的作者<em>James Joyce</em>同年出生，又同年离世。她在自己的口袋里装满了石头之后，投入了她家附近的河中。</p><p>影片中三个女人，她们都痛苦着，迷失着。闭上眼是虚幻的希望，睁开眼是庸俗的生活。Virginia有一个爱她的Leonard，愿意为她放弃一切搬到small town里过平静的日子，这却并不能让她快乐。她觉得自己没办法从这令人泄气的困境中逃脱，她觉得自己不会再恢复神志了，the voices，躲在她背后，她耳边的voices，不停地叨嚷着折磨着她，但她确信那是她自己的心声，所以她奋不顾身地冲向即将发车的站台，像要失控一般对着Leonard怒吼着：”it’s my voice.” 可是，在Woolf的年代，她别无选择，男性在社会中占据很高的地位，为了不成为Leonard的负担，她结束了自己的生命。</p><p><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gli3fsok7aj31ev0u0qv8.jpg" alt="image-20201210004831589"></p><p>50年代LA的中年主妇Lora，她的生活完全被丈夫和孩子占据，她作为女性丧失了存在的价值，甚至说只能在男人过生日的时候为他做一个蛋糕来让他体会到爱，这个蛋糕甚至也被扔进了垃圾堆。在酒店的床上半醒半睡地哭过之后，她做出了一个比死亡更勇敢地决定，她放弃了既有的生活框架，在社会中的地位，母亲的身份，无论如何也要探寻自己的独特的生存方式。</p><p><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gli3fv02p6j31gy0u0e83.jpg" alt="image-20201210005035351"></p><p>Lora的小男孩，长大之后就变成了第三个故事中的残疾作家Richard，Richard对Lora的不辞而别感到愤怒和不解，还在书中把他妈给写死了。从人物的对话中我们也可以推测出，他早年与梅姨饰演的Clarissa和另一个同性伴侣之间有着非常微妙和亲密的关系（梅姨说毕竟at least她拥有那个summer）。Clarissa说，在那个美好的早上，Richard在门廊上对她讲“good morning, Mrs Dallowey”, 从那以后她就been stuck了，她就陷入了stuck with richard的生活，所以她独自nursing Richard for years，尽管男伴侣选择了离开。可是真的是她被Richard困在爱慕与责任之中了吗？在NYC Harlem的老旧公寓里，漆黑污秽的楼道之间，richard躺在轮椅上哀求Clarissa放过她，“I’ve stayed alive for you, but now you have to let me go.”花店的老板娘说，这是一本非常难懂的书。她是书中的主人公，却又不停地否认这一现实，就像她说她热爱每天到richard的公寓里面打扫打扫的日子一样，她的生活也是很脆弱的，如果richard这根弦绷了，就只能面对剩下的平庸和单调了，这也是为什么她在throw这个party的一方面心事重重，另一方面又”have this presentiment”，充满了不详的预感，直至richard挣扎着从窗边坠落下去。这十年里其实是Richard为她而活的。</p><p><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gli3fy5dt7j31c00u0e85.jpg" alt="Screen Shot 2020-12-10 at 12.26.38 AM"></p><p>影片中还有三个女主人公和女性伴侣的亲吻，这也体现了不同时代的特征，是对于一种更加开放的人际关系的讨论。同性之间的接吻不一定代表romantic的亲密关系，在本片压抑的社会氛围之下显得尤甚，20年代的London，50年代的LA，对应的是女性主义的萌芽和发展阶段，女人承担的社会角色和逼仄的生存空间，在事业上难以成就，被家庭琐事烦累。女性之间的接吻更多的象征的是她们对不公正待遇的控诉以及相互之间的依靠和帮助。</p><p><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gli3fmxwlij31gk0u0qv8.jpg" alt="image-20201210004524680"></p><p>本片的叙事和转场也是很巧妙的，不同时空的衔接总是以同类型的事件来过渡，比如梅姨刚刚准备去开烤箱，下个镜头就转到了Lora的蛋糕，等等。看到<a href="https://movie.douban.com/subject/1305666/" target="_blank" rel="noopener">有人说</a>原著<em>(The Hours)</em>本身就是非常精彩的，这个帖子还讲了故事的很多细节与《达洛维夫人》中情节的关系， 而且The Hours这个名字似乎就是伍尔芙为达洛维夫人最开始拟定的书名。此外，我还看到了一篇<a href="https://movie.douban.com/review/1027936/" target="_blank" rel="noopener">豆瓣影评</a>梳理了本片中的一些象征符号，包括三个女主人公的孩子的年龄（怀胎、孩童、成年人）代表了女性主义在西方从萌芽到成熟的一套过程，可以作为参考。<del>BTW 国土安全的主演Clare Danes在这里面也太美了吧！！她的脸嫩的可以流水！！再回过头来看国土安全S8不得不让人感叹岁月呀</del></p><p>最后，</p><blockquote><p>Leaonard: In your book, you say someone has to die. why?</p><p>Virginia: Someone has to die in order the rest of us should value life more. It’s contrast.</p><p>L: And who will die?</p><p>V: The poet will die.</p></blockquote><p>诗人是会逝去的，诗人在这个庸俗的世界里用死亡来警示世人。</p>]]></content>
      
      
      <categories>
          
          <category> Films </category>
          
      </categories>
      
      
        <tags>
            
            <tag> film-drama </tag>
            
            <tag> fem </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Untitled</title>
      <link href="2020-12-04-Untitled-20/"/>
      <url>2020-12-04-Untitled-20/</url>
      
        <content type="html"><![CDATA[<p>贵校总是能各种添堵，花重金购置小电驴之后，每周的充电成为头号焦虑。</p><p>不过也有好处，促进作息规律，明早早起去抢充电桩。</p>]]></content>
      
      
      <categories>
          
          <category> Tweets </category>
          
      </categories>
      
      
        <tags>
            
            <tag> daily </tag>
            
            <tag> zju </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>破裂与腾飞</title>
      <link href="2020-12-04-film-balloon/"/>
      <url>2020-12-04-film-balloon/</url>
      
        <content type="html"><![CDATA[<p>红色的气球，在冷色调的镜头中尤为显眼，藏区朴素的颜色，一望无际的牧场，带刺铁栅栏上飘扬的塑料纸片，羊群与摩托车，青海或者西藏。</p><p>惨淡而凋敝的背景里面，一个家庭里的人各怀心事，妹妹做了尼姑，到头来却看不到那本试图讲明她的过去的「气球」，姐姐的安全套被孩童当作气球偷去，自己陷入了生育的道德陷阱里。藏地的信仰与女性权利的冲突重重，她们是男人发泄的对象，是灵魂转世投胎的母体，是计划生育的作用人群。父亲在县城说着蹩脚汉语给孩子们买了两只气球，最后一只破裂，另一只飞走了，红色的精子在天空中无拘无束的翻腾，吸引了所有人的注目，我想那应该就是人们囿于传统礼教之下内心深处的向往吧。</p><p><img src="../img/b674-iufmpmp1256471.png" alt="万玛才旦导演新作《气球》将于台北电影节作者视角单元进行展映……"></p>]]></content>
      
      
      <categories>
          
          <category> Films </category>
          
      </categories>
      
      
        <tags>
            
            <tag> film </tag>
            
            <tag> film-drama </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>La Boum, L&#39;Amour.</title>
      <link href="2020-12-03-film-laboum/"/>
      <url>2020-12-03-film-laboum/</url>
      
        <content type="html"><![CDATA[<p>Sophie Marceau, 第一次认识她是在安东尼奥尼的「云上的日子」，当时我不懂法语，不知道苏菲玛索是谁，也看不懂云上的日子，只是觉得这样的影片絮絮叨叨，镜头切过来切过去，people roaming without knowing exactly what to do, 这样的日子很惬意。</p><p>La Boum，在法语中有两种意思，一是表示砰地一声，二是舞会。bilibili上可以直接播放，我又在nhd上下载到了一个很高清的版本，又费了好大劲找到了法语和广东话的字幕，这才不容易的看上了。故事很简单，青春期的少男少女，彼此交接着碰撞着，la boum，砰的一声，爱情在心中发芽。中年危机的老爹和伤心的老妈，成年人也痛苦地追求着爱情。</p><p>对我这个literally奔三的old man来说，最大的暴击大概就是主角们年龄了吧，Vic本人只有十三十四岁，所以在凌晨的海滩小屋里她迷茫和暴躁。她觉得自己付出了很多，但是她又勇敢的去追寻。家长们对孩子之间的romantic relationship并没有表现出应有的诧异——或者说，我不知道是不是可以说「应有」的诧异。也许在另一个世界里面，没有那一套繁文缛节的道德规范来阻止少年少女们相爱。</p><p>短短的一百零七分钟里，大量的人物涌现着活跃着，衣着时尚的奶奶、戴牙套和眼镜但很可爱的男生、认为爸爸很sexy的女主朋友的妹妹，还有最后的舞会上，跟Vic一见钟情接吻共舞的陌生人，世界上其他地区的人看了都会这样感叹吧，巴黎真是一个充满爱的城市。</p>]]></content>
      
      
      <categories>
          
          <category> Films </category>
          
      </categories>
      
      
        <tags>
            
            <tag> film </tag>
            
            <tag> film-romance </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Untitled</title>
      <link href="2020-12-03-Untitled-19/"/>
      <url>2020-12-03-Untitled-19/</url>
      
        <content type="html"><![CDATA[<h1 id="简短总结下今天几则移民广告。"><a href="#简短总结下今天几则移民广告。" class="headerlink" title="简短总结下今天几则移民广告。"></a>简短总结下今天几则移民广告。</h1><h2 id="fem"><a href="#fem" class="headerlink" title="fem"></a>fem</h2><p>第一则是弦子起诉朱军性侵案、平时叫嚷嚷的你国媒体鸦雀无声，就只有端传媒做了法院门口人群聚集的报道，一个小时之内国宝两次告诫现场人群不能举标语，两名外媒被强制带走。事后相关微博和博主被炸，朱军成为豆瓣敏感词，还有很多恶臭发言截图等。</p><h2 id="hk"><a href="#hk" class="headerlink" title="hk"></a>hk</h2><p>第二则是黄之锋“认罪”被判13个月半，跟他一起接受判决的还有周庭等人，最经典的照片是hker用手机电筒照亮黄的囚车。</p><h2 id="AU"><a href="#AU" class="headerlink" title="AU"></a>AU</h2><p>中澳争议继续发酵，澳洲微信公众号发布的几则澄清声明被删掉，这让人想到前段时间英国使馆发布的”「关于hk问题的声明」被删的声明“被删掉，毕竟删国掩疫传统艺能了。</p><h2 id="此外"><a href="#此外" class="headerlink" title="此外"></a>此外</h2><p>每天还有好多好多事在发生，原神当选apple年度游戏，weeknd公开diss格莱美，ellen page(elliot page)公开自己的trans身份，蛋壳公寓遍地暴雷和相关的粉红被锤截图。时代的一粒灰，落在大家的头上。</p>]]></content>
      
      
      <categories>
          
          <category> News Comments </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hk </tag>
            
            <tag> politics </tag>
            
            <tag> feminism </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>本次hexo项目从老mac迁移到新mac上遇到的问题种种</title>
      <link href="2020-11-24-blog/"/>
      <url>2020-11-24-blog/</url>
      
        <content type="html"><![CDATA[<h1 id="git子模块的相关问题"><a href="#git子模块的相关问题" class="headerlink" title="git子模块的相关问题"></a>git子模块的相关问题</h1><p>主要是<code>/hexo/themes/</code>下的主题dir的git提交问题。由于我最开始是直接从主题的github repo页面上拉下来的，当时对git的理解还不够深入， </p><p><a href="https://www.hozen.site/archives/23/" target="_blank" rel="noopener">https://www.hozen.site/archives/23/</a></p><p>我的做法：<br>· 重新fork了一下 hexo-theme-next<br>· 把它添加到了我的子模块<br>· 直接mv -d 了原有的next模块<br>· 从mbp2015上拷贝了config.yml，并更改主题名为hexo-theme-next<br>（此处复习一下vim前后段尾是<code>{</code> , <code>}</code>两个键  ）</p><p>但在我做完以上步骤之后，git submodule</p><p><img src="../img/image-20201203145349582.png" alt="image-20201203145349582"></p><p>这应该是原来旧版本里面还留着上个next主题的submodule配置信息。</p><p>查询csdn，<strong>删除子模块的步骤</strong></p><blockquote><p> 有时子模块的项目维护地址发生了变化，或者需要替换子模块，就需要删除原有的子模块。</p><p>删除子模块较复杂，步骤如下：</p><p>· rm -rf 子模块目录 删除子模块目录及源码</p><p>· vi .gitmodules 删除项目目录下.gitmodules文件中子模块相关条目</p><p>· vi .git/config 删除配置项中子模块相关条目</p><p>· rm .git/module/* 删除模块下的子模块目录，每个子模块对应一个目录，注意只删除对应的子模块目录即可</p></blockquote><p>此时我再执行以上步骤之前，重新add, commit了一次，再查看以上配置文件，均没有老next的记录了。</p><p>再运行一次<code>git submodule</code></p><p><img src="../img/image-20201203145611504.png" alt="image-20201203145611504"></p><p>恢复。</p><h1 id="2-node-v14弹warning"><a href="#2-node-v14弹warning" class="headerlink" title="2.node v14弹warning"></a>2.node v14弹warning</h1><p>这个很无解，好像是stylus的问题，我难得再去debug了，选择直接回滚到v12。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo n 12.18.2</span><br></pre></td></tr></table></figure><p>要注意的是好像也会node_module里面的hexo依赖包也会在node版本回滚之后出现问题，要重新装一遍，这里我记得似乎是终端会自动弹出一个warning和建议重装的命令，直接复制了执行之后就ok了。</p><h1 id="3-关于git-log"><a href="#3-关于git-log" class="headerlink" title="3.关于git log"></a>3.关于git log</h1><p>这个就太好笑了，我把上面的破事处理完之后直接部署到github pages然后发现我的博文只更新到了今年7月份，后面的新文章都🈚️了，最后发现是我用git log回滚了版本，然后git log返回的提交记录在终端显示的时间顺序居然是从下往上，最上面是最新的提交<em>（因为命令行返回信息之后，等待输入的新行肯定是跟<strong>最下面的一行</strong>最接近，理所应当的应该让最下面的一条记录显示最新版本才对吧）</em>。就这样我的所有博文直接回到了7月。</p><h1 id="4-one-more-thing-post的最后编辑时间。"><a href="#4-one-more-thing-post的最后编辑时间。" class="headerlink" title="4.one more thing: post的最后编辑时间。"></a>4.one more thing: post的最后编辑时间。</h1><p>还有一个很让人头疼的事，每次迁移hexo项目之后，所有博文的最后编辑时间都会变成迁移的时间，尽管你并未做任何修改，这就又让人迷惑，又让真实的最后编辑时间消失了。这个问题我还没去解决，大概搜索了一下，<a href="https://blog.vanxnf.top/2018/09/03/Hexo-博客-Hiker-主题增加文章最后编辑时间，并按照最后编辑时间排序/" target="_blank" rel="noopener">贴个链接 </a>。</p><p>ps. 目前（2020.12.3）使用的主题cactus好像并没有贴出博文的最后编辑时间，所以可以先不用管这个问题……</p>]]></content>
      
      
      <categories>
          
          <category> Blogging </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ss PAC模式wikipedia不加载latex公式</title>
      <link href="2020-11-22-ss/"/>
      <url>2020-11-22-ss/</url>
      
        <content type="html"><![CDATA[<p>只用加上 <code>||wikimedia.org^</code> 即可。</p>]]></content>
      
      
      <categories>
          
          <category> Network </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>El Immortal</title>
      <link href="2020-11-21-Untitled-18/"/>
      <url>2020-11-21-Untitled-18/</url>
      
        <content type="html"><![CDATA[<blockquote><p>El 4 de octubre de 1921, el Patna, que me conducía a Bombay, tuvo que fondear en un puerto de la costa eritrea. Bajé; recordé otras mañanas muy antiguas, también frente al mar Rojo; cuando yo era tribuno de Roma y la fiebre y la magia y la inacción consumían a los soldados. </p><p>1921年10月4日，我乘坐的驶往孟买的帕特那号轮船在红海一个港口停泊。我下了船;想起了悠久岁月前也在红海之滨的早上的情景;当时我是罗马的执政官，热病、巫术和闲散耗损了士兵们。</p></blockquote><p>看博尔赫斯，就是一个逐渐寻宝的过程，就像喝酒，越来越上头。</p>]]></content>
      
      
      <categories>
          
          <category> Books </category>
          
      </categories>
      
      
        <tags>
            
            <tag> writer-borges </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github大文件上传办法</title>
      <link href="2020-11-10-git/"/>
      <url>2020-11-10-git/</url>
      
        <content type="html"><![CDATA[<p>总之，最近我也开始做毕设了，然后需要阅读大量的文献，并做好标注。首选当然是notion，但是notion有个问题就是免费版本的文件上传是有5MB限制的，这就注定了大部分稍微有些图片的论文pdf都越过了notion的限制，所以我需要一个host在web上的网页来展示对应的pdf文件，在notion那边只需要放URL就可以了。Google Drive很不错，但是我目前依旧使用的乞丐版，容量也许不够，所以我想到了github，也不需要翻墙，对导师和其他人来说都还算比较方便。<br>但是Github有个问题是它也对文件大小做了限制，貌似是单个文件不能超过100MB，再加上墙国的网络因素，我放了一个27MB的pdf做试验第一次提交就没push上去。报错是<code>error: RPC failed; curl 55 SSL_write() returned SYSCALL, errno = 32</code>，之后就hang在这里了27MB的文件上传到24.5MB就戛然而止。然后上<a href="https://stackoverflow.com/questions/2702731/git-fails-when-pushing-commit-to-github" target="_blank" rel="noopener">stackoverflow查了下</a>，改了git本地的文件限制<code>git config http.postBuffer 524288000</code>，依旧问题复现。<br>最后想到是不是有什么办法能够破除其大文件限制，毕竟以前看到那么多分享电子书的repo。最后果然找到了，是一个项目叫做<a href="https://git-lfs.github.com/" target="_blank" rel="noopener"><strong>git-lfs*</strong> (large file system)*。</a>，总之安装方便，使用简便，就两行命令，十分省心。<br>使用git-lfs之后立马就push成功了。<br><img src="/img/20-11-10.png" alt=""><br>虽然不清楚git-lfs最大能够支持多大的文件，但是一般的电子书和文献备份应该也是够用了，推荐给各位。</p>]]></content>
      
      
      <categories>
          
          <category> Tech </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Untitled</title>
      <link href="2020-10-09-Untitled-16/"/>
      <url>2020-10-09-Untitled-16/</url>
      
        <content type="html"><![CDATA[<p>长假之后，对于没课的我而言，依旧是长假—GRE、前端、算法，然后是无聊的到处刷刷的日常。好像最近生活里唯一的期待就是UTC+08:00十四日凌晨发布的iPhone 12了，直角边的机身回归了我最中意的Steve Jobs时代的iPhone设计，简直就是一种Post-Old-Fashion（自己随便造的词）。朋友说，我现在的状态叫做假后综合症，可能是因为他还在大三，无法理解这种长假之后依旧是长假的感受。今晚继续做了NRC的_Next Run_，说老实话这个跨越有点大，Coach Bennette直接就让人连续跑20分钟了，我不禁「阿这」。跑完之后在看台上歇了一会，后座坐了一对情侣，尴尬的是当我要起身下去的时候，他们刚好也亲热完了准备下楼回到地面，就刚好撞上了。H市的初秋（不下雨的日子）是我的最爱，晚十点，穿着一件防风衣，里面一件短T，再配一条短裤，惬意十足，走在街边，在路中间骑车，耳机里面是Radiohead和Blur，阿，美妙的日子。</p><p>全家最近也欺负单身汪，排队排到的时候，我给小哥说要一个冰淇淋，他说冰淇淋买一送一，一个不卖，我不知道他是不是mean it，因为经常看到有人分享跟全家小哥之间的趣事，但是当时他的表情真的好严肃，直接把我给唬住了……但是我还是向他表达了我不要送的那个，一个就够了的意思，最后也成功吃上了一个香草与海盐的双拼——全家一般会offer两个口味及其双拼，香草口味是常驻的，另一个口味是随着季节流转的——海盐这个味道我真的不敢恭维，除了我喝过有一款饮料叫做海之言之外，我以为海盐是一种很清爽的，结果上次去点了个全海盐的冰淇淋，感觉就像真的是在吃盐巴一样，好在这次的双拼把咸味中和得刚刚好。不过在我吃完冰淇淋不到五分钟，走上楼之前就后悔了，感觉胃里一阵极寒，是铁板上钉钉的拉肚子的前奏，于是赶紧回宿舍喝了一整杯的热水，幻想着靠那份近乎滚烫的真气中和一下冰淇淋的冰霜，然而到现在小腹正中还是凉凉的感觉。</p><p>还有，今天我一个高中同学发飙了，跟别人争执起父母有关的问题，他认为原生家庭给他带来的负担太大了，而跟他纠缠不清的人认为应该「体谅父母的难处」「骂你也是为你好」。对于这种言论我表示非常震惊了，我不敢相信自己的同辈人，（特别是那人还广泛的阅览了很多欧美文学和影视作品），也能发表出这样不利于自我中心的言论。我以为，自由的土壤，随着浪潮的奔涌，会逐渐展露在空气之中，现在看来，或许对这片土地持有更加悲观的态度，才能避免自己的期许落得一场空了。我对高中同学说我早就看透这一切了，发生在这里无数鲜活的生命的逝去，卢浦大桥上纵身一跃的身影，江夏一中的教学楼上用鲜血表示抗议的不羁的灵魂，与此对比的固步自封的传统势力与可笑荒唐的家国情怀。我说，脱脂吧，向自由的灯塔走去吧，虽然我们可能会跌倒，但绝不会迷失。</p><p>最后，还有今天看到的一条微博，很喜欢。<br><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gjjjw1lruuj30ku6l44qq.jpg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Tweets </category>
          
      </categories>
      
      
        <tags>
            
            <tag> daily </tag>
            
            <tag> news </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Untitled</title>
      <link href="2020-10-07-Untitled-15/"/>
      <url>2020-10-07-Untitled-15/</url>
      
        <content type="html"><![CDATA[<p>东操和西操——不熟悉的，可能还以为一个在学校东面，一个在学校西面。事实上，这两个操场基本上是相连的：它们中间只隔了一条人行道。昨天晚上去东操跑步了，虽然说还在国庆节的尾声，9pm的东操还是熙熙攘攘的，巨大的照明灯无言的伫立在橡胶跑道的四个角落，中间部分是黄绿色的草坪。骑车来的路上虽然穿了防风衣，初秋的夜里寒风还是让人不禁开始打哆嗦，走进两个操场的夹缝，在寄物柜刷卡存放好了随身携带的物品之后，迈入东操的那一刻，又感觉之前的寒意顿时消失了。空空旷旷的操场四周只有一些低矮的铁丝网，甚至连景观树都矮小而看似弱不禁风，整个操场内部却仿佛有某种结界一般抵挡了外界的空气流动，让人在运动之前就已经feel strong了。昨晚先是尝试了著名的runkeeper，后来觉得它的功能实在是过于简陋，又更新了NRC，试着完成了一次First Run，这应该是Nike为初学者中的初学者准备的，整个教程耗时27分钟，开始做了Track Preparation，然后正式的训练分成了8-9个interval，每个part之间会有一分钟的recover，只要有耐心非常轻松的就完成了，当然最惊喜的还是那个Male Coach的迷人的声音, I mean, How can someone be so charming while give you all the strength and encouragement and at the same time showing sense of humour. OH he’s absolutely great!!! 这简直是激发了人想要跑步的信念和欲望，总之，以后的run我还会继续用NRC的。（一些小并感 </p>]]></content>
      
      
      <categories>
          
          <category> Tweets </category>
          
      </categories>
      
      
        <tags>
            
            <tag> zju </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我決定不再慶祝國慶</title>
      <link href="2020-10-01-I-decide-not-to-celebrate-national-day/"/>
      <url>2020-10-01-I-decide-not-to-celebrate-national-day/</url>
      
        <content type="html"><![CDATA[<p>之所以用「慶祝」這個詞，而不用其他表達，諸如「過國慶」一類的，是因為我覺得時間是單方向流逝的，是不在乎你的個人意志的，所以，無論如何，「國慶」這個概念在PRC治下廣袤的國土上是將繼續並且長久地存在的。</p><p>「國慶」從大一開始對我而言，就單單只意味著長達七日的假期了，這穿插在初秋的小長假還會讓妳付出一定的代價，比如說，鋪天蓋地的政治宣傳，節日期間醜惡的市容變化（紅色污染），無孔不入的關於國族認同價值取向的洗腦。</p><p>坦率的來講，我更願意view this whole thing as the mark of the commencement of the sufferings and plight in the pan-sinitic area. 這不像是說當人們慶祝自己生日的時候，同時也應當感謝母親懷胎十月所遭受的苦難；這是明明白白的苦難，它沒有給這裏的人民帶來Marx所許諾的那些美好——反而是無知、愚昧、毀壞、膽怯與獨裁統治。</p><p>總而言之，為了紀錄這種從無感到抵制之間的轉變，我把今日的想法寫下來。以後，若是還在牆內生活，那麼十一對我來說就是調休的日子，它跟普通的雙休日別無兩樣，我閒適、休憩、觀影、壓馬路，都與這個日子所代表的其他含義無關，也不會做出「因為今天是那個日子所以我要XXX」的事情來，不管是反對還是嘲諷還是紀念一種過半世紀的國族淪陷。最大的輕蔑是無視。昨天，中国高速鐵路, which PRC apparently has been boasting for a long time, 因此而大面積延誤兩小時以上。坐在高速鐵路動車組上的人，有多少是為了「慶祝」國慶的呢。</p>]]></content>
      
      
      <categories>
          
          <category> Tweets </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 毒力撕烤 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>怎样打印/解密一份限制打印（need password when print）的pdf</title>
      <link href="2020-09-27-tech/"/>
      <url>2020-09-27-tech/</url>
      
        <content type="html"><![CDATA[<p>今天在网上找GRE OG的pdf，下载到本地准备传到Goodnotes里面的时候，Goodnotes提示该PDF需要密码，excusez moi？明明我可以直接用Skim打开看的。后来才搞明白了原来只是print的时候需要密码，上传到goodnotes里面浏览应该也是认为把权限完全交给了goodnotes，所以同样需要密码，原来还有这种操作。</p><p>解决办法：上传到Google Drive，然后用Google Drive的web preview打开，直接cmd+P，GD会帮你生成一个新的pdf preview，该pdf就可以直接打印了。</p><p>所以这个密码最后还是形同虚设了……不知道adobe会不会起诉谷歌娘(0_0)</p>]]></content>
      
      
      <categories>
          
          <category> Academical </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pdf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>霓虹田园公路数日游</title>
      <link href="2020-09-26-Untitled-14/"/>
      <url>2020-09-26-Untitled-14/</url>
      
        <content type="html"><![CDATA[<p>今天去看了《菊次郎の夏》，我对于公路题材的作品一向不是很感冒，该片的出彩之处也就是北野武本人了，短短的旅途中充斥着大把的夸张与荒诞，成年人的反叛，也遇见了很多有意思的大人，就我本人而言从这部经典的好片中更多地是看见了那个年代日本社会的风貌，看到了人们囿于现实与理想之间的缝隙之中无奈而自嘲式的狂欢，夏日祭，乡间海边绵延不绝的电线杆，周游全国的驴客与无所事事的机车族，还有很多90-00年代的特征元素，后波普主义的饰品和剪辑。这场夏天单单是围绕着菊次郎小朋友的祭典吗？我想不是的，每个人在夏天里面都得到了或多或少的欢愉，人们去思考，去观察，伸出手去触摸到夏天的温度，去野炊，去乡间小路开车，坐在草坪上，坐在年久失修的公交站台里，坐在酒店的独木船陈设中，躺在游泳池边的塑胶椅上，躺在前鸟神社的青石台阶地下，人们爱过，恨过，难受过，为了短暂的交情伤感过。当贴满标签纸的面包车驶过鹤见川大桥的时候，夏天就好像结束了。看着江边的砖瓦桥上飞奔的小男孩的影子，北野武饰演的o ji san依然还是那副面瘫的表情，但是眼神里却带着温柔与怀想。爱知，横滨，故事发生的地点在哪里我不太确定，当那个小小的孤独的身影又消失在賑やかな街並み中，这短短的旅程也就风流云散了。这样的夏天，菊次郎君今后还会度过很多次。</p><p>(update: 原来菊次郎是北野武演的那个大叔的名字！！！！ちくしょう！！)</p>]]></content>
      
      
      <categories>
          
          <category> Films </category>
          
      </categories>
      
      
        <tags>
            
            <tag> film </tag>
            
            <tag> film-road-movie </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Untitled</title>
      <link href="2020-09-21-Untitled-13/"/>
      <url>2020-09-21-Untitled-13/</url>
      
        <content type="html"><![CDATA[<p>今天是秋分，昨天，钱塘江的大潮涌上了西湖南线的之江路，煞白的浪花越过了矮矮的提拔，把路口等候的车辆撞了个七零八落，九溪公交站，应该就是之江校区门口公交站的上一站。一年前，我也喜欢在之江路靠江的一侧漫步，一面是宽广无际的钱江江面，一面是西湖群山葱葱郁郁的崖壁和植被，江水的味道弥漫在空气里面，混杂着奔跑在之江路上忙碌的机车汽油味道，若是遇见周日，4路和308路公交车常常好几趟也挤不上去，只好沿着马路边缘走着走着，走到下一个公交站牌会发现还是簇拥着一大群人，一直走到六和塔走到白塔，最后走到水澄桥地铁站。我不知道在古代，或者说，几百年，几千年之前，住杭州的人们会不会来观潮。毕竟那时候还没有人知晓万有引力定律，江水奔腾，华丽的倒转，就像是时间流逝的方向天翻地覆了一般。总而言之，在今日的大都市之中，这种难得一见的自然现象也触手可及，至少坐一小时以内的公车或者地铁就能看见，我觉得杭州也是很不寻常的地方，当然如果让我搬到之江校区去的话那我是一百个不情愿，这又是另话了。</p>]]></content>
      
      
      <categories>
          
          <category> Tweets </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hangzhou </tag>
            
            <tag> nature </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Untitled</title>
      <link href="2020-09-15-Untitled-12/"/>
      <url>2020-09-15-Untitled-12/</url>
      
        <content type="html"><![CDATA[<p>連日の雨が降ると、杭州はすでに秋になるような感じ。杭州是最擅长下这种阴间雨的。</p>]]></content>
      
      
      <categories>
          
          <category> Tweets </category>
          
      </categories>
      
      
        <tags>
            
            <tag> daily </tag>
            
            <tag> hangzhou </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Untitled</title>
      <link href="2020-09-12-Untitled-11/"/>
      <url>2020-09-12-Untitled-11/</url>
      
        <content type="html"><![CDATA[<p>忧郁情绪来得快，去得不一定快。有时陷进去了头脑就不能思考，只能不断地复现各种令人愤懑的往事。这时候要想快速驱散这片忧愁的阴霾，只需要投身进入另一件事情，当下未完成的作业、对未来的规划、提升自己多个方面技能的备考，也可以是非常具体的事情，比如整理自己的notion、打开终端更新本博客等等。只要自己开始做事情了，内心一方面会暂时将恼人的情绪抛到脑后，另一方面潜意识里也会觉得自己是还有点价值的，这价值来源于当下手头的工作，不管它价值几分，总之是有个东西将本属于self-esteem的空缺给填上了。</p><p>最大的忌讳，同时也是最大的陷阱，就是人处于抑郁状态的时候，甚至连「找点什么事情做做吧」这种想法都难以涌上心头，只能一再地生闷气，越想越气，越想越无助。</p><p>当然，这里的「事情」也是有一些不能触碰的，对于我来说，就是不能「打游戏」，因为我的潜意识里把「打游戏」与「浪费生命」联系起来了，所以如果用打游戏来抵御或者说是逃避现实的话，我也是会越陷越深的。所以第一件事是关掉游戏，卸载，放进柜子，不管当天游戏里的任务还有多少没有做完。</p>]]></content>
      
      
      <categories>
          
          <category> Tweets </category>
          
      </categories>
      
      
        <tags>
            
            <tag> daily </tag>
            
            <tag> 小并感 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Untitled</title>
      <link href="2020-08-30-Untitled-10/"/>
      <url>2020-08-30-Untitled-10/</url>
      
        <content type="html"><![CDATA[<p>本次考前经历了复杂了心态变迁，从一再拖延，到幡然醒悟开始疯狂焦虑，到现在心态平和看淡一切。</p><p>也就是今天一天的变化。在今日之前都是处于拖延状态的。 </p><p>考完了，可以简单给自己放个假，可以去看诺兰新上的电影，可以去魔都找朋友玩，也可以在宿舍自闭打游戏。</p><p>再然后，又情非己愿地陷入学习压力的日常，语言考试，专业技能，实习，科研，留学，移民，林林总总的日常。</p><p>我也实在没有太多话可说，抱怨也好，鸡血也好。我没有太多可以言说的态度可以对人发表，甚至对自己也没有什么想法，就这样随波逐流，顺着不可逆转的时间线一路向前推进就好。</p><p>还能怎么样呢。</p>]]></content>
      
      
      <categories>
          
          <category> Tweets </category>
          
      </categories>
      
      
        <tags>
            
            <tag> daily </tag>
            
            <tag> 小并感 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo文章模版设置</title>
      <link href="2020-08-21-hexo-templates/"/>
      <url>2020-08-21-hexo-templates/</url>
      
        <content type="html"><![CDATA[<p>参见：<a href="https://shmilybaozi.github.io/2018/11/05/hexo%E6%96%87%E7%AB%A0%E6%A8%A1%E6%9D%BF%E8%AE%BE%E7%BD%AE/" target="_blank" rel="noopener">https://shmilybaozi.github.io/2018/11/05/hexo%E6%96%87%E7%AB%A0%E6%A8%A1%E6%9D%BF%E8%AE%BE%E7%BD%AE/</a></p>]]></content>
      
      
      <categories>
          
          <category> Blogging </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mac vim中有时delete键在insert模式下无法向左删除</title>
      <link href="2020-08-21-vim-delete-problem/"/>
      <url>2020-08-21-vim-delete-problem/</url>
      
        <content type="html"><![CDATA[<p>mac vim中启动了某种compatible模式，为了与vi兼容，而无法删去某些特定字符。</p><p>只需在<code>~/.vimrc</code> 中加入一行 <code>set backspace=2</code> 即可</p><p>实测完美解决，目前没出问题。</p><p>参考：<a herf="https://www.smslit.top/2016/11/27/vim-backspace-invalid/">https://www.smslit.top/2016/11/27/vim-backspace-invalid/</a></p>]]></content>
      
      
      <categories>
          
          <category> Tech </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vim </tag>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Untitled</title>
      <link href="2020-08-21-Untitled-9/"/>
      <url>2020-08-21-Untitled-9/</url>
      
        <content type="html"><![CDATA[<p>可乐气泡，褪黑素，加多宝凉茶</p><p>盘子里的红提</p><p>充电中的ipad，六神花露水</p><p>电扇，转动的叶片，桌面上的票据，失去Joycon的switch手柄</p><p>夏，凉爽的暴雨之后停水</p><p>提拉米苏泡芙的香气</p><p>被这么多可爱的事物包围着</p><p>也好想抱紧你</p>]]></content>
      
      
      <categories>
          
          <category> Tweets </category>
          
      </categories>
      
      
        <tags>
            
            <tag> thoughts </tag>
            
            <tag> poem </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Untitled</title>
      <link href="2020-08-18-Untitled-8/"/>
      <url>2020-08-18-Untitled-8/</url>
      
        <content type="html"><![CDATA[<p>一到开学的前一周就很烦躁。从小学开始，年年如此，夏天的尾巴是在无限的焦虑与忧愁中度过的。</p><p>惜墨如金</p>]]></content>
      
      
      <categories>
          
          <category> Tweets </category>
          
      </categories>
      
      
        <tags>
            
            <tag> daily </tag>
            
            <tag> 小并感 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>curl的使用</title>
      <link href="2020-08-15-curl/"/>
      <url>2020-08-15-curl/</url>
      
        <content type="html"><![CDATA[<p>Curl的使用</p><h1 id="设置代理"><a href="#设置代理" class="headerlink" title="设置代理"></a>设置代理</h1><p>在你国上网的第一步首先肯定是设置代理了。</p><p>curl在macos里面直接走终端代理，修改rc文件即可，根据终端类型bash or zsh修改 <code>~/.bashrc</code> 或者 <code>~/.zshrc</code></p><p>添加以下两行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> http_proxy=<span class="string">"http://localhost:port"</span></span><br><span class="line"><span class="built_in">export</span> https_proxy=<span class="string">"http://localhost:port"</span></span><br></pre></td></tr></table></figure><p><img src="/img/image-20200816030644800.png" alt="image-20200816030644800"></p><p>之后再source一下就OK了</p><p>设置好之后curl一下Google</p><p><img src="/img/image-20200816030530557.png" alt="image-20200816030530557"></p><p>由于非CS科班出身，计网仅处于熟记各大通信协议缩写阶段，看不懂这个返回的报头，验证的话只能把返回的东西写到一个html文件里面打开看一下= =</p><p><img src="/img/image-20200816031049244.png" alt="image-20200816031049244"></p><p>由于用的韩国代理，返回的是韩文版，应该是没问题的。</p>]]></content>
      
      
      <categories>
          
          <category> Tech </category>
          
      </categories>
      
      
        <tags>
            
            <tag> curl </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Untitled</title>
      <link href="2020-08-15-Untitled-7/"/>
      <url>2020-08-15-Untitled-7/</url>
      
        <content type="html"><![CDATA[<p>做梦</p><p>做梦总是伤感的，不断重复的意象，内心深处涌动着的渴求，在梦里你是满足又害怕失去的。</p><p>类似的思考太多的话，就有点像是村上春树笔下的主角，把自己和周围的事情都想得太透彻，太清晰，像是哲学家，或是自然科学建立之前的各种理学家，在未知的虚无面前企图做某种总结与归纳。</p><p>长长的一场梦，实际上是很累的。与所念之人在梦中重逢难免按耐不住的内心的喜悦，大脑飞速转动，想要把这些年来欠下的相聚时光以其他方式弥补回来。醒来之后，更加精疲力竭了，还有一种伤感。常常有人说下午睡醒的时候已近黄昏，看着窗外西斜的落日，下班的邻人，偶有狗叫声与楼梯脚步声，再过一会儿路灯就要亮起来了，而自己的房间是这么地安静与孤单，有种像是末世之后的心灵的空虚感</p><p>这样醒来之后，有点像是前面说的下午睡醒之后的感觉，明明睡了十几个小时，但要重拾之前的记忆还需费点功夫，所以有时候居然不知道这是清晨、傍晚还是夜初。特别在这样短暂的时光里又经历过了一次别离，这样的别离有可能是多年以前，给自己的心灵造成了很大创伤的一次事件，所以这样的梦绝对是消耗人的精力的。</p><p>我总是隔三差五地在梦中与N相见，但即便是在梦里，N也不会让我好受。有时候醒来我想，太狡猾了，这可是我自己的梦啊，能不能让我跟N亲密一点。常常这样想着，N在梦里依然是跟我隔着一段难以捉摸的距离。后来我明白了，这就是最后的那段时间，我跟N之间的一个缩影，我们的关系，发生的事，我的想法，我看在眼里的那段时间的全貌。</p><p>所以，我不停地感到懊恼，六艺楼前老树的年轮增加了一圈又一圈，这么多年以后，跟N发生的那些事还是不停地萦绕在我的梦境，haunting me，torturing me. 有时也会感到后悔，如果没有遇见N，那么就不会有这些事的发生，说不定，我会迎来一个更加完整与美好的人生，我会一帆风顺，会积极地拥抱生活与尚未到来的任何可能性。</p><p>可是生命里没有如果。每当我冒出这样的念头，又会不停地把它按下去，我知道它的出现只会给我的世界带来更多的负面影响。</p><p>像是强迫着自己往流血的伤口上涂抹酒精，虽然这会更疼，但是不这样做的话伤口就会感染、发炎和化脓。</p><p>想到了无数次在医院里等待检验结果的下午和夜晚。我自己也很不容易。</p><p>多年以来，我不停地在遗忘，遗忘高中的校园，遗忘家乡的路口，遗忘受过的教育，遗忘那些人。最开始，我想，大学一定还要跟N呆在一起，我觉得我可以抛弃一切跟N在一起，就像孙燕姿的歌里唱的，”我遇见让我奋不顾身的那个人”。后来毕业的时候，我只想忘记N，那时我想铭记这一路走来的日子，想铭记生命中重要的年岁和人们，跟过去做个了结，想把N从我的生命中剔除，想挖个坑把它埋进去，然后背向它不回头看跑的越远越好。</p><p>但是，这么多年了，我忘掉了所有人，唯独没有忘记N，我甚至能记得跟N在一起的每个瞬间，N的穿着，N的气息，N的每个动作。我的梦，也是以此为基础，构建起来的，就好像是播放器里曲目的循环再生。</p><p>以后，也会带着这些难缠的梦魇走下去的吧。</p><p>真希望快点遇到生命中下一个比N<br>更重要的人和事。</p><p>もう一度言うだけで、ずるいね、N君。</p>]]></content>
      
      
      <categories>
          
          <category> Tweets </category>
          
      </categories>
      
      
        <tags>
            
            <tag> thoughts </tag>
            
            <tag> daily </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Termius下远程连接mac终端中文乱码解决</title>
      <link href="2020-08-15-Untitled-6/"/>
      <url>2020-08-15-Untitled-6/</url>
      
        <content type="html"><![CDATA[<p>想用ipad上的termius连接mac做一些基本的任务，于是火速用ssh连接到了mac terminal</p><p>打开hexo 和vim，运行一下node，都一切正常，就是有点输入延迟会有一定卡顿。</p><p>但是当我准备新建一个post，打开vim准备写字的时候，ipad优美的输入法选中了词语，最后落到vim里面居然是乱码的???</p><p>解决方法很简单</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim ~&#x2F;.zshrc &#x2F;&#x2F;如果是用zsh的话</span><br></pre></td></tr></table></figure><p>然后找到<code>#export LANG=en_US.UTF-8</code> </p><p>把前面注释去掉就OK</p><p><code>$ source ~/.zshrc</code> 就行了。</p><p>中文输入正常了!!!!</p>]]></content>
      
      
      <categories>
          
          <category> Tech </category>
          
      </categories>
      
      
        <tags>
            
            <tag> termius </tag>
            
            <tag> vim </tag>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nihongo</title>
      <link href="2020-08-13-nihongo/"/>
      <url>2020-08-13-nihongo/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Untitled</title>
      <link href="2020-08-12-Untitled-5/"/>
      <url>2020-08-12-Untitled-5/</url>
      
        <content type="html"><![CDATA[<p>四川豪雨（しせんごうう）だ。</p><p>從下午四點開始就像是已經黑天了一樣，家裡停水，具體停多久未知，晚飯過後我媽就一直在樓下提水上來，看來她對於事態的預想不太樂觀 &gt; &lt;|||</p><p>在微博上，看到成都某地鐵站都被淹水了，大概是北門上那邊，泥土色的雨水夾雜著路面的塵屑和盛夏的哀怨嘩啦啦地從地鐵入口奔瀉而下。</p><p>天津還是遼寧還是某地，又有張獻忠事件發生，這次提刀的是67歲的老翁，他無差別地襲擊過路的人群，殺死了一位女性，重傷了一位女性。我個人很難想像是怎麼樣複雜的情緒，讓他在如此花甲之年不顧麻煩對陌路的女性產生這樣的敵意，不惜剝奪對方的生命，我的關注點有可能在“女性”身上，有可能在“67歲”這個刻板印象身上。但不管怎樣，根據朋友圈的動態來看，微博已經完全屏蔽了這次案情相關的posts。那我雖然不敢出聲，但心裡還是把責任推到了那個企圖關掉房間裡唯一光亮的傢伙身上。</p><p>窗外還是偶爾會有閃電。前日，東方明珠也被閃電擊中了，有人評價說這是異象、凶兆一類的神諭，我個人是不太接受的，但是2020的確在直感上讓人覺得它是越來越壞了。這其中可能會有一些其他的因素，比如說，網路日益四通八達讓一些壞事更迅速地被家喻戶曉；又比如說，COVID19的lockdown讓人們心中評判事物的尺度大大縮緊，對可能發生的不確定性的接受程度和敏感程度都顯著降低，比如在19年以前沒人關心的小事放到當下甚至有機會短暫地登上地區趨勢排行榜；當然，這就像是很多裝神弄鬼的神預言，假設說有人在當下對未來十年可能發生的事做出10000種預測，並發佈在社交網路上，那麼等到真的十年之後這10000條預言總有一定的可能性會實現一部分，當事人再翻舊帳而悄然刪去其他無效的條目，這樣就可以憑藉總會撞上的幾條言論而被尚不知情的大眾捧成大預言家了。</p><p>這樣說，好像跟當下的情況也不是很相符，總而言之，我個人認為，2020並沒有糟糕到一種無法忍受的地步。畢竟人類歷史上河清海晏的太平年間也不過半個多世紀，這還是對於極少數的民主和工業化國家而言，在一些極權國家、社會主義國家和middle-Eastern國家，安定的日子可以說是剛剛開始，甚至從未到來。在這樣一個較為全面的歷史認知之下，很難假定所謂的“和平與發展”是今後年間的趨勢。1900ers從未預想到以智能設備為基礎的信息社會年代（除開George Orwelle，他預想到了世界上最邪惡之一的政權採取了怎樣最低的手段來奴役它的國民），2000ers一定也會對10年、20年、50年後的世界感受到天翻地覆。</p><p>想到kfk說人類已經解決了死亡的奧秘，意識上的福祉將成為今後的主流。這些我是不太關心的，因為，社會秩序和科技總是漸變發展的，極少可能強迫世界上大部分人在一夜之間改頭換面，接受一門新的宗教、預言、主義和生活方式。</p><p>我更關心kfk說東京將遷都Okayama（岡山），這我不太喜歡，因為東京就是東京，是我心中最美的那個江戶，是日本其他地方所不能替代的。如果很殘念，這樣的災難真的會發生的話，我大概要重新考慮一下今後的發展方向了，比如說，澳洲。</p><p>最近還發現了自己的褪黑素依賴性，比方說，昨晚，忘記服用褪黑素，直接晾到了凌晨四點。</p><p>Kiss me, melatonin. </p><p>Do not ever leave.</p>]]></content>
      
      
      <categories>
          
          <category> Tweets </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 毒力撕烤 </tag>
            
            <tag> daily </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Untitled</title>
      <link href="2020-08-12-Untitled-4/"/>
      <url>2020-08-12-Untitled-4/</url>
      
        <content type="html"><![CDATA[<p>包包被切成了两半～</p><p><img src="/img/IMG_7382.JPG" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Tweets </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tweets </tag>
            
            <tag> soviet-jokes </tag>
            
            <tag> esu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Untitled</title>
      <link href="2020-08-11-Untitled-3/"/>
      <url>2020-08-11-Untitled-3/</url>
      
        <content type="html"><![CDATA[<p>Sanction.</p><blockquote><p>China sanctions US offcials for ‘HK-related issues’</p></blockquote><p>So I’m totally thrilled by this title of ‘mighty’  ‘justical’ Chinese sanctions.</p><p>Not so hard to reason that it’s a tit-for-tat of the previous sanction on HK offcials imposed by US gov. </p><p>Wait man, but this is HILARIOUS. I mean literally, hilarious. As far as I’m concerned, very few US offcials would purchase real estate in CN, which is also the main cause of why sanctions on Chinese offcials are regarded as quite effectual and right to the point.</p><p>I’m eagerly looking forward to the day when offcials and politicians of every corrupt country and jurisdiction start to rush to CN and jostle for a property that’s scrambled for by tens of thousands, and then Chinese are announcing their sanction bills passed by their rubber-stamped People’s Congress, between the lines one can smell of arrogance and imperiousness yet not a single country in the world could do anything to this big cheeky giant. </p><p>So either this day comes, though not expect by any democratic allies, or fuck off shithead commies.  </p>]]></content>
      
      
      <categories>
          
          <category> Tweets </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hk </tag>
            
            <tag> china </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Untitled</title>
      <link href="2020-08-11-Untitled-2/"/>
      <url>2020-08-11-Untitled-2/</url>
      
        <content type="html"><![CDATA[<p>可乐和雪碧的发明人真应该得诺贝尔奖。</p><p>可乐+Espresso<br>可乐+苏打水+朗姆<br>雪碧+西瓜汁+朗姆<br>雪碧+青柠+百香果<br>雪碧+薄荷+白朗姆+粗糖</p><p>不光是手摇饮品，就连蛋糕、韩式料理、川菜，你都能找到它们两的影踪。</p><p>不过热量就有问题了，健身爱好者看了可能会当场昏厥。</p>]]></content>
      
      
      
        <tags>
            
            <tag> tweets </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Next主题图片caption文字消失和解决方法</title>
      <link href="2020-08-09-next-theme-pic-caption/"/>
      <url>2020-08-09-next-theme-pic-caption/</url>
      
        <content type="html"><![CDATA[<p>简单来说，next主题中，图片的caption要在md语法中的<code>&quot;&quot;</code> 里面插入。</p><p><code>![](/img/picAddress.jpg &quot;THIS_IS_WHERE_CAPTIONS_SHOULD_BE_INSERTED&quot;)</code></p><p>参见</p><p><a href="https://github.com/iissnan/hexo-theme-next/issues/436" target="_blank" rel="noopener">https://github.com/iissnan/hexo-theme-next/issues/436</a></p><p>实验后依然没有caption，只有鼠标悬停的显示文字。</p><p>第二个方法。</p><p><a href="https://www.dazhuanlan.com/2019/12/10/5deed249a6b18/" target="_blank" rel="noopener">https://www.dazhuanlan.com/2019/12/10/5deed249a6b18/</a></p>]]></content>
      
      
      <categories>
          
          <category> Blogging </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> NexT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>消波塊好可愛，好想抱著消波塊</title>
      <link href="2020-08-09-tetrapods/"/>
      <url>2020-08-09-tetrapods/</url>
      
        <content type="html"><![CDATA[<p>消波塊好可愛，好想抱著消波塊。</p><p><img src="/img/tetrapod-1.jpg" alt=""></p><p>它巨大，偉岸，沈默，嚴肅，它堅實的身軀可以抵抗海浪的衝擊。</p><p>它有很多形狀，它有很多可靠的戰友，它無處不在，在青島，在寧波象山，在泉州，在珠海，在淡水、台南和高雄，在香港西貢，在釜山在濟州島，在雅加達，在大阪和鎌倉，在舊金山，在多倫多，在一切人類活動的地區。</p><p><img src="/img/IMG_7366.JPG" alt="" title="在紐約的長島"><br><img src="/img/IMG_7367.JPG" alt="" title="在紐約的長島"></p><p><img src="/img/IMG_7360.JPG" alt="" title="在南韓的釜山"></p><p><img src="/img/IMG_7363.JPG" alt="" title="在霓虹八丈島（はちじょうじま）"></p><p><img src="/img/IMG_7361.JPG" alt="" title="在福建連江"></p><p>它總是望著水天交接的遠方，燈塔，海貓，棧橋，歸港的漁船。</p><p><img src="/img/Ee_hg5yU0AAroT1.jpeg" alt=""></p><p>動森的消波塊DIY需要黏土x10和石塊x10，等以後我飛黃騰達了，要在自己的海岸線上擺滿消波塊，一望無涯、無邊無際的消波塊。</p><p>豆瓣上有一個叫做<a href="https://www.douban.com/group/619505/?ref=sidebar" target="_blank" rel="noopener">消波塊同好會</a>的小組，我才知道平日裡不起眼的消波塊還受到了這麼多人的關愛。</p><p><img src="/img/IMG_7358.JPG" alt=""></p><p>友情小組是大名鼎鼎的BDO迷戀患者症候群，但是我覺得對BDO的迷戀更多是一種來自於靈魂深處的崇拜與震懾，消波塊並不能讓人明顯體會到自然與人類的差距，就我個人而言，消波塊其本身就已經很可愛，かわいいだから。</p><p><img src="/img/IMG_7364.JPG" alt="" title="「東愛」裡面Kanji坐在海邊的消波塊上"></p>]]></content>
      
      
      <categories>
          
          <category> Tweets </category>
          
      </categories>
      
      
        <tags>
            
            <tag> daily </tag>
            
            <tag> tweets </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo的tag一定要加空格</title>
      <link href="2020-08-08-hexo%E7%9A%84tag%E4%B8%80%E5%AE%9A%E8%A6%81%E5%8A%A0%E7%A9%BA%E6%A0%BC/"/>
      <url>2020-08-08-hexo%E7%9A%84tag%E4%B8%80%E5%AE%9A%E8%A6%81%E5%8A%A0%E7%A9%BA%E6%A0%BC/</url>
      
        <content type="html"><![CDATA[<p>一定要在 ‘-’ 和 ‘&lt;要输入的tag name&gt;’之间加空格。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tags:</span><br><span class="line">- tagname</span><br></pre></td></tr></table></figure><p><img src="/img/Xnip2020-08-08_23-42-06.jpg" alt=""></p><p>不然会出现很迷的部署错误。今天写的tweet一直发不出去，又被一连串的git output迷了眼，都没看到上面generate passage的报错。</p><p><img src="/img/Xnip2020-08-08_23-46-27.jpg" alt=""></p><p>Hell spaces……</p>]]></content>
      
      
      <categories>
          
          <category> Blogging </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Untitled</title>
      <link href="2020-08-08-Untitled/"/>
      <url>2020-08-08-Untitled/</url>
      
        <content type="html"><![CDATA[<p>Toooo many things these days.</p><p>某恶名昭彰的法案的通过，世界各地的抗议者，川普禁掉TikTok，Beirut大爆炸。</p><p>辽阔的中国大地上，汹涌的洪水、隐匿的新冠病毒与复工的人群。</p><p>对大多数人而言，breaking and bad news已经成为生活的常态，人们期许着一个历法上的新时期会给当下的社会生活带来好运，但实际上，它已经糟糕到了大家可以一再地降低自己心理预期的地步。或许，第二次更大规模的对峙的严冬就在明日，又或许，它只存在于一些悲观主义者哀怨的布道之中。</p><p>这样不平凡的一年，这样的不平凡的一段时期之中，自己的生活却没有太大起色，依然是局限在家中的四叠半空间，打开窗户透气的话，扑面而来的是喧嚷的市井人声、夏日滚烫的空气和无所事事的天空。</p><p>用一个新兴的豆瓣小组“985Five小组”的Jargon来讲，我自己是hopeless and pathetic，每天只想在家躺平。</p><p>在游戏上不断地氪金，在无人岛上荒野求生又因社恐不敢联机索要喜欢的家具，重温古早的「犬夜叉」，又入坑「国土安全」，翻遍Testv的云评测并幻想着自己拥有这些电子产品，做梦都想成为前端大触，但实际上连JS都写不好，摸鱼成为习惯的GRE备考，以及，在terminal感叹Vim的中文输入怎么这么难用。</p><p>在Global Lockdown面前，人类是如此的渺小、脆弱与不堪。上个月隔壁小区一位愤怒的女孩与父亲争吵之后纵身一跃，很阳光很酷Hiruma也选择了在衣柜终结自己的生命，作文不够「正能量」的缪可欣同学，和去年在上海南浦大桥上夺车门而出的高中生。文艺作品总是能够在最接近日常生活的地方打动人，在这么多的、一串接一串的关于生命选择的事件之后，我又重新听了一遍Aimyon桑的「生きていたんだよ」，然后理解了很多周围的人所不能理解的东西。</p><p>前几日在藏区失联的大学女生，最后抛掉了身上所有的通讯设备，身份证，票据，所有证明自己存活于人类社会的信物，再褪去一层又一层的衣物，然后独自走向青藏高原的无人地带，把自己赤裸的身躯，留给可可西里深夜湛蓝的天空，和其下茫茫的高寒草甸、奔跑的兽群与远处的群山。</p><p>我很羡慕她，因为我做不到。</p><p>以后还需要思考很多，还需要探索很多，关于生命的痛苦与无聊，关于生命的意义。</p>]]></content>
      
      
      <categories>
          
          <category> News Comments </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 毒力撕烤 </tag>
            
            <tag> tweets </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>disappearing next theme</title>
      <link href="2020-07-12-disappearing-next-theme/"/>
      <url>2020-07-12-disappearing-next-theme/</url>
      
        <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>昨晚经历了一次<del>重大失误</del>，直接导致了本博客的主题文件需要重新配置。</p><p>因为我使用的hexo Next主题是从它的github主页上直接git clone下来的，昨天为了抹盘重装系统，把整个hexo文件夹push到github作备份，后来装好之后把博客源码重新pull回来，重新写点东西并发布的时候，发现我整个github.io页面都白了，打开themes文件夹一看，发现我pull下来的文件里面并没有我之前已经配制好的next主题。</p><p>我的猜想之一是，这个Next主题是由另外一个git管理的，独立于我整个hexo文件的模块，由于github对于别人的代码有一定的知识产权保护（？）和某种原因，可能某个子仓库在我把它上传为自己的repo的时候该子仓库并不会加入我们项目源码，而是仅仅作为一个引用。猜想二：如果不是github作祟的话，那就是git子仓库的问题。</p><p><img src="/img/image-20200711130319603.png" alt="image-20200711130319603"></p><p>我们观察此处有两个信息，一是Next主题的文件的comment还是”backup to github”，这是我昨天在push origin master的时候写的，意味着这个Next文件夹还是和其他文件在昨天backup的时候一起被git commit了的。二是next文件夹前方<strong>folder图标的右箭头</strong>，这个箭头是导致next文件夹有别于上面的landscape目录、无法被点开的原因。</p><p>综合了以上point，我们开始做research。</p><p><strong>fork和clone的区别</strong></p><p>clone是把远程的代码库下载到本地计算机上，而fork则是把远程的是别人的代码复制到远程的自己的Github上，成为一个<strong>副本</strong>，而这个副本就是你的了。</p><p>—（未完待续）</p>]]></content>
      
      
      <categories>
          
          <category> Blogging </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> git </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ohmyzsh 基本配置和使用</title>
      <link href="2020-07-12-ohmyzsh/"/>
      <url>2020-07-12-ohmyzsh/</url>
      
        <content type="html"><![CDATA[<p>终端也要精致一点，虽然iterms2我个人不是很喜欢，但是ohmyzsh的确是神器，所以还是来倒腾一下。</p><h1 id="Change-to-zsh"><a href="#Change-to-zsh" class="headerlink" title="Change to zsh"></a>Change to zsh</h1><p><a href="https://ohmyz.sh/" target="_blank" rel="noopener">https://ohmyz.sh/</a></p><p>mac下直接终端里用curl 安装就可以了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sh -c &quot;$(curl -fsSL https:&#x2F;&#x2F;raw.github.com&#x2F;ohmyzsh&#x2F;ohmyzsh&#x2F;master&#x2F;tools&#x2F;install.sh)&quot;</span><br></pre></td></tr></table></figure><p><em>附：unix命令简介</em></p><blockquote><p><strong>sh命令</strong>是shell命令语言解释器，执行命令从标准输入读取或从一个文件中读取。通过用户输入命令，和内核进行沟通！Bourne Again Shell （即bash）是自由软件基金会（GNU）开发的一个Shell，它是Linux系统中一个默认的Shell。Bash不但与Bourne Shell兼容，还继承了C Shell、Korn Shell等优点。</p></blockquote><h1 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h1><p>mac terminal默认的SF mono字体不支持一些VCS的branch符号，所以需要改用powerline字体。这里我使用了menlo for powerline</p><p><a href="https://github.com/abertsch/Menlo-for-Powerline" target="_blank" rel="noopener">https://github.com/abertsch/Menlo-for-Powerline</a></p><p>最简单的还是直接下载zip包，然后解压双击安装，因为对macos的字体目录不熟悉。</p><p><img src="/img/image-20200712144759382.png" alt="image-20200712144759382"></p><h1 id="Customise-colours-in-agnoster-theme"><a href="#Customise-colours-in-agnoster-theme" class="headerlink" title="Customise colours in agnoster theme"></a>Customise colours in agnoster theme</h1><p>直接在主题配置文件中修改就可以了</p><p><img src="/img/image-20200712143542274.png" alt="image-20200712143542274"></p><p>找到git一栏</p><p><img src="/img/image-20200712144149071.png" alt="image-20200712144149071"></p><p>可以在高亮的一行更改git branch的颜色。</p><p>另外，再找到dir一栏</p><p><img src="/img/image-20200712144100638.png" alt="image-20200712144100638"></p><p>同样可以当前目录的颜色。</p><p>关于颜色，还有 <a href=" https://github.com/agnoster/agnoster-zsh-theme/issues/30#issuecomment-570432500">一个发现</a>:</p><blockquote><p>Agnoster is designed for use specifically with the “Solarized” color palette, which defines a specific mapping of terminal palette ANSI colors to specific RGB values. And also recommends particular uses for those tones.</p><p>I.e., this is how you’re supposed to use them:</p><p><a href="https://github.com/altercation/solarized/raw/master/img/solarized-palette.png" target="_blank" rel="noopener"><img src="https://github.com/altercation/solarized/raw/master/img/solarized-palette.png" alt="img"></a></p><p>So, <a href="https://github.com/sevaho" target="_blank" rel="noopener">@sevaho</a> and <a href="https://github.com/mkamayd" target="_blank" rel="noopener">@mkamayd</a>, you’re not <em>really</em> supposed to change your terminal color settings like that; you’re supposed to set your ANSI Color palette to Solarized and leave it there.</p><p>Within that Solarized recommendation, though, there’s leeway for which particular content/background/accent colors you’re using for what role. And maybe people want to customize that?</p><p>What <a href="https://github.com/Billy-" target="_blank" rel="noopener">@Billy-</a> links to (the OMZ fork of Agnoster) is a reasonable way to do this, IMHO. It rearranges the roles of the Solarized colors, without changing the mapping of the palette colors to RGB values. This has the advantage that you could change the color role mapping in your <code>~/.zshrc</code> config file, and then it would work in <em>all</em> terminals that you had configured to use Solarized.</p><h3 id="apjanke-commented-on-Jan-3"><a href="#apjanke-commented-on-Jan-3" class="headerlink" title="apjanke commented on Jan 3"></a><strong><a href="https://github.com/apjanke" target="_blank" rel="noopener">apjanke</a></strong> commented <a href="https://github.com/agnoster/agnoster-zsh-theme/issues/30#issuecomment-570432500" target="_blank" rel="noopener">on Jan 3</a></h3></blockquote><p>所以，agnoster的好像会自动适配，这个好像又是根据terminal 的solarized color palette 来的（就是太阳光配色），大概可以理解为几原色之类的东西，然后各种颜色映射都是通过这些solarized color来的，会设计和UI的可以看看，咱普通老百姓能稍微简单改改就不错了的说。</p>]]></content>
      
      
      <categories>
          
          <category> Tech </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
            <tag> ohmyzsh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test</title>
      <link href="2020-07-10-test/"/>
      <url>2020-07-10-test/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Docker 入门</title>
      <link href="2020-07-02-docker-01/"/>
      <url>2020-07-02-docker-01/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker的工作原理-Container"><a href="#Docker的工作原理-Container" class="headerlink" title="Docker的工作原理: Container"></a>Docker的工作原理: Container</h1><h2 id="To-start-with"><a href="#To-start-with" class="headerlink" title="To start with"></a>To start with</h2><p>我们可以从 <code>$docker run hello-world</code> 的helloworld程序的流程看出。</p><p><img src="/img/200702docker1.png" alt=""></p><p>当我们从Terminal输入语句执行的时候，docker client会take 我们的command，然后把command传递给docker server，在hello-world这条command中，我们实际想要传达的意思是我们set up一个新的container，using the image hello-world。 hello-world image实际上包含着一个能打印如下info的小程序，是我们想要利用docker达到的运行的目的。 </p><p><img src="/img/200702docker2.png" alt=""></p><p>Docker server在接受到我们的指令之后，它首先会check 我们的image cache，that is，一个可以cache我们的docker image copy的文件库。当我们才刚刚装上docker的时候，image cache是空的，自然也就没有hello-world的copy，所以这时docker server就会向远程的docker hub发出pull请求，向我们本地的电脑上安装这个image。这里，docker hub is a repository of free docker images that you can freely download and run on your pc，就像是apt-get或者homebrew这样的包管理器一样。</p><p><img src="/img/200702docker3.png" alt=""></p><p>再之后，docker 会创建一个container，container是image的一个instance，他们之间的关系如上图所示。</p><h2 id="Understanding-Container"><a href="#Understanding-Container" class="headerlink" title="Understanding Container"></a>Understanding Container</h2><p><img src="/img/200702docker4.png" alt=""></p><p>Docker的核心理念就是模仿我们的OS，所以，我们要先理解自己PC上的OS的结构（参见csapp, cmu 15-213）。每一个运行在我们os里的application或者process，当它们要调用cpu或者hard disk的时候，它们是没有办法直接与硬件对话的，二是要借助kernel这个中间层，kernel会帮助我们intermediate机器内部的一些访问请求，进程与kernel交互又是依靠system call来完成的，它实际上是kernel的一些endpoint，或者说可以访问特定文件的函数。</p><p>当我们PC上两个进程，let’s say chrome和Nodejs，它们分别需要使用不同的python version，比方说chrome到现在还在用python<br>2.版本，而我们的nodejs已经早早地进化到了python version3，这时我们的某个奇葩的操作系统上是不允许有两个不同version的python拷贝的，因为for some crazy reason这两个不同的py版本会产生冲突。<br>解决这个问题的一个方法是利用OS的一个feature叫做<strong>name spacing</strong>， 有了name spacing，我们可以直接在HD上划分不同的分区来分别处理这些资源。</p><p>这个时候，kernel在处理进程调用的时候，就会先辨识是哪个进程作出的system call，之后根据不同进程的环境需求为进程分配相应的硬件资源。</p><p><img src="/img/200702docker6.png" alt=""></p><p>Name spacing将不同的进程所需的资源隔离开来(isolate)，使得它们之间互不干扰。</p><p><img src="/img/200702docker7.png" alt=""></p><p>Name Spcacing对应的还有一个概念叫做control group，它能够为每个进程分配有限的资源，比如Memory，CPU usage和bandwidth。</p><p>所以，container实际上就是一组被逻辑上划分开来的进程组合，它们可以拥有os分配好的独立硬件资源，供进程使用。</p><p><img src="/img/200702docker8.png" alt=""><br><img src="/img/200702docker9.png" alt=""></p><p>When we talk about image, we’re really talking a <em>file system snapshot</em>, which is essentially kinda like a copy paste of a specific set of directoty or files. And image will also contain a specific startup command. 当我们创建容器的时候，docker会将image里面的文件快照拷贝到container的资源库中，然后执行startup命令，调用chrome或者其他进程，docker运行就开始了。</p><p><img src="/img/200702docker10.png" alt=""></p><p>实际上，namespacing 和 control group是linux系统下的一个特性。我们在win或者macos上安装docker的时候，同时安装了一个linux vm，所以我们的container也是在这个linux vm之中创建的，docker内部的系统调用也都是通过vm中的linux kernal来完成的，包括文件系统分区、进程之间的isolating和constraining等。</p><p><img src="/img/200702docker11.png" alt=""></p><p>Actually 我们可以打开terminal很直观的看到这个linux vm，只需要输入 <code>$docker version</code>，就可以看到 <code>OS/Arch</code> 一行中显示<code>linux/amd64</code>。</p><p><img src="/img/200702docker12.png" alt=""></p><h1 id="Docker-Basic-Usages"><a href="#Docker-Basic-Usages" class="headerlink" title="Docker Basic Usages"></a>Docker Basic Usages</h1><h2 id="docker-run-lt-imageName-gt-command"><a href="#docker-run-lt-imageName-gt-command" class="headerlink" title="$docker run &lt;imageName&gt; command"></a><code>$docker run &lt;imageName&gt; command</code></h2><p>Just like<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ docker run busybox echo hi there</span><br><span class="line">Unable to find image &#39;busybox:latest&#39; locally</span><br><span class="line">latest: Pulling from library&#x2F;busybox</span><br><span class="line">91f30d776fb2: Pull complete </span><br><span class="line">Digest: sha256:9ddee63a712cea977267342e8750ecbc60d3aab25f04ceacfa795e6fce341793</span><br><span class="line">Status: Downloaded newer image for busybox:latest</span><br><span class="line">hi there</span><br></pre></td></tr></table></figure><br>Also, 我们也可以使用ls命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ docker run busybox ls</span><br><span class="line">bin</span><br><span class="line">dev</span><br><span class="line">etc</span><br><span class="line">home</span><br><span class="line">proc</span><br><span class="line">root</span><br><span class="line">sys</span><br><span class="line">tmp</span><br><span class="line">usr</span><br><span class="line">var</span><br></pre></td></tr></table></figure><br>但是在hello-world中使用ls和echo则会报错，这是因为ls和echo是只存在于busybox中的两个exec。</p><p>在这里要特别介绍一下busybox，下面贴出其官方introduction</p><blockquote><p>Coming in somewhere between 1 and 5 Mb in on-disk size (depending on the variant), BusyBox is a very good ingredient to craft space-efficient distributions.</p><p>BusyBox combines tiny versions of many common UNIX utilities into a single small executable. It provides replacements for most of the utilities you usually find in GNU fileutils, shellutils, etc. The utilities in BusyBox generally have fewer options than their full-featured GNU cousins; however, the options that are included provide the expected functionality and behave very much like their GNU counterparts. BusyBox provides a fairly complete environment for any small or embedded system.</p></blockquote><p>stackoverflow:</p><blockquote><p>A Busybox docker image is useful if one is building a container for which busybox can fulfill its dependency chain without needing a full Linux distro.</p><p>Often, an embedded appliance can consist of nothing but a statically-linked copy of busybox, an init script that mounts procfs, sysfs, &amp;c. with busybox-provided tools, and then the actual application being invoked. With docker setting up the filesystem namespace, even that init script isn’t necessarily needed.</p></blockquote><h2 id="docker-ps"><a href="#docker-ps" class="headerlink" title="docker ps"></a><code>docker ps</code></h2><p>List all the running containers that are currently on your machine.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$docker ps</span><br></pre></td></tr></table></figure><p>这条命令只会显示所有当前正在运行的container。如果要显示所有运行过的程序的话，我们需要<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$docker ps -all</span><br></pre></td></tr></table></figure></p><h2 id="Container-lifecycle"><a href="#Container-lifecycle" class="headerlink" title="Container lifecycle"></a>Container lifecycle</h2><p>实际上, docker run = docker create + docker start，这两个语句是有区别的。</p><p><code>docker create &lt;image name&gt;</code> 只是创建了container，将image里的文件快照拷贝到了container的文件系统里面。</p><p><code>docker start &lt;container id&gt;</code><br>当我们使用container id来start container的时候，命令行不会输出container具体的运行结果（output），而是echo给我们同样的containerId，所以，如果我们要在start的时候看到输出的话，需要加上 -a 参数。</p><p><code>docker start -a &lt;container id&gt;</code></p><p>另外，每次start container id的时候，我们的容器都是默认使用create/run时候的default command，并执行default command。比如说，我们执行<code>$docker start -a &lt;cont id&gt;</code>的时候，命令行输出依然会显示hi there，实际上是又执行了一次我们的default command <code>echo hi there</code>.<br>所以start的时候是<em>不能重新指定命令</em>的。</p><h2 id="Remove-stopped-containers"><a href="#Remove-stopped-containers" class="headerlink" title="Remove stopped containers"></a>Remove stopped containers</h2><p><code>$docker system prune</code><br>会清除所有运行完毕的container，也会清除所有docker cache里面的镜像，这样的话再次使用镜像就要重新向docker hub提出pull请求。</p><h2 id="Retrieving-log-outputs"><a href="#Retrieving-log-outputs" class="headerlink" title="Retrieving log outputs"></a>Retrieving log outputs</h2><p><code>$docker logs &lt;container id&gt;</code> will get logs from a container.</p><p>当我们执行docker logs的时候，我们不会重新运行该容器和其默认命令，而只是查看他的历史输出。</p><h2 id="Stopping-containers"><a href="#Stopping-containers" class="headerlink" title="Stopping containers"></a>Stopping containers</h2><p>如果我们用docker start在后台运行container的时候，是没办法用ctr+c结束进程的，常见的有<code>ping google.com</code>这样的命令，这时候就需要其他的命令来结束容器进程，有以下两种方式。</p><p><code>docker stop &lt;container id&gt;</code></p><p><img src="/img/200703docker1.png" alt=""><br>从图中我们可以看到实际上<code>ping google.com</code> 是是隶属于busybox linux系统命令之下的不断loop的一个进程。<br>当我们使用docker stop的时候，实际上是向该进程发送了一个Terminate的Signal，进程收到signal之后就会shutdown，但在这之前还会留有一些短暂的准备时间，让container做做简单的清洁。</p><p><code>docker kill &lt;container id&gt;</code><br><img src="/img/200703docker2.png" alt=""><br>同样的，docker kill也是发送一个kill的命令，这个kill的命令会立即shut down进程，而不做其他的考虑。<br>so usually we use stop command, and when using that, we re gonna wait a couple of seconds until the process shut itself down. Similiarly kill command will just kill the process instantly with no waiting time.</p><h2 id="Execute-commands-in-running-container"><a href="#Execute-commands-in-running-container" class="headerlink" title="Execute commands in running container."></a>Execute commands in running container.</h2><p><img src="/img/200703docker3.png" alt=""></p><p>有时候我们需要同时在一个container里面运行多个进程，比如说redis-server和redis-cli，这里就要用到执行命令。</p><p><code>docker exec -it &lt;container id&gt; &lt;command&gt;</code></p><p><img src="/img/200703docker4.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$docker run redis</span><br><span class="line">..(redis info)...</span><br><span class="line">$docker ps</span><br><span class="line">...(to find the container id)...</span><br><span class="line">$docker exec -it &lt;container id&gt; redis-cli</span><br><span class="line">...then redis-cli REPL comes out...</span><br><span class="line">...you can set key-value and also get value from key...</span><br></pre></td></tr></table></figure><h2 id="the-usage-of-the-it-Flag"><a href="#the-usage-of-the-it-Flag" class="headerlink" title="the usage of the -it Flag"></a>the usage of the <code>-it</code> Flag</h2><p>在上面例子中，如果我们leave out <code>-it</code> 的话，我们会被立刻kick out back to terminal，而不会显示redis-cli的交互界面。</p>]]></content>
      
      
      <categories>
          
          <category> Tech </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ASP.NET MVC5 课程小结</title>
      <link href="2020-06-14-ASP-NET-MVC5/"/>
      <url>2020-06-14-ASP-NET-MVC5/</url>
      
        <content type="html"><![CDATA[<p>本学期Web开发使用的MVC5框架，这是课程作业之课程知识点回顾，顺便拷贝一份在我的GP上。<br><a id="more"></a><br><strong>Web程序设计课程知识点总结</strong></p><h1 id="第1周课程"><a href="#第1周课程" class="headerlink" title="第1周课程"></a>第1周课程</h1><h2 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h2><h3 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h3><p><strong>Web服务</strong>是一种通过标准的Web协议提供服务的技术，目的是保证不同平台的应用服务可以互操作。</p><h3 id="Web服务器"><a href="#Web服务器" class="headerlink" title="Web服务器"></a>Web服务器</h3><p>一般指网站服务器，服务器本身指计算机主机硬件，而web服务器本质上是一段运行在服务提供方主机上的计算机程序，可以处理浏览器等Web客户端的请求并返回相应响应。</p><h3 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h3><p>网页浏览器是一种从 web 获取和显示页面的程序，这些页面包括这些资讯资源可为网页、图片、影音或其他内容，并且可以让用户通过超链接访问更多页面。<br>主流网页浏览器有Mozilla Firefox、Internet Explorer、Microsoft Edge、Google Chrome、Opera及Safari。</p><h3 id="网页"><a href="#网页" class="headerlink" title="网页"></a>网页</h3><p>是一个适用于万维网和网页浏览器的文件，存放在世界某个角落的某一部或一组计算机中，可以经由网址（URL）来识别与访问，用户一般通过网页浏览器来阅读。</p><h3 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h3><p><strong>统一资源定位符（*</strong>Uniform Resource Locator<strong>*）</strong>，表示一个给定的独特资源在Web上的地址。这个资源可以是一个HTML页面，一个CSS文档，一幅图像，等等。</p><h2 id="概念论述"><a href="#概念论述" class="headerlink" title="概念论述"></a>概念论述</h2><h3 id="Web工作原理"><a href="#Web工作原理" class="headerlink" title="Web工作原理"></a>Web工作原理</h3><h4 id="静态网页工作原理"><a href="#静态网页工作原理" class="headerlink" title="静态网页工作原理"></a>静态网页工作原理</h4><p>(img)</p><h4 id="动态网页工作原理"><a href="#动态网页工作原理" class="headerlink" title="动态网页工作原理"></a>动态网页工作原理</h4><p>(img)</p><h3 id="URL的工作原理"><a href="#URL的工作原理" class="headerlink" title="URL的工作原理"></a>URL的工作原理</h3><p>(img)<br>1网络协议部分：最常见的如HTTP/HTTPS协议，此外还有ftp，bt下载等其他协议。<br>2Web服务器域名(即网址)<br>3端口号（可不加，根据协议有默认的端口）<br>4服务器的路径。根据url类型的不同，可以分为两个类型<br>真实路径：URL可以指向静态的html网页，也可以是图床上的jpg图片，或者任意文件的下载链接，此时url需要指向该文件的名称+后缀名。<br>虚拟路径：一般不带文件后缀名，采用路由映射的方式，由一段服务端程序（路由）解析并映射到指定的位置。</p><h3 id="Web请求与响应"><a href="#Web请求与响应" class="headerlink" title="Web请求与响应"></a>Web请求与响应</h3><p>(img)<br>用户首先通过浏览器发出Web Request，这其中可能经过了很多网络协议，如常见的HTTP，或者代理服务器SOCKS5协议。服务器端的网络端口监听程序接收到Web请求之后，进入服务器端的路由映射，唤醒对应的控制器等处理请求，处理完毕后返回生成的视图或者html或其他类型的文件，再次经过网络协议返回给用户端，这就是Web Response。<br>当数据返回浏览器时，浏览器有可能解析数据发现还有一些静态资源（如：css，jquery或者图片）时又会发起另外的请求，而这些请求可能会在CDN上，那么CDN服务器又会处理这个用户的请求。<br>最后，客户端与服务器断开，由客户端解释HTML文档，在客户端屏幕上渲染图形结果呈现给用户。</p><h1 id="第2周课程-MVC"><a href="#第2周课程-MVC" class="headerlink" title="第2周课程 MVC"></a>第2周课程 MVC</h1><h2 id="名词解释-1"><a href="#名词解释-1" class="headerlink" title="名词解释"></a>名词解释</h2><h3 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h3><p>即<strong>模型（Model）、视图（View）、 控制器（Controller）</strong>。MVC是软件开发时所使用的一种架构，是一种开发观念，是一种设计模式。它把应用切割成三个主要单元，强调关注点分离(Separation of Concerns , SoC)、 面向方面（侧面）的程序设计(Aspect-Oriented Programming , AOP)、简 化了复杂度、提高了可维护性、易于测试、易于分工。</p><ul><li>Model（模型）表示应用程序核心（比如数据库记录列表）。</li><li>View（视图）显示数据（数据库记录）。</li><li>Controller（控制器）处理输入（写入数据库记录）。<h3 id="Model-模型"><a href="#Model-模型" class="headerlink" title="Model 模型"></a>Model 模型</h3><h3 id="View-视图"><a href="#View-视图" class="headerlink" title="View 视图"></a>View 视图</h3><h3 id="Controller-控制器"><a href="#Controller-控制器" class="headerlink" title="Controller 控制器"></a>Controller 控制器</h3><strong>（*这三个概念分别放在第5，6，7周详细叙述）</strong><h3 id="网址路由"><a href="#网址路由" class="headerlink" title="网址路由"></a>网址路由</h3>路由（Route）是指映射URL到处理程序的模式。在ASP.NET MVC中，所有用户请求都要先经过ASP.NET路由系统，才能找到控制器中对应的操作方法（Action Method）。</li></ul><h2 id="概念论述-1"><a href="#概念论述-1" class="headerlink" title="概念论述"></a>概念论述</h2><h3 id="MVC模型的处理过程"><a href="#MVC模型的处理过程" class="headerlink" title="MVC模型的处理过程"></a>MVC模型的处理过程</h3><p>(img)<br>在MVC模式中，客户端首先通过URL（Universal Resource Locators， 统一资源定位符）向服务器发出请求（Request），服务器解析URL， 然后转到相应的控制器（Controller）进行处理，控制器处理后，再将 结果通过视图（View）返回到客户端，作为对客户端请求的响应 （Response）。</p><p>例：使用 _StudentController_ 来演示 MVC 模式的用法<br>(img)<br>其中经历了以下的过程。<br><strong>public</strong> <strong>class</strong> MVCPatternDemo {    <strong>public</strong> <strong>static</strong> void main(String[] args) {        _//从数据库获取学生记录_       Student model  = retrieveStudentFromDatabase();        _//创建一个视图：把学生详细信息输出到控制台_       StudentView view = <strong>new</strong> StudentView();        StudentController controller = <strong>new</strong> StudentController(model, view);        controller.updateView();        _//更新模型数据_       controller.setStudentName(“John”);        controller.updateView();    }     <strong>private</strong> <strong>static</strong> Student retrieveStudentFromDatabase(){       Student student = <strong>new</strong> Student();       student.setName(“Robert”);       student.setRollNo(“10”);       <strong>return</strong> student;    } }</p><h1 id="第3周课程-HTML"><a href="#第3周课程-HTML" class="headerlink" title="第3周课程 HTML"></a>第3周课程 HTML</h1><h2 id="名词解释-2"><a href="#名词解释-2" class="headerlink" title="名词解释"></a>名词解释</h2><h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><p>超文本标记语言（HyperText Markup Language）定义了网页内容的含义和逻辑结构，常被用来构建和设计网页，是一种方便浏览器识别的标记语言。<br>“超文本”（hypertext）是指连接单个网站内或多个网站间的网页的链接。<br>“标记”（markup）注明了文本、图片和其他内容，以便于在 Web 浏览器中显示，如<head>, <body> 等。</p><h3 id="XML-eXtensible-Markup-Language"><a href="#XML-eXtensible-Markup-Language" class="headerlink" title="XML (eXtensible Markup Language)"></a>XML (eXtensible Markup Language)</h3><p>一种类似于HTML的标记语言，但不用预先定义tags，用户可以根据自己需要构建和扩充标记符号，用于表达、存储和传递数据与信息。XML已经是互联网上传输数据的事实标准，很多著名的语言如 RSS，SVG，XHTML都是以XML为基础的，例如，如果你用非RSS阅读器打开RSS链接就会看到类似XML的源码文件。</p><h3 id="XHTML"><a href="#XHTML" class="headerlink" title="XHTML"></a>XHTML</h3><p>是W3C制定的“遵循XML规范”的 HTML严格规范，使用DOCTYPE元素指定所遵循的标准，一般来说，XHTML = HTML + XML。</p><h3 id="DHTML"><a href="#DHTML" class="headerlink" title="DHTML"></a>DHTML</h3><p>指动态(Dynamic)的HTML，DHTML＝HTML + CSS + JavaScript。<br>CSS确定了信息的外在表现形式，JavaScript则用于编程动态操控CSS和HTML。</p><h3 id="元素-Elements"><a href="#元素-Elements" class="headerlink" title="元素 Elements"></a>元素 Elements</h3><p>HTML文档由元素(element)构成，元素由一对标签表示，遵循一定的格式，例如：<p>白日依山尽，黄河入海流。</p></p><h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><p>元素可以拥有一个或多个属性， 例如<img src="image1.gif" width="200" height="300" /></p><h4 id="XHTML规范"><a href="#XHTML规范" class="headerlink" title="XHTML规范"></a>XHTML规范</h4><p>标签名称必须小写<br>属性名称必须小写，属性值用双引号括起来<br>标签必须严格嵌套<br>标记必须严格配对，即使是空元素也得封闭<br>XHTML区分“内容标签”与“结构标签” ，结构标签不要嵌入到内容标签内</p><h2 id="概念论述-2"><a href="#概念论述-2" class="headerlink" title="概念论述"></a>概念论述</h2><h3 id="浏览器解析HTML"><a href="#浏览器解析HTML" class="headerlink" title="浏览器解析HTML"></a>浏览器解析HTML</h3><p>浏览器是一个HTML的显示器，它阅读HTML 网页，并解释其含义，然后将解释结果显示在屏幕上。</p><h3 id="HTML的使用"><a href="#HTML的使用" class="headerlink" title="HTML的使用"></a>HTML的使用</h3><h4 id="文档头与文档体"><a href="#文档头与文档体" class="headerlink" title="文档头与文档体"></a>文档头与文档体</h4><p>&lt;!DOCTYPE html&gt; <strong>&lt;html</strong> xmlns=”<a href="http://www.w3.org/1999/xhtml&quot;**&gt;**" target="_blank" rel="noopener">http://www.w3.org/1999/xhtml&quot;**&gt;**</a> <strong><head></strong>    <strong>&lt;meta</strong> content=”text/html; charset=utf-8”<strong>/&gt;</strong>    <strong><title></strong>My First HTML5 Page<strong>&lt;/title&gt;</strong> <strong>&lt;</strong>!– 导入css样式表与JavaScript程序 —&gt;   <strong>&lt;/head&gt;</strong>  <strong><body></strong>   <strong><p></strong> My First HTML5 Page !<strong>&lt;/p&gt;</strong>   <strong>&lt;/body&gt;</strong> <strong>&lt;/html&gt;</strong></p><h4 id="标题与段落"><a href="#标题与段落" class="headerlink" title="标题与段落"></a>标题与段落</h4><ul><li><h1></h1> ~ <h6></h6>表示标题</li><li><p></p>表示自然段。</li><li>换行<br/></li><li>分隔线<hr/></li><li>注释<!--注解内容--></li><li>转义字符(&amp;nbsp ……)<h4 id="图像"><a href="#图像" class="headerlink" title="图像"></a>图像</h4><img src="PATH"><br>虽然图像的格式也可以在img标签中指定，但是使用CSS仍是最佳途径。<h4 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h4>使用<a>标签指向另一网页的链接。<br><a href="PATH">LINK DENOTION TEXT</a><br><strong>锚：</strong>本页面某个特定位置的定位超链接<br><strong>&lt;h3</strong> id=”intro”<strong>&gt;</strong>Introduction<strong>&lt;/h3&gt;</strong> <strong>&lt;a</strong> href=”#intro”<strong>&gt;</strong>Introduction<strong>&lt;/a&gt;</strong><h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4>无序列表 <ul> <-->有序列表 <ol>列表项标签<li>, 列表与列表之间有包含关系的，还可以嵌套使用，例如：**<ul>**   **<li>**first item**</li>**   **<li>**second item           **<ul>**       **<li>**second item first subitem**</li>**       **<li>**second item second subitem     unordered list! -->         **<ul>**           **<li>**second item second subitem first sub-subitem**</li>**           **<li>**second item second subitem second sub-subitem**</li>**           **<li>**second item second subitem third sub-subitem**</li>**         **</ul><strong>       </strong>&lt;/li&gt;<strong>                  </strong><li>**second item third subitem**</li><strong>     </strong>&lt;/ul&gt;<strong>   </strong>&lt;/li&gt;<strong>                 </strong><li>**third item**</li><strong> </strong>&lt;/ul&gt;**<br>浏览器输出如下所示：<br>···</li><li>first item</li><li>second item<ul><li>second item first subitem</li><li>second item second subitem<ul><li>second item second subitem first sub-subitem</li><li>second item second subitem second sub-subitem</li><li>second item second subitem third sub-subitem</li></ul></li><li>second item third subitem</li></ul></li><li>third item<br>···<h4 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h4><table></li><li>表格标签<table></li><li>表格标题标签<caption></li><li>表格头部标签<thead></li><li>表格主体标签<tbody></li><li>表格尾部标签<tfoot></li><li>表格行标签<tr></li><li>表格单元格标签<td></li><li>让单元格跨越多列或多行：使用单元格属性colspan、rowspan</li><li>展示：</li><li><strong><p></strong>添加了 thead, tfoot, 和 tbody的表格<strong>&lt;/p&gt;</strong> <strong><table></strong>   <strong><thead></strong>     <strong><tr></strong>       <strong><th></strong>Header content 1<strong>&lt;/th&gt;</strong>       <strong><th></strong>Header content 2<strong>&lt;/th&gt;</strong>     <strong>&lt;/tr&gt;</strong>   <strong>&lt;/thead&gt;</strong>   <strong><tfoot></strong>     <strong><tr></strong>       <strong><td></strong>Footer content 1<strong>&lt;/td&gt;</strong>       <strong><td></strong>Footer content 2<strong>&lt;/td&gt;</strong>     <strong>&lt;/tr&gt;</strong>   <strong>&lt;/tfoot&gt;</strong>   <strong><tbody></strong>     <strong><tr></strong>       <strong><td></strong>Body content 1<strong>&lt;/td&gt;</strong>       <strong><td></strong>Body content 2<strong>&lt;/td&gt;</strong>     <strong>&lt;/tr&gt;</strong>   <strong>&lt;/tbody&gt;</strong> <strong>&lt;/table&gt;</strong></li><li>输出如下：</li><li>···</li><li>添加了 thead, tfoot, 和 tbody的表格</li><li>Header content 1</li><li>Header content 2</li><li>Footer content 1</li><li>Footer content 2</li><li>Body content 1</li><li>Body content 2</li><li>···</li><li>关于表格的更多参数，请见：<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/table" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/table</a><h4 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h4></li><li><form> </form></li><li>表单提交: method=”post|get”</li><li>提交目标: action=”……”</li><li>数据输入框：<input type="text" name="username" /></li><li>表单的基本用例展示：</li><li><strong>&lt;form</strong> action=”” method=”get” class=”form-example”<strong>&gt;</strong>   <strong>&lt;div</strong> class=”form-example”<strong>&gt;</strong>     <strong>&lt;label</strong> for=”name”<strong>&gt;</strong>Enter your name: <strong>&lt;/label&gt;</strong>     <strong>&lt;input</strong> type=”text” name=”name” id=”name” required<strong>&gt;</strong>   <strong>&lt;/div&gt;</strong>   <strong>&lt;div</strong> class=”form-example”<strong>&gt;</strong>     <strong>&lt;label</strong> for=”email”<strong>&gt;</strong>Enter your email: <strong>&lt;/label&gt;</strong>     <strong>&lt;input</strong> type=”email” name=”email” id=”email” required<strong>&gt;</strong>   <strong>&lt;/div&gt;</strong>   <strong>&lt;div</strong> class=”form-example”<strong>&gt;</strong>     <strong>&lt;input</strong> type=”submit” value=”Subscribe!”<strong>&gt;</strong>   <strong>&lt;/div&gt;</strong> <strong>&lt;/form&gt;</strong></li><li>(img)<h4 id="子页面"><a href="#子页面" class="headerlink" title="子页面"></a>子页面</h4><iframe src="URL" /><br>子页面已经不太使用，在现在的前端开发里面还有更多便捷的框架，故此处略去。<h4 id="多媒体"><a href="#多媒体" class="headerlink" title="多媒体"></a>多媒体</h4></li><li>插入视频，如<video src="video1.webm"></video></li><li>插入音频，如<audio src="audio1.mp3"></audio></li><li>内嵌<source src="……" />播放多个媒体</li><li><strong>&lt;audio</strong> controls=”controls”<strong>&gt;</strong> <strong>&lt;source</strong> src=”audio1.mp3” type=”audio/mp3” <strong>/&gt;</strong> <strong>&lt;source</strong> src=”audio2.mp4” type=”audio/mp4” <strong>/&gt;</strong> <strong>&lt;source</strong> src=”audio3.ogg” type=”audio/ogg” <strong>/&gt;</strong> <strong>&lt;/audio&gt;</strong></li></ul><h1 id="第4周课程-CSS"><a href="#第4周课程-CSS" class="headerlink" title="第4周课程 CSS"></a>第4周课程 CSS</h1><h2 id="名词解释-3"><a href="#名词解释-3" class="headerlink" title="名词解释"></a>名词解释</h2><h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h3><p><strong>CSS（Cascading Style Sheet，层叠样式表）</strong>是一种指定HTML文档视觉表现的标准。一般来说，CSS可单独作为一个引用文件或者插入html代码之中，目的是用统一规范的格式对某一类的HTML元素属性进行限定和修改。<br>HTML定义了文档的结构和内容，CSS则决定了<strong>浏览器以何种样式显示文档</strong>，这样，对于同样的HTML的原文档，使用不同的CSS进行渲染就可以得到风格各异的网页页面，体现了“信息结构与表现形式相分离”的基本原则。</p><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ol><li>代码重用提升开发效率；</li><li>选择器功能强大；</li><li>灵活轻便；</li><li>浏览器与开发工具广泛支持。<h3 id="CSS盒子模型"><a href="#CSS盒子模型" class="headerlink" title="CSS盒子模型"></a>CSS盒子模型</h3>是一种便于使用者理解CSS布局的模型。具体来说，当对一个文档进行布局（lay out）的时候，浏览器的渲染引擎会根据标准之一的 <strong>CSS 盒子模型</strong>（<strong>CSS basic box model</strong>），将所有元素表示为一个个矩形的盒子（box）。CSS 决定这些盒子的大小、位置以及属性（例如颜色、背景、边框尺寸）。</li></ol><h2 id="概念论述-3"><a href="#概念论述-3" class="headerlink" title="概念论述"></a>概念论述</h2><h3 id="CSS盒子模型的结构"><a href="#CSS盒子模型的结构" class="headerlink" title="CSS盒子模型的结构"></a>CSS盒子模型的结构</h3><p>(img)<br>每个盒子由四个部分组成，其效用由它们各自的边界（Edge）所定义。如图，与盒子的四个组成区域相对应，每个盒子有四个边界：_内容边界_ _Content edge_、_内边距边界_ _Padding Edge_、_边框边界_ _Border Edge_、_外边框边界_ _Margin Edge_。</p><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><ul><li>行内式：在HTML标签的style属性中编写CSS代码 n嵌入式：在<head><meta name="generator" content="Hexo 4.2.1"><link rel="alternate" href="/atom.xml" title="The Last Day of Summer" type="application/atom+xml"></head>中编写CSS代码。</li><li>导入式：使用@import指令——很少用</li><li><strong>&lt;style</strong> type=”text/css”<strong>&gt;</strong> div { <strong>background-color</strong>: whitesmoke; }  @import “mystyle.css”;  <strong>&lt;/style&gt;</strong></li><li>链接式：使用<link>链接外部CSS文件: <link type="text/css" rel="stylesheet" href="mycss.css" /><h3 id="CSS样式规则"><a href="#CSS样式规则" class="headerlink" title="CSS样式规则"></a>CSS样式规则</h3>p { attribute: value; }<br>p代表选择器，大括号里面是一条条属性与值的声明。<h3 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h3><h4 id="基本选择器"><a href="#基本选择器" class="headerlink" title="基本选择器"></a>基本选择器</h4></li><li>通用选择器 * { }</li><li>Tag选择器 p { }</li><li>Class选择题 .className { }</li><li>ID选择器 #idName { }</li><li>属性选择器 [attributeName=”value”] { } 例如 div[class=”light”] { … } <h4 id="分组选择器（Grouping-selectors）"><a href="#分组选择器（Grouping-selectors）" class="headerlink" title="分组选择器（Grouping selectors）"></a>分组选择器（Grouping selectors）</h4>交集 p.special { … } p#footer { … }<br>并集：A, B ，例如div, .special, #footer { … }<h4 id="组合器-关系选择器-（Combinators）"><a href="#组合器-关系选择器-（Combinators）" class="headerlink" title="组合器(关系选择器)（Combinators）"></a>组合器(关系选择器)（Combinators）</h4></li><li>后代组合器（Descendant combinator）</li><li>（空格）组合器选择前一个元素的后代节点。 <strong>语法：</strong>A B <strong>例子：</strong>div span 匹配所有位于任意 [``] 元素之内的 [``] 元素。</li><li>直接子代组合器（Child combinator）</li><li>> 组合器选择前一个元素的直接子代的节点。 <strong>语法</strong>：A &gt; B <strong>例子</strong>：ul &gt; li 匹配直接嵌套在 [``] 元素内的所有 [``] 元素。</li><li>一般兄弟组合器（General sibling combinator）</li><li>~ 组合器选择兄弟元素，也就是说，后一个节点在前一个节点后面的任意位置，并且共享同一个父节点。 <strong>语法</strong>：A ~ B <strong>例子</strong>：p ~ span 匹配同一父元素下，[``] 元素后的所有 [``] 元素。</li><li>紧邻兄弟组合器（Adjacent sibling combinator）</li><li>+ 组合器选择相邻元素，即后一个元素紧跟在前一个之后，并且共享同一个父节点。 <strong>语法：</strong>A + B <strong>例子：</strong>h2 + p 会匹配所有紧邻在 [``] 元素后的 [``] 元素。</li><li>列组合器（Column combinator）</li><li>|| 组合器选择属于某个表格行的节点。 <strong>语法：</strong> A || B <strong>例子：</strong> col || td 会匹配所有 作用域内的 [`] 元素。<h4 id="伪选择器（Pseudo）"><a href="#伪选择器（Pseudo）" class="headerlink" title="伪选择器（Pseudo）"></a>伪选择器（Pseudo）</h4>伪类 : 伪选择器支持按照未被包含在文档树中的状态信息来选择元素。 <strong>例子：</strong>a:visited 匹配所有曾被访问过的 [``] 元素。<br>伪元素 \:: 伪选择器用于表示无法用 HTML 语义表达的实体。 <strong>例子：</strong>p\::first-line 匹配所有 [``] 元素的第一行。<h3 id="CSS属性与值"><a href="#CSS属性与值" class="headerlink" title="CSS属性与值"></a>CSS属性与值</h3><h4 id="值的继承"><a href="#值的继承" class="headerlink" title="值的继承"></a>值的继承</h4>大部分会自动从父元素继承<h4 id="大小单位"><a href="#大小单位" class="headerlink" title="大小单位"></a>大小单位</h4>px 表示像素； em 是一个相对单位，表示跟标准值的相对比例。<br>另外，还可以以百分比的形式来定义长宽。<h4 id="CSS颜色"><a href="#CSS颜色" class="headerlink" title="CSS颜色"></a>CSS颜色</h4>以十六进制数（#fff、#ffffff）表示，每一位或两位表示红、绿、蓝三原色的色值，#ffffff表示纯黑，#000000表示纯白。</li></ul><h1 id="第5周课程-MVC-V"><a href="#第5周课程-MVC-V" class="headerlink" title="第5周课程 MVC-V"></a>第5周课程 MVC-V</h1><h2 id="名词解释-4"><a href="#名词解释-4" class="headerlink" title="名词解释"></a>名词解释</h2><h3 id="View视图"><a href="#View视图" class="headerlink" title="View视图"></a>View视图</h3><p>View（视图）是MVC中的V，是经过控制器结合模型数据之后，呈现给用户的界面，可以显示数据或数据库记录。</p><h3 id="Views-文件夹"><a href="#Views-文件夹" class="headerlink" title="Views 文件夹"></a>Views 文件夹</h3><p>Views 文件夹用于存储与应用程序的显示相关的 HTML 文件（用户界面）。Views 文件夹中包含每个控制器对应的一个文件夹。</p><ul><li>Account 文件夹包含用于用户账号注册和登录的页面。</li><li>Home 文件夹用于存储诸如 home 页和 about 页之类的应用程序页面。</li><li>Shared 文件夹用于存储控制器间分享的视图（母版页和布局页）。<h3 id="View与HTML，CSS的关系"><a href="#View与HTML，CSS的关系" class="headerlink" title="View与HTML，CSS的关系"></a>View与HTML，CSS的关系</h3>View主体是由HTML书写<h3 id="View的类型"><a href="#View的类型" class="headerlink" title="View的类型"></a>View的类型</h3><h4 id="常规视图"><a href="#常规视图" class="headerlink" title="常规视图"></a>常规视图</h4><h4 id="部分视图"><a href="#部分视图" class="headerlink" title="部分视图"></a>部分视图</h4>一般是小块的代码，与布局视图相反。一般作为附加成分嵌入其他视图。有两种类型，一种是跟控制器对应的，另一种是不与控制器对应的。<h4 id="布局视图"><a href="#布局视图" class="headerlink" title="布局视图"></a>布局视图</h4>与部分视图相反，作为布局被广泛的引用和插入进大部分的页面。<h3 id="Razor"><a href="#Razor" class="headerlink" title="Razor"></a>Razor</h3>Razor是服务器端的标记语言，可以将基于服务器的代码（Visual Basic 和 C#）嵌入到网页中。<br>基于服务器的代码可以在网页传送给浏览器时，创建动态 Web 内容。当一个网页被请求时，服务器在返回页面给浏览器之前先执行页面中的基于服务器的代码。通过服务器的运行，代码能执行复杂的任务，比如进入数据库。<h3 id="强类型"><a href="#强类型" class="headerlink" title="强类型"></a>强类型</h3>强类型的html帮助器，即带for的如Html.TextBoxFor()，其使用 <strong>lambda 表达式</strong>来引用传到视图模板中的模型或视图模型。</li></ul><h2 id="概念论述-4"><a href="#概念论述-4" class="headerlink" title="概念论述"></a>概念论述</h2><h3 id="Razor-C-语法规则"><a href="#Razor-C-语法规则" class="headerlink" title="Razor C# 语法规则"></a>Razor C# 语法规则</h3><p>Razor 代码块包含在@{ … } 中，内联表达式（变量和函数）以 @ 开头，代码语句用;结束，变量使用 var 关键字声明，字符串用引号括起来，C# 代码区分大小写，扩展名是 .cshtml, 例如：<br><!-- Single statement block --> @{ var myMessage = “Hello World”; }  <!-- Inline expression or variable --> <p>The value of myMessage **is**: @myMessage</p>  <!-- Multi-statement block --> @{ var greeting = “Welcome to our site!”; var weekDay = DateTime.Now.DayOfWeek; var greetingMessage = greeting + “ Here in Huston it is: “ + weekDay; } <p>The greeting **is**: @greetingMessage</p></p><h4 id="Razor语句块"><a href="#Razor语句块" class="headerlink" title="Razor语句块"></a>Razor语句块</h4><p>一系列的语句，用大括号组成组。例如：<br>@{ Layout = <strong>null</strong>;  string temp = “var test———“; }</p><h4 id="Razor语句"><a href="#Razor语句" class="headerlink" title="Razor语句"></a>Razor语句</h4><p>单独的语句，例如@model LoginViewModel</p><h4 id="Razor表达式"><a href="#Razor表达式" class="headerlink" title="Razor表达式"></a>Razor表达式</h4><p>放在html tag里面，呈现内容。例如：<br>&lt;h3&gt;@(ViewBag.Message)&lt;/h3&gt; //注意，插入文字中间的时候加括号。</p><input type="text" name="UName" value="@Model.UName"></input><h3 id="数据获取"><a href="#数据获取" class="headerlink" title="数据获取"></a>数据获取</h3><ul><li>方法一：从控制器获得<h4 id="强类型Model-Object"><a href="#强类型Model-Object" class="headerlink" title="强类型Model Object"></a>强类型Model Object</h4>例如：@model Razor.Models.Product<br>由控制器从模型中提取数据库的数据，再作相应的处理如类型转换后传递给视图。例如return View(db.ASPnetUser.toList())<h4 id="ViewBag对象"><a href="#ViewBag对象" class="headerlink" title="ViewBag对象"></a>ViewBag对象</h4>ViewBag是动态对象，其属性可以由用户自定义，如 .Message<br>ViewBag没有错误检验，在Debugging的时候不易发现。<br>例如ViewBag.Message =”your message” //写在controller的某个Result里面<br>然后在对应的View页面中直接在tag 例如&lt;h3&gt;@ViewBag.Message &lt;/h3&gt;中利用razor引用即可。 </li><li>方法二：自己操作模型（略）<h3 id="HTML-帮助器"><a href="#HTML-帮助器" class="headerlink" title="HTML 帮助器"></a>HTML 帮助器</h3>由Html类（对象）衍生出来的一系列方法，实际上是html类的static method（静态方法）。<br>Html.actionLink()// 产生一个超链接<br>Html.actionLink(“Create new User”, “Create”)=<a href="\\ASPNetUser\\Create">Create new User </a><br>其他的帮助器例如： @using(Html.BeginForm()) { …… } @Html.CheckBox() @Html.RadioButton() @Html.Hidden() @Html.Password() @Html.TextArea() @Html.TextBox() @Html.DropDownList() @Html.ListBox() @Html.ActionLink() @Html.RouteLink()，<br>强类型的后面加for，如Html.TextBoxFor()，其各自的功能可以去官方文档查看。<h4 id="强类型的说明"><a href="#强类型的说明" class="headerlink" title="强类型的说明"></a>强类型的说明</h4>强类型的html帮助器，即带for的如Html.TextBoxFor()，其使用 <strong>lambda 表达式</strong>来引用传到视图模板中的模型或视图模型。<br>_注：Lambda表达式参见C#文档。_<br>这样做有一些好处：<br>促成更好的编译时视图检查（可以在编译时发现缺陷，而不是在运行时），还可以促成视图模板中更好的代码intellisense支持。<br>比如 之前的写法是直接传入模型里的值<br>Html.TextBox(“Product Name”, Model.ProductName)<br>它会生成如下的HTML代码<br><input id="productName" name="productName" type="text" value="Model.ProductName"><br>使用Html.TextBoxFor()之后，只需写入<br>Html.TextBoxFor(Model =&gt; Model.ProductName)//也不需要指定“ProductName”的id了<h3 id="Url帮助器"><a href="#Url帮助器" class="headerlink" title="Url帮助器"></a>Url帮助器</h3>由Url对象衍生出来的一系列方法。如<br>@Url.Content(“~/Content/Site.css”)<br>@Url.Action()<br>@Url.RouteUrl()<br>具体的使用方法详见ASP.NET MVC的官方文档。</li></ul><h1 id="第6周课程-MVC-C"><a href="#第6周课程-MVC-C" class="headerlink" title="第6周课程 MVC-C"></a>第6周课程 MVC-C</h1><h2 id="名词解释-5"><a href="#名词解释-5" class="headerlink" title="名词解释"></a>名词解释</h2><h3 id="控制器-Controller"><a href="#控制器-Controller" class="headerlink" title="控制器 Controller"></a>控制器 Controller</h3><p><strong>Controller（控制器）</strong>是应用程序中处理用户交互的部分。 通常控制器负责从视图读取数据，控制用户输入，并向模型发送数据，或者与之相反，从模型中抽取数据，传递给视图，再生成网页发送给用户。</p><h3 id="Controllers-文件夹"><a href="#Controllers-文件夹" class="headerlink" title="Controllers 文件夹"></a>Controllers 文件夹</h3><p>Controllers 文件夹包含负责处理用户输入和响应的控制器类。<br>MVC 要求所有控制器文件的名称以 “Controller” 结尾。</p><h3 id="ActionResult类：Action的返回值"><a href="#ActionResult类：Action的返回值" class="headerlink" title="ActionResult类：Action的返回值"></a>ActionResult类：Action的返回值</h3><p>ActionResult是控制器返回值类型的基类，其余的常见返回值都是继承于ActtionResult类（*详见Microsoft文档）。<br>如Public ActionResult Index() { return View()}<br>实际上，视图的返回类型是ViewResultBase，它返回HTML内容。</p><ul><li><strong>注意：View()函数默认返回与方法名相同的视图。</strong><br>又如Content() 与ContentResult对应，返回一个字符串或其他文字内容。</li><li><strong>注意：controller返回的内容不一定是网页。</strong><h3 id="查询字符串"><a href="#查询字符串" class="headerlink" title="查询字符串"></a>查询字符串</h3>附属在url后方的一串代码，用于向http服务器传递参数，在控制器中可以使用。<br>如：…/endOfPath?a=5&amp;b=4<h3 id="状态管理"><a href="#状态管理" class="headerlink" title="状态管理"></a>状态管理</h3>由于HTTP协议的无状态特性，导致在ASP.NET编程中，每个请求都会在服务端从头到执行一次管线过程， 对于ASP.NET页面来说，Page对象都会重新创建，所有控件以及内容都会重新生成， 因此，如果希望上一次的页面状态能够在后续页面中保留，则必需引入状态管理功能。<h3 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h3>Cookie 是一小段文本信息，它的工作方式就是伴随着用户请求和页面在 Web 服务器和浏览器之间传递。Cookie 包含每次用户访问站点时 Web 应用程序都可以读取的信息，应用广泛，如保持用户的登录状态。<br>（计算机网络课程讲过，<strong>HTTP协议是无状态的</strong>，缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大）<br>为了支持客户端与服务器之间的交互，我们就需要通过不同的技术为交互存储状态，所以Cookie使得基于无状态的HTTP协议<strong>记录稳定的状态信息</strong>成为了可能。<h3 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h3>Session称为“会话控制”。Session对象存储特定用户会话所需的属性及配置信息。这样，当用户在应用程序的Web页之间跳转时，存储在Session对象中的变量将不会丢失，而是在整个用户会话中一直存在下去。当用户请求来自应用程序的 Web页时，如果该用户还没有会话，则Web服务器将自动创建一个 Session对象。当会话过期或被放弃后，服务器将终止该会话。<br>Session 对象最常见的一个用法就是存储用户的首选项。例如，如果用户指明不喜欢查看图形，就可以将该信息存储在Session对象中。<h4 id="Application"><a href="#Application" class="headerlink" title="Application"></a>Application</h4>采用HttpApplication State实现的状态维持方式。<br>Application.Lock(); Application[“PageRequestCount”] = ((int)Application[“PageRequestCount”]) + 1; Application.UnLock();<h2 id="概念论述-5"><a href="#概念论述-5" class="headerlink" title="概念论述"></a>概念论述</h2><h3 id="从请求获取数据——常用属性与对象"><a href="#从请求获取数据——常用属性与对象" class="headerlink" title="从请求获取数据——常用属性与对象"></a>从请求获取数据——常用属性与对象</h3>Controller是可以从请求获取数据来传递给视图的。这一过程使用到了很多对象。<h4 id="Request对象"><a href="#Request对象" class="headerlink" title="Request对象"></a>Request对象</h4>request对象有这些作用：读取浏览器信息、表单数据、查询字符串、Cookie。<br>request对象可以从URL上获得数据。<br>Request.Form[“name”]<br>Request.QueryString[“name”]// URL的查询字符串储存在这里。<h4 id="Response对象"><a href="#Response对象" class="headerlink" title="Response对象"></a>Response对象</h4>response对象可以：下载文件、页面跳转、创建Cookie。<h4 id="Server对象"><a href="#Server对象" class="headerlink" title="Server对象"></a>Server对象</h4></li><li>可以掌管url逻辑路径到服务器实际路径的路由映射。<br>MapPath、Transfer、HtmlEncode/Decode、UrlEncode/Decode（编码解码）<br>如：<br>String temp = Server.MapPath(“~/Images”)<br>//此处temp的返回值即该Images文件在本机上的实际路径。</li><li>也可用于：URL重定向<br>URL重定向本身可以用response跳转，即ActionResult中的RedirectResult类。<br>该过程是<strong>将重定向的请求返回到客户端，由客户端重新发起一个重定向的请求</strong>。<br>而Server的重定向过程可以<strong>直接在服务器端跳转</strong>，客户端程序不知晓中间是否发生了重定向。<br>！注意两者的区别<h4 id="HttpContext对象"><a href="#HttpContext对象" class="headerlink" title="HttpContext对象"></a>HttpContext对象</h4><h4 id="ViewData-ViewBage-TempData对象"><a href="#ViewData-ViewBage-TempData对象" class="headerlink" title="ViewData/ViewBage/TempData对象"></a>ViewData/ViewBage/TempData对象</h4><h3 id="状态管理-1"><a href="#状态管理-1" class="headerlink" title="状态管理"></a>状态管理</h3><h4 id="Cookie-1"><a href="#Cookie-1" class="headerlink" title="Cookie"></a>Cookie</h4>保存数据到Cookie中<br>HttpCookie c = <strong>new</strong> HttpCookie(“LastVisit”);   c.Value = DateTime.Now.ToString();   Response.Cookies.Add(c);  Response.Cookies[“键名”] = 键值<br>从Cookie中取出值<br>变量 = Request.Cookies[“键名”]<br>Cookie过期<br>c.Expires = DateTime.Now.AddDays(7);<h4 id="Application-1"><a href="#Application-1" class="headerlink" title="Application"></a>Application</h4>保存到Application对象中<br>HttpContext.Application.Lock();  HttpContext.Application[“Name”] = Value HttpContext.Application.UnLock();<br>从Application对象中取出值<br>变量 = HttpContext.Application[“Name”]<br>去除Cookie<br>HttpContext.Application.Remove(“键名”)<h4 id="Session-1"><a href="#Session-1" class="headerlink" title="Session"></a>Session</h4>保存到Session对象中<br>Session[“Name”] = “Value”<br>从Session对象中取出值<br>变量 = Session[“Name”]<h1 id="第7周课程-MVC-M"><a href="#第7周课程-MVC-M" class="headerlink" title="第7周课程 MVC-M"></a>第7周课程 MVC-M</h1><h2 id="名词解释-6"><a href="#名词解释-6" class="headerlink" title="名词解释"></a>名词解释</h2><h3 id="Model-模型-1"><a href="#Model-模型-1" class="headerlink" title="Model 模型"></a>Model 模型</h3>Model是MVC中的M。模型代表一个存取数据的对象。它也可以带有逻辑，在数据变化时更新控制器。<h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><h4 id="与数据库的表相对应的模型"><a href="#与数据库的表相对应的模型" class="headerlink" title="与数据库的表相对应的模型"></a>与数据库的表相对应的模型</h4>模型中的变量与其关联的数据库的字段一一对应，可以用来操作对应的数据库。<br>例如：User(Id, LoginName, Password, RealName, Gender, Birthday, Address, Zipcode, Email, Mobile, CreateAt)<h4 id="与视图对应的模型"><a href="#与视图对应的模型" class="headerlink" title="与视图对应的模型"></a>与视图对应的模型</h4>模型中的变量与生成的视图中的<br>在视图的首行插入<br>@using WebApplications1.Models<br>来使用对应的模型。<br>又如：login页面的login操作<br>Task<ActionResult> login(LoginViewModel model, string returnurl)<br>也用到了LoginViewModel模型作为其参数来验证用户输入。<br>这样的模型例如：LoginModel(UserName, Password,<br>RememberMe)、RegisteModel(UserName, RealName, Email, Password, ConfirmPassword)<h3 id="CSharp语言的特性"><a href="#CSharp语言的特性" class="headerlink" title="CSharp语言的特性"></a>CSharp语言的特性</h3><strong>特性（Attribute）</strong>是用于在运行时传递程序中各种元素（比如类、方法、结构、枚举、组件等）的行为信息的声明性标签。<br>通过使用特性可以向程序添加声明性信息。一个声明性标签是通过放置在它所应用的元素前面的方括号（[ ]）来描述的。<br>例如：<br><strong>public</strong> <strong>class</strong> LoginViewModel{   [Required]   [Display(Name=”Email”)]   [EmailAddress]   <strong>public</strong> string Email { <strong>get</strong>; <strong>set</strong>;} }<br>关于特性的其他信息，详见<a href="https://www.runoob.com/csharp/csharp-attribute.html" target="_blank" rel="noopener">https://www.runoob.com/csharp/csharp-attribute.html</a><h3 id="LINQ"><a href="#LINQ" class="headerlink" title="LINQ"></a>LINQ</h3>Language Integrate Query，即语言集成查询。<br>LINQ是一组语言特性和API，使得你可以使用统一的方式编写各种查询。用于保存和检索来自不同数据源的数据，从而消除了编程语言和数据库之间的不匹配，以及为不同类型的数据源提供单个查询接口。<br>LINQ总是使用对象，因此你可以使用相同的查询语法来查询和转换XML、对象集合、SQL数据库、ADO.NET数据集以及任何其他可用的LINQ提供程序格式的数据。<h2 id="概念论述-6"><a href="#概念论述-6" class="headerlink" title="概念论述"></a>概念论述</h2><h3 id="访问数据库"><a href="#访问数据库" class="headerlink" title="访问数据库"></a>访问数据库</h3>使用SQL server。详细操作过程叙述不易，可以见回放视频。<h4 id=""><a href="#" class="headerlink" title=" "></a> </h4><h1 id="第8周课程-MVC联合"><a href="#第8周课程-MVC联合" class="headerlink" title="第8周课程 MVC联合"></a>第8周课程 MVC联合</h1>（本周应用类课程，相应的知识点总结在了前面几周，故此处略过）<h1 id="第9周课程-JS"><a href="#第9周课程-JS" class="headerlink" title="第9周课程 JS"></a>第9周课程 JS</h1><h2 id="名词解释-7"><a href="#名词解释-7" class="headerlink" title="名词解释"></a>名词解释</h2><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3>JS是一种高级的、解释型的编程语言，也是浏览器端的编程语言，大部分现代的 HTML 页面都使用 JavaScript。总的来说，JS是可插入* HTML 页面的编程代码，插入 HTML 页面后，可由所有的现代浏览器执行，其目的是利用代码操控html页面上的元素及其样式，对事件作出响应，让网页产生更多的功能。<br><strong>JavaScript = ECMAScript(核心)+DOM+BOM</strong><br>一般来说，JS运行在浏览器上，但目前JS<strong>已经可以被即时编译执行</strong>，还可用于游戏、桌面和移动应用程序的开发和在服务器端网络环境运行，最大的例子就是我们常用的npm包管理器的编写语言<strong>Node.js</strong>。<h3 id="JavaScript代码解析过程"><a href="#JavaScript代码解析过程" class="headerlink" title="JavaScript代码解析过程"></a>JavaScript代码解析过程</h3><h4 id="流式解析"><a href="#流式解析" class="headerlink" title="流式解析"></a>流式解析</h4>可定义函数<br>函数体外的语句直接执行（执行时可调用函数）<h4 id="事件驱动"><a href="#事件驱动" class="headerlink" title="事件驱动"></a>事件驱动</h4>当发生某些事件时执行<h3 id="弱类型编程语言"><a href="#弱类型编程语言" class="headerlink" title="弱类型编程语言"></a>弱类型编程语言</h3>指不需要变量声明，可以给变量赋予不同类型的值的编程语言。如JS就是弱类型的语言，如下的书写方式不会被编译器报错。<br><strong>var</strong> Name = “Bill Gates”; Name = 123; Name = <strong>true</strong>;<br>这是因为Javascript<br>对应的还有强类型的语言，如C#，在使用变量之前不需要变量声明<h3 id="执行环境与作用域Scope"><a href="#执行环境与作用域Scope" class="headerlink" title="执行环境与作用域Scope"></a>执行环境与作用域Scope</h3>即变量的作用范围。JS没有块级作用域（Block Scope）<h3 id="HTML使用JavaScript的方式"><a href="#HTML使用JavaScript的方式" class="headerlink" title="HTML使用JavaScript的方式"></a>HTML使用JavaScript的方式</h3></li><li>利用 tag<script type="text/javascript"> /\*jscode\*/ </script></li><li>放在外部文件，在html中引用。<script type="text/javascript" src="a.js"></script></li><li>在HTML元素的事件上调用函数执行<form onsubmit="return checkData(this);" method="post" action="register.html"></li></ul><h2 id="概念论述-7"><a href="#概念论述-7" class="headerlink" title="概念论述"></a>概念论述</h2><h3 id="Javascipt语法规则"><a href="#Javascipt语法规则" class="headerlink" title="Javascipt语法规则"></a>Javascipt语法规则</h3><h3 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h3><ul><li>算术操作符(+,-,*,/,%,++,—)</li><li>位操作符(~,&amp;,|,^(XOR),&lt;&lt;,&gt;&gt;,&gt;&gt;&gt;)</li><li>布尔操作符(!,&amp;&amp;,||)</li><li>关系操作符(&lt;,&gt;,&lt;=,&gt;=,==,!=,===)</li><li>赋值操作符(+,-,,/,%,&lt;&lt;,&gt;&gt;,&gt;&gt;&gt;与等号结合)</li><li>三元运算符(x = x&gt;0 ? x : -x ; //绝对值)<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><h4 id="typeof与instanceof"><a href="#typeof与instanceof" class="headerlink" title="typeof与instanceof"></a>typeof与instanceof</h4>typeof(): 返回变量的类型，可以是primitive types, 也可以是object或者function。<br>instanceof(): 判断一个变量是不是某一个构造方法的实例，返回值是布尔类型。<h4 id="数字类型"><a href="#数字类型" class="headerlink" title="数字类型"></a>数字类型</h4>int，float等基本数据类型与其他语言大体相同。<br>被零除时返回Infinity或-Infinity<br>非数字显示NaN<br>数字类型对应的Wrapper类型是Number<h4 id="文本类型"><a href="#文本类型" class="headerlink" title="文本类型"></a>文本类型</h4>字符串：用’’或””引用起来的序列，其中，转义序列用\()表示。<br>str.length 储存了字符串的长度；<br>str1 + str2，str1.concat(str2) 可以将两个字符串连接起来；<br>str.CharAt(0) 可以选定指定位置的字符；<br>str.IndexOf(“abc”)，lastIndexOf 可以查找子字符串；<br>str.substring(SttP,EndP) 相应地可以根据index提取子串。<br>模式匹配, 可以采用正则表达式，具体与Java相仿。<h4 id="数据类型的转换"><a href="#数据类型的转换" class="headerlink" title="数据类型的转换"></a>数据类型的转换</h4></li><li>转换为字符串<br>var num = 123; var str = num.toString();</li><li>转换为数字，主要是以parse函数来解析字符串。<br>var i = parseInt(“123”); var f = parseFloat(“123.45”);</li><li>强制类型转换，利用括号内的指定来转换。<br>Boolean(value)，Number(value)，String(value)</li><li>隐式类型转换，即可以自动转换。<br>（”123” + 456）<h4 id="日期类型"><a href="#日期类型" class="headerlink" title="日期类型"></a>日期类型</h4><strong>UTC（Coordinated Universal Time）</strong><br>指1970/1/1 0:0:0 之前可或之后经过的毫秒数（精度约285616年）<br><strong>var</strong> now = <strong>new</strong> Date(); _//自动获得当前日期与时间 _ <strong>var</strong> date1 = <strong>new</strong> Date(“5/25/2004 12:28:48”);  <strong>var</strong> date1 = <strong>new</strong> Date(“May 25, 2004”);  <strong>var</strong> date1 = <strong>new</strong> Date(Date.parse(“May 25, 2004”));  <strong>var</strong> date1 = <strong>new</strong> Date(Date.UTC(2015, 4, 5, 3, 2,55));<h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4>数组可按照如下方式定义<br><strong>var</strong> a = <strong>new</strong> Array();  <strong>var</strong> primes = [2, 3, 5, 7, 11];  <strong>var</strong> a = <strong>new</strong> Array(10);  <strong>var</strong> misc = [1.1, <strong>true</strong>, “str”];  <strong>var</strong> a = <strong>new</strong> Array(5, 4, 3, “str1”, “str2”);  <strong>var</strong> empty = [];<br>数组元素的访问: a[i]// 第一个的下标是0<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h4 id="定义与调用"><a href="#定义与调用" class="headerlink" title="定义与调用"></a>定义与调用</h4></li><li>函数声明，例如function sum(num1, num2) { return num1 + num2 ; }，可以先使用后声明。</li><li>函数表达式，例如var sum = function(num1, num2) { return num1 + num2 ; };, 只能先声明后使用。</li><li>函数对象，例如var sum = new Function(“num1”, “num2”, “return num1 + num2”);, 只能先声明后使用。<br>注意：</li></ul><ol><li>函数必须先定义后使用（一般在<head>中）。</li><li>函数定义好之后，并不会自动执行，必须有一个明确 的调用语句。</li><li>对于被调用的函数，其定义必须放在调用语句前面。<h4 id="return语句"><a href="#return语句" class="headerlink" title="return语句"></a>return语句</h4>对于带有类型的函数，函数的运行必须要必须以return相应的类型来结束；<br>void类型的函数不带有return。<h4 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h4></li></ol><ul><li>形参的命名与实参不必完全一致。</li><li>由于参数的灵活性，JavaScript函数没有重载（overload）。</li><li>JS参数的传递是“<strong>pass by value</strong>”，是值传递，即拷贝相应变量所占位址上的所有bits作为参数传递到函数里面。因此，在函数中改变primitive类型的参数，被传入的函数外的变量值不会改变，而改变对象的属性的话，由于函数中也是调用的该对象同样的地址，所以对象的属性会发生变化。</li><li><strong>arguments对象</strong>：传递的参数列表本身也是一个JS对象，具有对象的特征。</li><li>• 当成一个数组来使用(arguments.length、arguments[i])</li><li>• callee属性——指向拥有arguments对象的函数<h4 id="函数的属性与方法"><a href="#函数的属性与方法" class="headerlink" title="函数的属性与方法"></a>函数的属性与方法</h4></li><li>this属性： 函数以执行的对象（执行时所处的作用域） </li><li>windows.color = “red”;  <strong>var</strong> o = { color : “blue” }  <strong>function</strong> sayColor() { alert(<strong>this</strong>.color); } sayColor(); o.sayColor = sayColor; o.sayColor(); _//red_ _//blue_</li><li>length属性： 希望接收的命名参数的个数 </li><li><strong>function</strong> sayName(name) {    alert(name);  }  <strong>function</strong> sayHi() {   alert(“hi”);  } <strong>function</strong> sum(num1, num2) {   <strong>return</strong> num1 + num2;;  }  alert(sayName.length); _//1_ alert(sayHi.length); _//0_ alert(sum.length);_//2_</li><li>apply()方法： 在特定的对象上调用函数</li><li>第一个：运行函数的对象；第二个：参数数组(或arguments对象)</li><li>windows.color = “red”;  <strong>var</strong> o = { color : “blue” }  <strong>function</strong> sayColor() { alert(<strong>this</strong>.color); } sayColor();_//red_ o.sayColor = sayColor;  o.sayColor();_//blue_ sayColor.apply(<strong>this</strong>);_//red _ sayColor.apply(windows);_//red_ sayColor.apply(o); _//blue_</li><li></li><li>call()方法： 在特定的对象上调用函数</li><li>第一个：运行函数的对象；其余参数：直接一个个列出传入</li><li>windows.color = “red”;  <strong>var</strong> o = { color : “blue” }  <strong>function</strong> sayColor() { alert(<strong>this</strong>.color); } sayColor();_//red_ sayColor.call(<strong>this</strong>);_//red_ sayColor.call(windows); _//red_ sayColor.call(o);_//blue_</li><li></li><li>prototype属性： 保存其所有实例方法的真正所在</li><li>函数的嵌套：内部与外部函数<h4 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h4></li><li>内部函数在定义它的作用域的外部被引用时，创建该内部函数的一个闭包。</li><li>闭包会携带包含它的函数的作用域（但只是每个变量的最后一个值），因此会比其它函数占用更多的内存。</li><li>闭包中的this总是指全局对象(window)，可通过call或apply改变。<h3 id="OOP（面向对象程序设计）"><a href="#OOP（面向对象程序设计）" class="headerlink" title="OOP（面向对象程序设计）"></a>OOP（面向对象程序设计）</h3><h4 id="对象类型"><a href="#对象类型" class="headerlink" title="对象类型"></a>对象类型</h4>对象：实质上Name-Value对的集合，可以拥有自己的类的实例方法，与java对象类似。<h5 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h5>如：<br><strong>var</strong> point = { x : 0 , y : 0 } ; point.x = 100 ;  <strong>var</strong> book = { } ;  <strong>var</strong> book = <strong>new</strong> Object() ;  Var book = <strong>null</strong> ;  book.name = “JavaScript编程” ;<h5 id="对象的使用"><a href="#对象的使用" class="headerlink" title="对象的使用"></a>对象的使用</h5>o.p, o[“p”] // 后一种为引用对象的属性名。<h5 id="属性的检测"><a href="#属性的检测" class="headerlink" title="属性的检测"></a>属性的检测</h5>o.hasOwnProperty(“p”)<h5 id="预定义方法"><a href="#预定义方法" class="headerlink" title="预定义方法"></a>预定义方法</h5>所有的JS对象类型都拥有以下两种方法。<br>toString() 转换为字符串类型，返回对象的字符串表示。<br>valueOf()) 返回指定对象的原始值，如Array类型的对象，数组的元素被转换为字符串，这些字符串由逗号分隔，连接在一起。其操作与 <strong>Array.toString</strong> 和 <strong>Array.join</strong>方法相同。<h4 id="构造方法-Constructor"><a href="#构造方法-Constructor" class="headerlink" title="构造方法 Constructor"></a>构造方法 Constructor</h4><strong>constructor</strong>是一种用于创建和初始化创建的对象的特殊方法。<br>语法为function ([arguments]) { … }<h4 id="动态原型模式"><a href="#动态原型模式" class="headerlink" title="动态原型模式"></a>动态原型模式</h4>动态原型模式是由构造函数和原型模式组合而成的.<br>JS的构造函数如下：<br><strong>function</strong> Box(){     <strong>this</strong>.name:’bigBox’;     <strong>this</strong>.boxs = [“box1”, “box2”, “box3”]; };<br>_//JS的 原型模式如下_ <strong>function</strong> Bar(){}; Bar.prototype = {         constructor:Box,         age:100,         call:<strong>function</strong>(){             alert(‘your age is’ + <strong>this</strong>.age)         }     }<br>_// 将构造函数与原型模式写到一起之后_ <strong>function</strong> Box(){      <strong>this</strong>.name:’bigBox’,      <strong>this</strong>.boxs = [“box1”, “box2”, “box3”];     <strong>if</strong>(<strong>typeof</strong> <strong>this</strong>.run != ‘function’){         Box.prototype.num = <strong>function</strong>(){              console.log(<strong>this</strong>.boxs.length);         }     }  }<br>构造函数执行时，里面的代码都会执行一遍，而原型有一个就行，不用每次都重复，所以仅在第一执行时生成一个原型，后面执行就不必在生成，所以就不会执行if包裹的函数，使用构造函数其实是把new出来的对象作用域绑定在构造函数上，而字面量的写法，会重新生成一个新对象，就切断了两者的联系，因此不能使用字面量。<br>动态原型模式就是把共享的对象的使用原型，不共享对象的使用构造函数。<h4 id="Global对象"><a href="#Global对象" class="headerlink" title="Global对象"></a>Global对象</h4>Global对象是终极兜底的对象，实际上，所有的全局函数(isNaN, isFinite, parseInt, parseFloat)和全局属性都是属于该对象的，在浏览器中是作为window对象的一部份实现的。下面是一些例子：</li><li>eval()方法</li><li>特殊值(undefined, NaN, Infinity)</li><li>所有的引用类型实际上都是构造函数（一种特殊的函数），例如：Object, Array, Date, RegExp,, Function, Boolean, String, Number, Error, EvalError, RangeError, ReferenceError, SyntaxError, TypeError, URIError</li></ul><h1 id="第10周课程-BOM-DOM"><a href="#第10周课程-BOM-DOM" class="headerlink" title="第10周课程 BOM/DOM"></a>第10周课程 BOM/DOM</h1><h2 id="名词解释-8"><a href="#名词解释-8" class="headerlink" title="名词解释"></a>名词解释</h2><h3 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h3><p><strong>浏览器对象模型</strong>（Browser Object Model）提供了独立于内容而与浏览器窗口进行交互的对象，其核心对象是window（窗口）。<br>BOM最初是Netscape浏览器标准的一部分，但缺乏标准，没有 specification。如JavaScript语法的标准化组织是ECMA，DOM的标准化组织是W3C。</p><h3 id="Window对象"><a href="#Window对象" class="headerlink" title="Window对象"></a>Window对象</h3><p>所有浏览器都支持 window 对象。它表示浏览器窗口。所有 JavaScript 全局对象、函数以及变量均自动成为 window 对象的成员。全局变量是 window 对象的属性，全局函数是 window 对象的方法，甚至 HTML DOM 的 document 也是 window 对象的属性之一。</p><h3 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h3><p><strong>文档对象模型</strong>(Document Object Model) 是HTML和XML文档的编程接口。DOM 用一个逻辑树来表示一个文档，树的每个分支的终点都是一个节点(node)，每个节点都包含着对象(objects)，这样，将 web 页面与到脚本或编程语言连接起来。</p><h3 id="DOM选择器-（-Selector）"><a href="#DOM选择器-（-Selector）" class="headerlink" title="DOM选择器 （ Selector）"></a>DOM选择器 （ Selector）</h3><ul><li>ID: var div1 = document.getElementById(“div1”);</li><li>Name: var radios = document.getElementsByName(“fColor”);</li><li>Tag/ Class Name: var spans = document.getElementsByTagName(“span”);</li><li>快捷属性，例如images<img>、forms<form>、links<a>: var form = document.forms[0];</li><li>CSS选择器： document.querySelector(“ “) , var elementList = document.querySelectorAll(“……”);</li><li>document.all对象</li></ul><h2 id="概念论述-8"><a href="#概念论述-8" class="headerlink" title="概念论述"></a>概念论述</h2><h3 id="Window对象及其使用"><a href="#Window对象及其使用" class="headerlink" title="Window对象及其使用"></a>Window对象及其使用</h3><p>window 对象表示浏览器窗口。所有 JavaScript 全局对象、函数以及变量均自动成为 window 对象的成员。全局变量是 window 对象的属性，全局函数是 window 对象的方法，甚至 HTML DOM 的 document 也是 window 对象的属性之一。</p><h4 id="窗口大小与位置"><a href="#窗口大小与位置" class="headerlink" title="窗口大小与位置"></a>窗口大小与位置</h4><ol><li>moveBy(dx,dy),</li><li>moveTo(x,y),</li><li>resizeBy(dw,dh),</li><li>resizeTo(x, y)</li><li>screenLeft, screenTop</li><li>innerWidth, innerHeight<h4 id="窗口的打开关闭"><a href="#窗口的打开关闭" class="headerlink" title="窗口的打开关闭"></a>窗口的打开关闭</h4></li></ol><ul><li>open(URL, name, features, replace)// 打开;用例如下<br><strong>var</strong> win = open(“<a href="http://www.zju.edu.cn" target="_blank" rel="noopener">http://www.zju.edu.cn</a>“, “pop”, “height=300,width=400”); alert(win.operner == window); _//true;_</li><li>close();关闭 用例如下<br>win.close();  alert(win.closed); _//true_<h4 id="计时器"><a href="#计时器" class="headerlink" title="计时器"></a>计时器</h4></li></ul><ol><li>超时调用<br><strong>function</strong> f() {……}  <strong>var</strong> timeoutID = setTimeOut(f, 100)  clearTimeOut(timeoutID)</li><li>间歇调用<br><strong>function</strong> f() {……}  <strong>var</strong> intervalID = setInterval(f, 100)  clearInterval (intervalID)</li><li>可使用超时调用来模拟间歇调用<h4 id="系统对话框"><a href="#系统对话框" class="headerlink" title="系统对话框"></a>系统对话框</h4>alert(“…………”) //最常使用<br>confirm(“…………”)//弹出对话框并<br><strong>if</strong> (confirm(“Are you sure?”)) {  alert(“I’m so glad you’re sure!”);  } <strong>else</strong> { alert(“I’m sorry to hear you’re not sure!”);  }<br>prompt() //弹出对话框并收集用户输入。<br><strong>var</strong> result = prompt(“What is you name?”, “John’);  <strong>if</strong>(result != <strong>null</strong>) {  alert(“Welcom, “ + result); }<h4 id="window属性"><a href="#window属性" class="headerlink" title="window属性"></a>window属性</h4></li></ol><ul><li>location属性<ul><li>href—— 完整的URL</li><li>host——服务器名和端口号</li><li>hostname——服务器名</li><li>port——端口号</li><li>protocol——协议</li><li>pathname——目录与文件名</li><li>search——查询字符串</li><li>assign(URL)等价于直接给href赋值</li><li>reload()——刷新页面</li></ul></li><li>navigator属性：识别客户端浏览器的实际标准</li><li>screen属性</li><li>history属性<h3 id="DOM模型与节点模型"><a href="#DOM模型与节点模型" class="headerlink" title="DOM模型与节点模型"></a>DOM模型与节点模型</h3>(img)<br>DOM之中，整个文档是一个文档节点，每个HTML元素都是元素节点，每个HTML属性是属性节点，树中的每一个节点都可以通过Javascript访问。<br>节点之间还存在着关系，如父子节点，同级节点等。顶端节点被称为根（root），每个节点都有父节点、除了根（它没有父节点），同胞是拥有相同父节点的节点。<h3 id="节点遍历"><a href="#节点遍历" class="headerlink" title="节点遍历"></a>节点遍历</h3>(img)<h4 id="作为节点树的文档"><a href="#作为节点树的文档" class="headerlink" title="作为节点树的文档"></a>作为节点树的文档</h4>（使用Node的属性）<br>parentNode、childNodes、firstChild、 lastChild nextSibling、previoursSibling： nodeType：节点类型：1Element、3Text、9Document nodeValue：只是Text和Comment节点，表示文本内容 nodeName：元素的标签名，以大写形式表示 hasChildNodes()：只要有一个子节点，就返回true ownerDocument：指向表示整个文档的文档结点<br>使用方式：<br>aNode.childNodes[0]<br>aNode.childNodes.item(1)<br>aNode.childNodes.length<br>document.firstChild. firstChild.nextSibling<h4 id="作为元素树的文档"><a href="#作为元素树的文档" class="headerlink" title="作为元素树的文档"></a>作为元素树的文档</h4>（不包括Text和Comment节点）（使用Element属性）<br>parentElement、children、childElementCount： firstElementChild、 lastElementChild： nextElementSibling、previoursElementSibling： tagName：等于nodeName innerHTML ：元素内容 outerHTML ：元素及内容<h3 id="DOM操作"><a href="#DOM操作" class="headerlink" title="DOM操作"></a>DOM操作</h3><h4 id="操作属性"><a href="#操作属性" class="headerlink" title="操作属性"></a>操作属性</h4><h5 id="HTML属性作为Element属性"><a href="#HTML属性作为Element属性" class="headerlink" title="HTML属性作为Element属性"></a>HTML属性作为Element属性</h5><strong>var</strong> f = document.forms[0];  f.action = “<a href="http://www.baidu.com" target="_blank" rel="noopener">http://www.baidu.com</a>“;  f.method = “POST”;<br>命名规则：一般用小写，多个单字后面的单字首字母大写； 与保留字冲突加前缀html(如htmlFor)；class =&gt; className 属性的值是有类型的（字符串、布尔值、数值、对象）<h5 id="非标准HTML属性"><a href="#非标准HTML属性" class="headerlink" title="非标准HTML属性"></a>非标准HTML属性</h5><strong>var</strong> image = document.images[0];  <strong>var</strong> imgwidth = parseInt(image.getAttribute(“WIDTH”)); image.setAttribute(“class”, “thumbnail”); _//HTML元素的属性名不区分大小写_  _//这两个方法的返回值与参数都是字符串_<br>其他的方法举例：hasAttribute()、 hasAttribute(“value”)、 removeAttribute(“AttributeName”)。<h5 id="数据集属性"><a href="#数据集属性" class="headerlink" title="数据集属性"></a>数据集属性</h5>任何以data-为前缀的小写的属性名字都是合法的。<br>Element对象上定义了dataset属性，带连字符的HTML 属性，去掉data-前缀，形成以驼峰法命名的元素属性。<br>如：data-x =&gt; dataset.x<br>data-jquery-test =&gt; dataset.jqueryTest<h5 id="只读实时的attributes属性（每个Attr对象）"><a href="#只读实时的attributes属性（每个Attr对象）" class="headerlink" title="只读实时的attributes属性（每个Attr对象）"></a>只读实时的attributes属性（每个Attr对象）</h5>Attr对象的 name和value属性返回该属性的名字与值 document.body.attributes[0] _//body元素的第一个属性 _ document.body.attributes.bgcolor _//body元素的bgcolor属性 _ document.body.attributes[“onload”] _//body元素的onload属性_<h4 id="操作元素的内容"><a href="#操作元素的内容" class="headerlink" title="操作元素的内容"></a>操作元素的内容</h4><strong>内容的界定</strong>:（开始标记与结束标记之间的东西）</li></ul><ol><li>innerHTML属性</li><li>outerHTML属性（包含敢开始与结束标记） 当设置outerHTML属性时，元素本身也被替换</li><li>Node的textContent属性 针对纯文本的元素（如）</li><li>Node的nodeValue属性<br>_针对Text节点的元素内_</li><li>insertAdjacentHTML(“内容”, “位置”)方法<br>_位置值：beforebegin/afterbegin/beforend/afterend_<h4 id="操作CSS"><a href="#操作CSS" class="headerlink" title="操作CSS"></a>操作CSS</h4></li><li>style元素属性是CSSStyleDeclaration对象<br>_与数据集属性一样：带连字符的CSS属性，要改写成以驼 峰法命名的style属性，属性的值是字符串。如属性名是 关键字，则加css前缀。例如元素e的操作如下：_<br>*e.style.fontSize = “24pt” ; //font-size *<br>_e.style.fontWeight = “blod” ; //font-weight_<br>* e.style.color = “blue” ; //color e.cssFloat = “right” ;*</li><li>整个样式作为字符串操作<br>e.setAttribute(“style”, s);<br>S = e.getAttribute(“style”);<br>e.style.cssText = s; s = e.style.cssText;</li><li>计算样式<br>window.getComputedStyle(e, null)</li><li>操作元素的className属性<br>_HTML的class属性的值是用空格隔开的类名_</li><li>操作元素的classList属性<br>_classList属性的值是DOMTokenList对象，我们只能用它 定义的方法来操作：add()、remove()、toggle()（如果 不存在类名就添加；否则，就删除它）、contains()（检 测是否包含指定的类名）_<h4 id="文档和元素的几何操作"><a href="#文档和元素的几何操作" class="headerlink" title="文档和元素的几何操作"></a>文档和元素的几何操作</h4></li><li>从抽象的节点树到渲染文档时的视觉表现层</li><li>文档坐标与视口坐标（相差滚动的偏移量）<br>window.pageXOffset和window.pageYOffset属性 document.documentElement.scrollLeft/scrollTop属性</li><li>查询元素的几何尺寸（视口的）<br>var box = e.getBoundingClientRect();<br>var w = box.width || (box.right – box.left);<br>var h = box.height || (box.bottom – box.top);<br>内联元素可用getClientRects()方法（返回多个box）</li><li>获得在某点(视口)的元素(最里面最上面)<br>var e = document.elementFromPoint(x, y)</li><li>滚动(scrollTo()、scrollBy()、scrollIntoView())<h4 id="操作表格"><a href="#操作表格" class="headerlink" title="操作表格"></a>操作表格</h4></li><li>核心DOM方法操作表格的复杂性</li><li>table元素的属性与方法<br>caption、tBodies、tFoot、tHead、rows createTHead、createTFoot、createCaption deleteTHead、deleteTFoot、deleteCaption deleteRow(pos)、insertRow(pos)、moveRow(m, n)</li><li>tbody元素的属性与方法 rows、deleteRow(pos)、insertRow(pos)、moveRow(m, n)</li><li>tr元素的属性与方法<br>cells、deleteCell(pos)、insertCell(pos)、moveCell(m, n)<h4 id="动态修改网页"><a href="#动态修改网页" class="headerlink" title="动态修改网页"></a>动态修改网页</h4></li><li>创建<br>document.createElement(“div”)//返回一个div元素<br>文档的createTextNode()、节点的cloneNode()</li><li>插入（ Node方法）<br>parentEle.appendChild(childEle)<br>parentEle.insertBefore(childEle, otherChildEle/null)</li><li>删除和替换<br>parentNode.removeChild(n)<br>parentNode.replaceChild(newElement, n) //用innerHTML属性</li></ol><h1 id="第11周课程-事件驱动编程"><a href="#第11周课程-事件驱动编程" class="headerlink" title="第11周课程 事件驱动编程"></a>第11周课程 事件驱动编程</h1><h2 id="名词解释-9"><a href="#名词解释-9" class="headerlink" title="名词解释"></a>名词解释</h2><h3 id="事件驱动-1"><a href="#事件驱动-1" class="headerlink" title="事件驱动"></a>事件驱动</h3><h4 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h4><p>页面对不同访问者的响应叫做事件，事件是用户可浏览器自身执行的某种动作，如click表示点击, mouseover表示鼠标停留等等。<br>对于事件，可以使用jQuery库来便捷处理。</p><h4 id="事件处理程序"><a href="#事件处理程序" class="headerlink" title="事件处理程序"></a>事件处理程序</h4><p>指响应某个事件的函数。一般来说，对应的属性名on + 事件名（如：click ==&gt; onclick）。</p><h3 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h3><p>在触发事件时会产生一个事件对象event，其包含与事件有关的各种信息，并作为参数传入事件处理程序。</p><p>事件对象的常用属性和方法如下表所示。<br>属性/方法<br>类型<br>说明<br>bubbles<br>Boolean<br>事件是否冒泡<br>cancelable<br>Boolean<br>事件是否可以取消其默认行为<br>currentTarget<br>Element<br>事件处理程序正在处理事件的那个元素<br>detail<br>Integer<br>有关事件的详细信息<br>eventPhase<br>Integer<br>所处阶段：1捕获、2处于目标、3冒泡<br>preventDefault()<br>Function<br>取消事件的默认行为，cancelable必须是true<br>stopPropagation()<br>Function<br>取消事件的传播，bubbles必须是true<br>target<br>Element<br>事件的目标元素<br>type<br>String<br>被触发的事件类型（事件名）</p><h3 id="表单-1"><a href="#表单-1" class="headerlink" title="表单"></a>表单</h3><p>HTMLFormElement</p><h2 id="概念论述-9"><a href="#概念论述-9" class="headerlink" title="概念论述"></a>概念论述</h2><h3 id="事件流"><a href="#事件流" class="headerlink" title="事件流"></a>事件流</h3><h3 id="事件处理程序-1"><a href="#事件处理程序-1" class="headerlink" title="事件处理程序"></a>事件处理程序</h3><ol><li>HTML内联绑定事件处理程序<input type="button" value="click me" onclick="alert('hi')" /></li><li>DOM0级绑定事件处理程序(冒泡)<br>btn.onclick = 函数 ;<br>btn.onclick = null ;</li><li>DOM2级绑定事件处理程序<br>btn.addEventListener//true捕获(“事件名”，函数，布尔值) btn.removeEventListener //false冒泡(“事件名”，函数，布尔值)</li><li>事件处理程序中的this指的是当前元素<h3 id="表单操作（HTMLFormElement）"><a href="#表单操作（HTMLFormElement）" class="headerlink" title="表单操作（HTMLFormElement）"></a>表单操作（HTMLFormElement）</h3><h4 id="表单提交"><a href="#表单提交" class="headerlink" title="表单提交"></a>表单提交</h4><strong>&lt;input</strong> type=”submit” value=”Submit” <strong>/&gt;</strong> <strong>&lt;input</strong> type=”image” src=”submit.png” <strong>/&gt;</strong> <strong>&lt;button</strong> type=”submit”<strong>&gt;</strong>Submit<strong>&lt;/button&gt;</strong><br>拥有焦点的表单，如有提交按扭，按回车键会自动提交 可用代码提交表单(myForm.submit())，但这不会触发submit事件.<h4 id="重置表单"><a href="#重置表单" class="headerlink" title="重置表单"></a>重置表单</h4><strong>&lt;input</strong> type=”reset” value=”Reset” <strong>/&gt;</strong> <strong>&lt;button</strong> type=”reset”<strong>&gt;</strong>Reset<strong>&lt;/button&gt;</strong><br>可用代码重置表单(myForm.reset())，会触发reset事件<h4 id="表单元素"><a href="#表单元素" class="headerlink" title="表单元素"></a>表单元素</h4>每个表单有一个elements属性，作为元素的引用。<br><strong>var</strong> f1 = myForm.elements[n]  <strong>var</strong> f2 = myForm.elements[“textbox1”]<br>如多个元素使用同一个name(如单选按扭)，则返回的是NodeList 表单提交时会把元素的名值对(name=value&amp;name=value)发往服务器<br>表单元素的属性有：disabled、form、name、readonly、tabIndex、type、value;<br>方法有：focus()、blur()<br>事件有：focus、blur<br>和change(对于文本输入框，在它们失取焦点，且value值改变时，才会触发； 对于select元素，只要选了不同的选项，不失取焦点就触发)<h4 id="文本输入框"><a href="#文本输入框" class="headerlink" title="文本输入框"></a>文本输入框</h4></li><li>value属性值：文本输入框中的内容。</li><li>placeholder属性：可指定输入前的提示</li><li>size：指定文本框显示的字符数</li><li>maxlength：指定文本框可输入的字符数</li><li>textarea：指定rows和cols属性</li></ol><ul><li>_如type=”password”，用户输入显示为星号_</li></ul><ol><li>select()、setSelectionRange()</li><li>selectionStart/End属性<h4 id="复选按扭"><a href="#复选按扭" class="headerlink" title="复选按扭"></a>复选按扭</h4></li><li>本身没有任何文本显示（value属性不起作用）</li><li>checked属性与defaultChecked属性</li><li>只是选中的name=value发送到服务器</li><li>鼠标单击时会触发click事件</li><li>如果由于单击改变了其状态，也会触发change<h4 id="单选按扭"><a href="#单选按扭" class="headerlink" title="单选按扭"></a>单选按扭</h4></li><li>本身没有任何文本显示（value属性不起作用）</li><li>checked属性与defaultChecked属性</li><li>只是选中的name=value发送到服务器</li><li>name属性相同的为一组</li><li>鼠标单击时会触发click事件</li><li>如果由于单击改变了其状态，也会触发change</li><li>如果由于单击没有改变其状态，也不会触发 change，如果由于其它单选按扭的单击改变了 其状态，也不会触发change<h4 id="操作选择框"><a href="#操作选择框" class="headerlink" title="操作选择框"></a>操作选择框</h4></li><li>由<select>和<option>标记创建<br>size属性大于1的话，显示为列表框；选择框的type属性决定了是单选还是可 以多选；type=“select-one/multiple”相当于单选按扭/复选按扭；text属性是选项的显示文本，value属性是发往服务器的值；可对<option>分组</li><li>HTMLSelectElement还提供了以下属性与方法<br>multiple(布尔值)；<br>options；<br>add(newOpt, relOpt)；<br>remove(index)；<br>针对单选：selectedIndex指定了当前被选中的选项；<br>针对多选：要遍历options中的每元素，检查其selected属性；</li><li>选择或取消一个选项时，触发change事件<h4 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h4></li><li>input元素的type为file</li><li>表单元素上要设置<br>enctype=”multipart/form-data”</li><li>要想可以多选文件<br>input元素上要设置multiple=”multiple”</li><li>选择文件后会触发change事件</li><li>检验上传文件的类形<h4 id="客户端数据校验"><a href="#客户端数据校验" class="headerlink" title="客户端数据校验"></a>客户端数据校验</h4></li><li>表单提交 oncommit</li><li>文本框 onchange oninput onkeypress<h1 id="第12周课程-AJAX"><a href="#第12周课程-AJAX" class="headerlink" title="第12周课程 AJAX"></a>第12周课程 AJAX</h1><h2 id="名词解释-10"><a href="#名词解释-10" class="headerlink" title="名词解释"></a>名词解释</h2><h3 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h3>异步JavaScript和XML(Asynchronous JavaScript + XML).<br>它是创建动态网页应用的一种使用现有技术集合的‘新’方法， 包括: HTML or XHTML, Cascading Style Sheets, JavaScript, The Document Object Model, XML, XSLT, XMLHttpRequest object。Ajax能够快速地将增量更新呈现在用户界面上，无需重载网页，就能更新部分网页。<br>例如：谷歌搜索建议（Google Suggest） 使用 AJAX 创造出动态性极强的 web 界面：当用户在谷歌的搜索框中键入内容时，JavaScript 会把字符发送到服务器，服务器则会返回建议列表。<h3 id="XMLHttpRequest对象"><a href="#XMLHttpRequest对象" class="headerlink" title="XMLHttpRequest对象"></a>XMLHttpRequest对象</h3></li></ol><h2 id="概念论述-10"><a href="#概念论述-10" class="headerlink" title="概念论述"></a>概念论述</h2><h3 id="Ajax的工作过程和XMLHttpRequest对象的用法"><a href="#Ajax的工作过程和XMLHttpRequest对象的用法" class="headerlink" title="Ajax的工作过程和XMLHttpRequest对象的用法"></a>Ajax的工作过程和XMLHttpRequest对象的用法</h3><p>Ajax通过XmlHttpRequest对象来向服务器发异步请求，从服务器获得数据，然后用javascript来操作DOM而更新页面。这其中最关键的一步就是从服务器获得请求数据。<br>要清楚这个过程和原理，我们必须对 XMLHttpRequest有所了解。<br>XMLHttpRequest的属性有<br>onreadystatechange 每次状态改变所触发事件的事件处理程序。 　　responseText 从服务器进程返回数据的字符串形式。 　　responseXML 从服务器进程返回的DOM兼容的文档数据对象。 　　status 从服务器返回的数字代码，比如常见的404（未找到）和200（已就绪） 　　status Text 伴随状态码的字符串信息 　　readyState 对象状态值  　　　　0 (未初始化) 对象已建立，但是尚未初始化（尚未调用open方法） 　　　　1 (初始化) 对象已建立，尚未调用send方法 　　　　2 (发送数据) send方法已调用，但是当前的状态及http头未知 　　　　3 (数据传送中) 已接收部分数据，因为响应及http头不全，这时通过responseBody和responseText获取部分数据会出现错误， 　　　　4 (完成) 数据接收完毕,此时可以通过通过responseXml和responseText获取完整的回应数据<br>创建XMLHttpRequest对象的方法<br><strong>function</strong> CreateXmlHttp() {      _//非IE浏览器创建XmlHttpRequest对象_     <strong>if</strong> (window.XmlHttpRequest) {         xmlhttp = <strong>new</strong> XmlHttpRequest();     }      _//IE浏览器创建XmlHttpRequest对象_     <strong>if</strong> (window.ActiveXObject) {         <strong>try</strong> {             xmlhttp = <strong>new</strong> ActiveXObject(“Microsoft.XMLHTTP”);         }         <strong>catch</strong> (e) {             <strong>try</strong> {                 xmlhttp = <strong>new</strong> ActiveXObject(“msxml2.XMLHTTP”);             }             <strong>catch</strong> (ex) { }         }     } }  <strong>function</strong> Ustbwuyi() {      <strong>var</strong> data = document.getElementById(“username”).value;     CreateXmlHttp();     <strong>if</strong> (!xmlhttp) {         alert(“创建xmlhttp对象异常！”);         <strong>return</strong> <strong>false</strong>;     }      xmlhttp.open(“POST”, url, <strong>false</strong>);      xmlhttp.onreadystatechange = <strong>function</strong> () {         <strong>if</strong> (xmlhttp.readyState == 4) {             document.getElementById(“user1”).innerHTML = “数据正在加载…”;             <strong>if</strong> (xmlhttp.status == 200) {                 document.write(xmlhttp.responseText);             }         }     }     xmlhttp.send(); }<br>函数首先检查XMLHttpRequest的整体状态并且保证它已经完成（readyStatus=4），即数据已经发送完毕。然后根据服务器的设定询问请求状态，如果一切已经就绪（status=200），那么就执行下面需要的操作。<br>对于XmlHttpRequest的两个方法，open和send，其中open方法指定了：</p><ol><li>向服务器提交数据的类型，即post还是get。</li><li>请求的url地址和传递的参数。</li><li>传输方式，false为同步，true为异步。默认为true。如果是异步通信方式(true)，客户机就不等待服务器的响应；如果是同步方式(false)，客户机就要等到服务器返回消息后才去执行其他操作。我们需要根据实际需要来指定同步方式，在某些页面中，可能会发出多个请求，甚至是有组织有计划有队形大规模的高强度的request，而后一个是会覆盖前一个的，这个时候当然要指定同步方式。<br>Send方法用来发送请求。<br>(img)<br>对于Ajax，我们可以把服务器端看成一个数据接口，它返回的是一个纯文本流，当然，这个文本流可以是XML格式，可以是Html，可以是Javascript代码，也可以只是一个字符串。这时候，XMLHttpRequest向服务器端请求这个页面，服务器端将文本的结果写入页面，这和普通的web开发流程是一样的，不同的是，客户端在异步获取这个结果后，不是直接显示在页面，而是先由javascript来处理，然后再显示在页面。</li></ol><p>XMLHttpRequest对象使用的详细过程</p><h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><p><strong>var</strong> xhr = <strong>new</strong> XMLHttpRequest();  xhr.open(“get”, “Url”, <strong>false</strong>); _//是否异步 _ xhr.send(<strong>null</strong>);  <strong>if</strong> ((xhr.status &gt;= 200 &amp;&amp; xhr.status &lt; 300) || xhr.status == 304) { alert(xhr.responseText); window.location.reload();  }  <strong>else</strong> { alert(“Request was unsuccessful: “ + xhr.status);  }</p><h4 id="异步使用"><a href="#异步使用" class="headerlink" title="异步使用"></a>异步使用</h4><p><strong>var</strong> xhr = <strong>new</strong> XMLHttpRequest(); xhr.onreadystatechange=stateChange;  xhr.open(“post”, “Url”, <strong>true</strong>); _//是否异步 _ xhr.send(<strong>null</strong>);  <strong>function</strong> stateChange() {  <strong>if</strong> (xhr.readyState==4) { _// 4 = “loaded” _   <strong>if</strong> ((xhr.status &gt;= 200 &amp;&amp; xhr.status &lt; 300) || xhr.status == 304) {    alert(xhr.responseText);    window.location.reload(); } <strong>else</strong> {    alert(“Request was unsuccessful: “ + xhr.status);      }   } }</p><h4 id="发送数据"><a href="#发送数据" class="headerlink" title="发送数据"></a>发送数据</h4><p><strong>var</strong> xhr = <strong>new</strong> XMLHttpRequest();  xhr.open(“post”, “Url”, <strong>false</strong>); _//是否异步 _ <strong>var</strong> data = <strong>new</strong> FormData(); data.append(“bookId”, “1111”); data.append(“bookName”, “Web程序设计”);  _//var aForm = document.getElementById(“form1”); _ _//var data = new FormData(aForm); _ xhr.send(data); <strong>if</strong> ((xhr.status &gt;= 200 &amp;&amp; xhr.status &lt; 300) || xhr.status == 304) { alert(xhr.responseText); window.location.reload(); } <strong>else</strong> { alert(“Request was unsuccessful: “ + xhr.status); }</p><h4 id="Ajax帮助器"><a href="#Ajax帮助器" class="headerlink" title="Ajax帮助器"></a>Ajax帮助器</h4><ol><li>安装。可以使用图形化介面安装</li></ol><ul><li>Install-Package Microsoft.jQuery.Unobtrusive.Ajax –version 3.0.0</li></ul><ol><li>在页面上包含库 </li></ol><ul><li><script src="\~/Scripts/jquery.unobtrusive-ajax.js"></script><br>@Ajax.ActionLink()<br>@using(Ajax.BeginForm()) { }<h5 id="AjaxOptions类"><a href="#AjaxOptions类" class="headerlink" title="AjaxOptions类"></a>AjaxOptions类</h5>包含：UpdateTargetID、Url、HttpMethod、……<br>使用Ajax回调(OnBegin、OnComplete、OnFailure、OnSuccess)</li></ul>]]></content>
      
      
      <categories>
          
          <category> Tech </category>
          
      </categories>
      
      
        <tags>
            
            <tag> .NET </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webdebugging</title>
      <link href="2020-06-14-webdebugging/"/>
      <url>2020-06-14-webdebugging/</url>
      
        <content type="html"><![CDATA[<h1 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h1><p>最近期末复习中，觉得钉钉自带的视频播放器十分地反人类，于是Google寻找直播回放的下载方法，看到某B站up主（precisely，他自称是初三学生。。。）利用了Fiddler抓包成功下载了钉钉视频。由于整个过程对于窝这个不怎么接触网络应用、计网仅限于商科生水平（因为管院开的课）的<del>菜逼</del>商科生来说过于玄幻，所以突然对抓包这个行当产生了浓厚的兴趣。再加上之前看 <em>Computer Networking: Topdown Approach</em> 的时候熟练地安装<del>也仅限于安装</del>了wireshark，就顺便查了一下fiddler和wireshark的区别和系统支持，并准备把大作业写完之后花两三天的时间学习一下。</p>]]></content>
      
      
      <categories>
          
          <category> Network </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web-debugging </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>The Notebook of CS61B</title>
      <link href="2020-06-11-The-Notebook-of-CS61B/"/>
      <url>2020-06-11-The-Notebook-of-CS61B/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction-to-Java"><a href="#Introduction-to-Java" class="headerlink" title="Introduction to Java"></a>Introduction to Java</h1><ul><li>[x] 1</li><li>[ ] 2</li><li>[ ] 3</li><li>[ ] 4</li><li>[ ] 5</li><li>[ ] 6</li><li>[ ] 7</li></ul><h1 id="Lists"><a href="#Lists" class="headerlink" title="Lists"></a>Lists</h1><h2 id="Mystery-of-Walrus"><a href="#Mystery-of-Walrus" class="headerlink" title="Mystery of Walrus"></a>Mystery of Walrus</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Walrus a = <span class="keyword">new</span> Walrus(<span class="number">1000</span>, <span class="number">8.3</span>);</span><br><span class="line">Walrus b;</span><br><span class="line">b = a;</span><br><span class="line">b.weight = <span class="number">5</span>;</span><br><span class="line">System.out.println(a);</span><br><span class="line">System.out.println(b);</span><br></pre></td></tr></table></figure><h3 id="The-Golden-Rule-of-Equals-GRoE"><a href="#The-Golden-Rule-of-Equals-GRoE" class="headerlink" title="The Golden Rule of Equals (GRoE)"></a>The Golden Rule of Equals (GRoE)</h3><p>When you write <code>y = x</code>, you are telling the Java interpreter to copy the bits from x into y. This Golden Rule of Equals (GRoE) is the root of all truth when it comes to understanding our Walrus Mystery.</p><h3 id="Object-Instantiation"><a href="#Object-Instantiation" class="headerlink" title="Object Instantiation"></a>Object Instantiation</h3><p>8 primitive types: byte, short, int, long, float, double, boolean, char.</p><p>Everything else, including arrays, is not a primitive type but rather a <code>reference type</code>.</p><p>When we <em>instantiate</em> an Object using <code>new</code>, java:</p><ol><li>allocates a box for each instance variable of the class, and fills them with a default value.</li><li>The constructor then usually (but not always) fills every box with some other value.</li></ol><h3 id="Reference-Variable-Declaration"><a href="#Reference-Variable-Declaration" class="headerlink" title="Reference Variable Declaration"></a>Reference Variable Declaration</h3><p>When we <em>declare</em> a variable of any reference type (Walrus, Dog, Planet, array, etc.), Java allocates a box of 64 bits, no matter what type of object.</p><p>The 64 bit box contains <em>not the data about the walrus, but instead the address of the Walrus in memory</em>.</p><h3 id="Box-and-Pointer-Notation"><a href="#Box-and-Pointer-Notation" class="headerlink" title="Box and Pointer Notation"></a>Box and Pointer Notation</h3><p><img src="/img/20-06-someWalrus_simplified_bit_notation.png" alt=""></p><h3 id="Parameter-Passing-Pass-by-Value-VIP"><a href="#Parameter-Passing-Pass-by-Value-VIP" class="headerlink" title="Parameter Passing: Pass by Value (VIP)"></a>Parameter Passing: Pass by Value (VIP)</h3><p>When you pass parameters to a function, you are also simply copying the bits. In other words, the GRoE also applies to parameter passing. Copying the bits is usually called “<strong>pass by value</strong>“. In Java, we <strong>always</strong> pass by value.</p><p>so in this expression<code>Walrus b;</code>, b is undefined, not null.</p><h3 id="Instantiation-of-Arrays"><a href="#Instantiation-of-Arrays" class="headerlink" title="Instantiation of Arrays"></a>Instantiation of Arrays</h3><p><code>Int[] a</code> -&gt; <strong>declaration</strong> </p><p>Creates a 64 bit box (the size of its address) intended only for storing a reference to an int array.</p><p>No Object is instantiated.</p><p><code>new int[]{1, 2, 4, 94}</code> -&gt;instantiation </p><p>new object, which is an int array,  is created by this expression and anonymous.</p><p><code>Int[] a =new int[]{1, 2, 4, 94}</code> contains:<br>Declaration/ Instantiation/ Assignment: put the address of the new object into that 64 bit box. </p><p>so if <code>a = [something new]</code> that address would be lost and never get that back.</p><h3 id="The-Law-of-the-Broken-Futon"><a href="#The-Law-of-the-Broken-Futon" class="headerlink" title="The Law of the Broken Futon"></a>The Law of the Broken Futon</h3>]]></content>
      
      
      <categories>
          
          <category> Algorithms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> data-structure </tag>
            
            <tag> notes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bookmark</title>
      <link href="2020-06-11-Bookmark/"/>
      <url>2020-06-11-Bookmark/</url>
      
        <content type="html"><![CDATA[<p>This post is used for storing some great articles/blogs/posts I have lately been reading and that I would like to share with you guys, so basically a bookmark page. Currently the bookmarks are going to be developed in time order and I will label the exact time when I found them and some of their outstanding features and my comments.</p><h1 id="2020-06"><a href="#2020-06" class="headerlink" title="2020-06"></a>2020-06</h1><h2 id="The-Math-Ceiling-Where’s-your-cognitive-breaking-point"><a href="#The-Math-Ceiling-Where’s-your-cognitive-breaking-point" class="headerlink" title="The Math Ceiling: Where’s your cognitive breaking point? "></a><a href="https://mathwithbaddrawings.com/2015/04/08/the-math-ceiling-wheres-your-cognitive-breaking-point" target="_blank" rel="noopener" >The Math Ceiling: Where’s your cognitive breaking point? </a></h2><p><strong># 20-06-11</strong></p><p>It’s mostly about <code>the Law of the Broken Futon</code>, of how, in the long term, doing problems without full understanding may doom people to failure later down the line.</p><h1 id="Relating-to-covid-19-in-china"><a href="#Relating-to-covid-19-in-china" class="headerlink" title="Relating to covid-19 in china"></a>Relating to covid-19 in china</h1><p>The thing is, you literally can’t just put on your site those passages about covid-19 in china. Cuz apparently, the minute when you are trying to do stuff like that, the net police will locate you and based on the severity of your acts you may well be charged or detained, all your devices temporarily confiscated for their scrunity of anti-gov contents and rubber-stamp censorship. Then your families, your friends, people in the vicinity, if not conscious of exactlywhat’s happening here, will be petrified and keep asking how bad things you have done are. It’s such a shit regime that desires to take full control of you. It’s agonizing and at the same time frustrating.<br>One way to do this is to use a anonymous account and quote that account on your site thus less chance of be charged with indirect web connection, or you can wait until you are entirely disconnected with the gov, for instance, emigrating to US, EU etc.</p><p><a href="https://wallhole.gitbook.io/2019-n/" target="_blank" rel="noopener">here’s the covert link</a></p>]]></content>
      
      
      <categories>
          
          <category> Pins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> thoughts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>科学的バックアップ：ドライブの選択とバックアッププラン</title>
      <link href="2020-06-10-Scientifically-Back-up/"/>
      <url>2020-06-10-Scientifically-Back-up/</url>
      
        <content type="html"><![CDATA[<p>随着要处理的文件和工作越来越多，一个网盘。在此之前，我使用的是iCloud中国大陆50GB·¥6月付的套餐，主要的用途是备份相册、存放课程教材资料和iOS应用的数据储存，但是50G的容量看来已经略显不足：光是我从2014年turn-to-iPhone之后积累的相片和视频就占去了一半的空间（24G），且在我去年从iPhone 7升级到iPhone 8之后，新存储的相片也因为容量不足停止了iCloud更新（也就是说如果突发事件我手机坏掉了的话，这半年来的图片将会完全丢失）。其次，大量的课程资料和Goodnotes文件也占用了将近20GB的空间，中文扫描版PDF最可怕，因为其本质是相片，几乎一本中等规格的书就60-80MB，像那些巨无霸型的中译本如《数据库系统原理》、《离散数学及其应用》和《深入理解计算机系统》更是动辄上百MB，虽说现在全英文阅读已经不再苦手，但中译资源寻得已经很不易了，不珍惜地收藏起来说不定之后就找不到了。再者就是漫画，AppleBooks上堆积了大量的书目，虽然epub格式非常便利，但这么多的东西真的是我们所需要的吗？在复杂的当下，各种各样的硬件软件问题都有可能发生，我们的工作项目也应该找到合理的方式来抵抗损耗，如果云盘只是用来堆叠书影音资源和文件的话，那就真的是太暴殄天物了。</p><p>本文将从以下几个角度来讨论关于科学备份和网盘有关的这些问题。</p><h1 id="网盘的选择"><a href="#网盘的选择" class="headerlink" title="网盘的选择"></a>网盘的选择</h1><h1 id="鸡蛋不一定要放到一个篮子里"><a href="#鸡蛋不一定要放到一个篮子里" class="headerlink" title="鸡蛋不一定要放到一个篮子里"></a>鸡蛋不一定要放到一个篮子里</h1><h1 id="Git-Blog-Project：直接复制粘贴就算迁移了吗"><a href="#Git-Blog-Project：直接复制粘贴就算迁移了吗" class="headerlink" title="Git, Blog, Project：直接复制粘贴就算迁移了吗"></a>Git, Blog, Project：直接复制粘贴就算迁移了吗</h1><h1 id="Optimization-of-iCloud-Storage-ln-Command"><a href="#Optimization-of-iCloud-Storage-ln-Command" class="headerlink" title="Optimization of iCloud Storage, ln Command"></a>Optimization of iCloud Storage, <code>ln</code> Command</h1><p><a href="https://www.cnblogs.com/jiuyueguang/p/3174296.html" target="_blank" rel="noopener">https://www.cnblogs.com/jiuyueguang/p/3174296.html</a></p><h1 id="时光机器与硬盘选择：MacOS"><a href="#时光机器与硬盘选择：MacOS" class="headerlink" title="时光机器与硬盘选择：MacOS"></a>时光机器与硬盘选择：MacOS</h1>]]></content>
      
      
      <categories>
          
          <category> Tech </category>
          
      </categories>
      
      
        <tags>
            
            <tag> drive </tag>
            
            <tag> iCloud </tag>
            
            <tag> hardware </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>So Siri&#39;s really got some good taste on music.</title>
      <link href="2020-06-09-So-Siri-s-really-got-some-good-taste-on-music/"/>
      <url>2020-06-09-So-Siri-s-really-got-some-good-taste-on-music/</url>
      
        <content type="html"><![CDATA[<p>Aww she’s such a nice lady and really makes my <del>day</del>night.</p><p><img src="/img/20-06-09-siri.jpg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Music </category>
          
      </categories>
      
      
        <tags>
            
            <tag> daily </tag>
            
            <tag> britpop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Francais Renconté</title>
      <link href="2020-06-09-Francais-Renconte/"/>
      <url>2020-06-09-Francais-Renconte/</url>
      
        <content type="html"><![CDATA[<p>本帖就主要用来记录一下学法语碰见的一些有趣东西吧。</p><!-- qmore --><h1 id="2020"><a href="#2020" class="headerlink" title="2020"></a>2020</h1><h2 id="Update-juin"><a href="#Update-juin" class="headerlink" title="Update juin"></a>Update juin</h2><h3 id="juillet-aout-L’etymologie-des-noms-du-mois"><a href="#juillet-aout-L’etymologie-des-noms-du-mois" class="headerlink" title="juillet/ août: L’étymologie des noms du mois."></a>juillet/ août: L’étymologie des noms du mois.</h3><p>首先默写法语的月份：<code>janvier février mars avril mai juin juillet août septembre octobre novembre décembre.</code></p><p>其中從6-9月之間的7、8 juillet 和 août 兩個月，其實是為了紀念凱撒和奧古斯都而插進去的。因為septembre -&gt; sept(法語7) , octobre -&gt;octo- (8), novembre -&gt; neuf, décembre -&gt; dix/ dec(10的詞根，如decade, decimal), 可以看到剛好9之後的月份都被順延了兩個月。 </p><p>凱撒是因為（<strong>Gaius Julius Caesar，蓋烏斯．尤利烏斯．凱撒 </strong>，12 July 100 BC – 15 March 44 BC）他本人的生日剛好就在7月，而奧古斯都大帝（屋大維 <strong>Gaius Octavius Thurinus</strong>）是因為建立羅馬帝國的過程中幾次輝煌勝仗都發生在這個月。具體的有關羅馬帝國的歷史，推薦大家去看日本作家塩野七生（しおのななみ）的「羅馬人的故事」和HBO美劇「羅馬」。</p><p>實際上，這兩個月取代的是古羅馬曆法的五、六月份，三月份即是羅馬曆法的第一個月。關於這一點，窩在網上找到了如下資料。</p><blockquote><p>古羅馬曆比現行的公曆少了2個月，一共只有10個月，冬天是沒有月份名稱的。古羅馬曆的月份算法從春天的March（3月）開始，持續到年底的December（12月），現行公曆的January（1月）和February（2月）這段期間，最初是個沒有名字的空白，是後來曆法改革才加進去的。</p><p><a href="https://www.thenewslens.com/article/103963" target="_blank" rel="noopener">https://www.thenewslens.com/article/103963</a></p></blockquote><p>除了9-12的数字词根，前面的月份也都有各自的l’étymologie。</p><p>janvier 源自Ancient Roman myths的兩面神Janus。Janus是個門神，前後各有一張面孔，既能回望也能前視，所以亦是終結與開始、過渡與轉折之神。1月承先啟後，終結過去開創未來。</p><p>février 源自<em>(La.)</em> februarius（淨化），因為古羅馬人會在2月的滿月時通過煙燻舉行淨化儀式，BTW，fume 也是與同源的。</p><p>mars 源自Ancient Roman myths的戰神Mars。瑪爾斯是孿生兄弟Romulus and Remus的父親，而這對雙生子就是古羅馬城的奠基人，因此古羅馬曆的第一個月，就以代表源頭的戰神瑪爾斯命名。</p><p>avril 的來源有不同的說法，傳統上認為與拉丁語的「開」有關（英文aperture「孔；開口」同源），因為4月時百花齊「開」。另一種說法認為源自愛神Aphrodite <em>(Greek.)</em>，是為了崇敬愛神而以其命名的。</p><p>mai 源自Ancient Roman myths的富饒與春天女神Maia，她的名字或表「大」之意，和英文的major有關，代表的是越來越大的「生長」，讓我們隱約看到了大自然的欣欣向榮與生機盎然。希臘神話也有一個同名卻不相干的Maia，這個邁亞是擎天巨神Atlas之女、眾神使者Hermes之母。</p><p>juin 源自Ancient Roman myths的女性與婚姻女神Juno，她是主神Jupiter之妻，戰神瑪爾斯之母。由於朱諾主管女性與婚姻，所以6月也與女人結婚有了連結，英文「6月新娘」（June bride）一說由此而來。</p><h3 id="pret-a-porter-les-variants"><a href="#pret-a-porter-les-variants" class="headerlink" title="prêt-à-porter: les variants"></a>prêt-à-porter: les variants</h3><p>Prêt-à-porter 指成衣，是法語中對於服裝的分類的一種。成衣是相對於以前裁縫店量身定做的那種衣服而言的，舊時訂做衣物需要一定的訂貨提前期，不能當場拿到貨品，成衣的出現解決了這種不便，顧客可以在大量成衣中選擇合適的衣物，直接購買現成品。</p><p>Prêt-à-porter 本身就是ready to wear的意思，prêt à faire quelque chose 表示準備好做某件事，porter則表示穿在身上，這樣，從prêt-à-porter還可以衍生為其他的詞組，meaning ready to do sth，如 法式餐廳叫做 Prêt-À-Manger，豬肉retailer可以叫做Prêt-à-Pork, 有一個著名的服裝設計APP就叫做prêt-à-template, etc.</p><p><img src="/img/20-06-09-pretapork.jpg" alt=""> </p><h1 id="2022"><a href="#2022" class="headerlink" title="2022"></a>2022</h1><p>来到巴黎之后才知道不用会讲髪文也能在法国玩的很开心。<br>13e arrondisement初来觉得很第三世界感，走了之后又会怀念它附近的Quatier Chinois。<br>巴黎Métro并没有传闻中的那么脏，报站十分简洁。<br>坐RER B线去CDG路过93省给人惊吓。<br>普阿蓝大区是一长串连绵不绝的海岸线。<br>Escargots没有那么恶心。</p>]]></content>
      
      
      <categories>
          
          <category> Languages </category>
          
      </categories>
      
      
        <tags>
            
            <tag> french </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java review</title>
      <link href="2020-06-08-Java-review/"/>
      <url>2020-06-08-Java-review/</url>
      
        <content type="html"><![CDATA[<p>java basic knowledge review.</p><a id="more"></a><h1 id="Primitive-Data-Types"><a href="#Primitive-Data-Types" class="headerlink" title="Primitive Data Types"></a>Primitive Data Types</h1><p>byte, short, int, long, float, double, char, boolean</p><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><p>Actually a class.</p><p>String a = “ “</p><h3 id="String-Operation"><a href="#String-Operation" class="headerlink" title="String Operation"></a>String Operation</h3><p>String + String = StringString</p><p>String + Int = (String) StringInt // Int converted into String automatically</p><h3 id="String-Method"><a href="#String-Method" class="headerlink" title="String Method"></a>String Method</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">randomString.equals( <span class="string">" "</span>);</span><br><span class="line"></span><br><span class="line">randomString.toLowerCase();</span><br><span class="line">randomString.toUpperCase();</span><br></pre></td></tr></table></figure><h2 id="Ternary-Operator"><a href="#Ternary-Operator" class="headerlink" title="Ternary Operator"></a>Ternary Operator</h2><p><code>isTrue ? resultTrue : resultFalse</code></p><h1 id="方法-method"><a href="#方法-method" class="headerlink" title="方法 method"></a>方法 method</h1><h2 id="DiffMerge-Tool"><a href="#DiffMerge-Tool" class="headerlink" title="DiffMerge Tool"></a>DiffMerge Tool</h2><h2 id="Parse-values-from-Strings"><a href="#Parse-values-from-Strings" class="headerlink" title="Parse values from Strings"></a>Parse values from Strings</h2><p><code>Interger.parseInt( )</code> 将字符串解析成int</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">String numberAsString = <span class="string">"2018"</span>;</span><br><span class="line"><span class="keyword">int</span> number = Interger.parseInt(numberAsString);</span><br><span class="line"></span><br><span class="line">numberAsString += <span class="number">1</span>; ()</span><br><span class="line"><span class="comment">// automatically convert int 1 to String "1";</span></span><br><span class="line"><span class="comment">// 20181</span></span><br><span class="line">number += <span class="number">1</span>;</span><br><span class="line"><span class="comment">// 2019</span></span><br></pre></td></tr></table></figure><blockquote><p>You could say that <em>parsing a string of characters</em> is <em>analyzing this string to find tokens, or items and then create a structure from the result</em>.</p><p>In your example, calling <code>Integer.parseInt</code> on a string is <em>parsing this string to find an integer</em>.</p><p>So, if you have:</p><p><code>String someString = &quot;123&quot;;</code></p><p>And then you invoke:</p><p><code>int i = Integer.parseInt( someString );</code></p><p>You’re telling java to analyze the <code>&quot;123&quot;</code> string and find an integer there.</p><p><strong>Other example:</strong> One of the actions the java compiler does, when it compiles your source code is to “parse” your .java file and create tokens that match the java grammar.</p><p>When you fail to write the source code properly ( for instance forget to add a <code>;</code> at the end of a statement ), it is the parser who identifies the error.</p><p>Here’s more information: <a href="http://en.wikipedia.org/wiki/Parse" target="_blank" rel="noopener">http://en.wikipedia.org/wiki/Parse</a></p></blockquote><h1 id="OOP"><a href="#OOP" class="headerlink" title="OOP"></a>OOP</h1><h2 id="Classes-Constructors"><a href="#Classes-Constructors" class="headerlink" title="Classes, Constructors"></a>Classes, Constructors</h2><h3 id="Inheritage"><a href="#Inheritage" class="headerlink" title="Inheritage"></a>Inheritage</h3><h4 id="keyword-this-super"><a href="#keyword-this-super" class="headerlink" title="keyword this/ super"></a>keyword this/ super</h4><p>The <code>this</code> keyword refers to the <strong>current object</strong> in a method or constructor.</p><p>e.g. <code>this.model = model; // where model is both the name for the class attribute and the parameter</code></p><p>while <code>super</code> is used to call parental fields.</p><h4 id="this-call-super-call"><a href="#this-call-super-call" class="headerlink" title="this() call / super() call"></a>this() call / super() call</h4><p>this() calls the current constructor，多个构造方法时，减少代码重复。</p><p>super() calls the parental constructor.</p><h2 id="Static-Instance-methods-variables"><a href="#Static-Instance-methods-variables" class="headerlink" title="Static / Instance methods / variables"></a>Static / Instance methods / variables</h2><h3 id="static-methods"><a href="#static-methods" class="headerlink" title="static methods"></a>static methods</h3><p>static methods are declared using <code>static</code> modifier.</p><p>Cannot access instance methods / variables directly.</p><p><em>Used for operations that do not require any data from an instance of the class.</em> </p><p>—&gt; Methods that do not use instance variables should be declared as static methods.</p><p>In static method we cannot use <code>this</code> keyword.</p><h3 id="Calling"><a href="#Calling" class="headerlink" title="Calling"></a>Calling</h3><p>Two patterns: <code>ClassName.methodName();</code> or <code>methodName() // only if in the same class</code></p><h3 id="Declaration"><a href="#Declaration" class="headerlink" title="Declaration"></a>Declaration</h3><p>Does the method use any fields?</p><p>Yes—&gt; Instance method || N0—&gt; Static methods.</p><h3 id="static-variables"><a href="#static-variables" class="headerlink" title="static variables"></a>static variables</h3><p> e.g. when using <code>Scanner</code> will declare scanner as a static variable</p><p><em>static methods can access directly.</em></p><h2 id="Class-Features"><a href="#Class-Features" class="headerlink" title="Class Features"></a>Class Features</h2><h3 id="Compositions"><a href="#Compositions" class="headerlink" title="Compositions"></a>Compositions</h3><h3 id="Encapsulation"><a href="#Encapsulation" class="headerlink" title="Encapsulation"></a>Encapsulation</h3><ul><li><p>when we dont want unathorized external access.</p></li><li><p>when we change a name of a method or a field, we dont want to change it in every class that the exact name has appeared.  </p></li></ul><h3 id="Polymorphism"><a href="#Polymorphism" class="headerlink" title="Polymorphism"></a>Polymorphism</h3><p>Actions being performed differently on different object. </p><h2 id="Inner-and-Abstract-Classes"><a href="#Inner-and-Abstract-Classes" class="headerlink" title="Inner and Abstract Classes"></a>Inner and Abstract Classes</h2><h2 id="Interfaces"><a href="#Interfaces" class="headerlink" title="Interfaces"></a>Interfaces</h2><h1 id="Array-Lists-Autoboxing-and-Unboxing"><a href="#Array-Lists-Autoboxing-and-Unboxing" class="headerlink" title="Array, Lists, Autoboxing and Unboxing"></a>Array, Lists, Autoboxing and Unboxing</h1><h2 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h2><h3 id="Array-methods"><a href="#Array-methods" class="headerlink" title="Array methods"></a>Array methods</h3><h2 id="List-and-ArrayList"><a href="#List-and-ArrayList" class="headerlink" title="List and ArrayList"></a>List and ArrayList</h2><p>list is a public interface</p><p>while ArrayList inherits from it.</p><h2 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Class ArrayList&lt;E&gt;</span><br><span class="line"></span><br><span class="line">java.lang.Object</span><br><span class="line">    java.util.AbstractCollection&lt;E&gt;</span><br><span class="line">       java.util.AbstractList&lt;E&gt;</span><br><span class="line">        java.util.ArrayList&lt;E&gt;</span><br><span class="line">        </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">RandomAccess</span>, <span class="title">Cloneable</span>, <span class="title">Serializable</span></span></span><br></pre></td></tr></table></figure><p>链表，用来存放String类型的对象，那么你可以像下面这样做：</p><p>ArrayList<String> list = new ArrayList<String>();</p><p>如果你需要创建一个指定初始容量的数组链表，你可以像下面这样做：</p><p>ArrayList<Integer> list = new ArrayList<Integer>(7);</p><p>注意：ArrayList类只支持对象类型，不支持 基础数据类型。就是说ArrayList对象只能存放对象，不能存放基础数据类型的数据。</p><h3 id="ArrayList常用方法"><a href="#ArrayList常用方法" class="headerlink" title="ArrayList常用方法"></a>ArrayList常用方法</h3><p>下面是总结了一些比较常用的ArrayList类成员方法：</p><ul><li><p>增加元素到链表中</p><ul><li><p><code>boolean add(Element e)</code><br>增加指定元素到链表尾部.</p></li><li><p><code>void add(int index, Element e)</code><br>增加指定元素到链表指定位置.</p></li></ul></li><li><p>从链表中删除元素</p><ul><li><p><code>void clear()</code><br>从链表中删除所有元素.</p></li><li><p><code>E remove(int index)</code><br>删除链表中指定位置的元素.</p></li><li><p><code>protected void removeRange(int start, int end)</code><br>删除链表中从某一个位置开始到某一个位置结束的元素。</p></li></ul></li><li><p>获取链表中的元素</p><ul><li><p><code>E get(int index)</code><br>获取链表中指定位置处的元素.</p></li><li><p><code>Object[] toArray()</code><br>获取一个数组，数组中所有元素是链表中的元素.（即将链表转换为一个数组）</p></li></ul></li><li><p>修改某个元素</p><ul><li><code>E set(int index, E element)</code><br>将链表中指定位置上的元素替换成新元素。</li></ul></li><li><p>搜索元素</p><ul><li><p><code>boolean contains(Object o)</code><br>如果链表包含指定元素，返回true.</p></li><li><p><code>int indexOf(Object o)</code><br>返回元素在链表中第一次出现的位置，如果返回-1，表示链表中没有这个元素。</p></li><li><p><code>int lastIndexOf(Object o)</code><br>返回元素在链表中最后一次出现的位置，如果返回-1，表示链表中没有这个元素。</p></li></ul></li><li><p>检查链表是否为空</p><ul><li><code>boolean isEmpty()</code><br>返回true表示链表中没有任何元素.</li></ul></li><li><p>获取链表大小</p><ul><li><code>int size()</code><br>返回链表长度（链表包含元素的个数）.</li></ul></li></ul><p><strong><em>Attention</em></strong></p><ul><li><p>向Arraylist里面传递对象时，不是新建一个对象存在Arraylist里面，而是引用它。（OOP作业 消费券）</p></li><li><p><code>//remember to use wrapper classes in ArrayList Type.</code> </p></li><li><p>```java<br>Error (someLine, someByte):<br> java: unexpected type<br>   required: reference<br>   found:    int   // You have to appoint wrapper class</p><pre><code>               // which is the capital-written version                // of the primitive types. //Interger, Boolean, etc.</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  ##</span><br><span class="line"></span><br><span class="line">## Autoboxing and Unboxing. </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## Java Generics 泛型</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Basic I&#x2F;O 控制台输入输出 </span><br><span class="line"></span><br><span class="line">## 控制台输入</span><br><span class="line"></span><br><span class="line">### Scanner 类 &#96;import java.util.Scanner;&#96;</span><br><span class="line"></span><br><span class="line">&#96;Scanner sc &#x3D; new Scanner(System.in);&#96;</span><br><span class="line"></span><br><span class="line">**&#x2F;&#x2F;读取字符串** </span><br><span class="line"></span><br><span class="line">&#96;String n &#x3D; sc.nextLine();&#96;</span><br><span class="line"></span><br><span class="line">**&#x2F;&#x2F;读取单个字符**</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;java</span><br><span class="line">String s &#x3D; sc.nextLine();  &#x2F;&#x2F;Scanner 没有读取单个字符的方法</span><br><span class="line"></span><br><span class="line">char[] chars &#x3D; s.toArray();  </span><br><span class="line"></span><br><span class="line">char c &#x3D; chars[0];   &#x2F;&#x2F;c即为单个字符</span><br></pre></td></tr></table></figure></li></ul><h1 id="Packages-and-Naming-Conventions"><a href="#Packages-and-Naming-Conventions" class="headerlink" title="Packages and Naming  Conventions"></a>Packages and Naming  Conventions</h1><h1 id="Java-Collections"><a href="#Java-Collections" class="headerlink" title="Java Collections"></a>Java Collections</h1><h1 id="Java-FX"><a href="#Java-FX" class="headerlink" title="Java FX"></a>Java FX</h1><h1 id="Networking-Programming"><a href="#Networking-Programming" class="headerlink" title="Networking Programming"></a>Networking Programming</h1><h1 id="Databases"><a href="#Databases" class="headerlink" title="Databases"></a>Databases</h1><h1 id="Debugging"><a href="#Debugging" class="headerlink" title="Debugging"></a>Debugging</h1>]]></content>
      
      
      <categories>
          
          <category> Tech </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NexTテーマをDIYしよう</title>
      <link href="2020-06-05-NexT%E3%83%86%E3%83%BC%E3%83%9E%E3%82%92DIY%E3%81%97%E3%82%88%E3%81%86/"/>
      <url>2020-06-05-NexT%E3%83%86%E3%83%BC%E3%83%9E%E3%82%92DIY%E3%81%97%E3%82%88%E3%81%86/</url>
      
        <content type="html"><![CDATA[<p>本文分为两个部分，第一部分基本配置展示直接可以在<code>themes/next &gt; _config.yml</code>中配置的元素，第二部分展示CSS等魔改。</p><a id="more"></a><h1 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h1><h2 id="设置语言"><a href="#设置语言" class="headerlink" title="设置语言"></a>设置语言</h2><p>位置：<code>_config.yml &gt; language</code></p><h2 id="主题的Scheme"><a href="#主题的Scheme" class="headerlink" title="主题的Scheme"></a>主题的Scheme</h2><p><code>/themes/next &gt;  _config.yml &gt; scheme</code><br>主题默认有几个样式，可以自己更改。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#scheme: Muse</span><br><span class="line">scheme: Mist</span><br><span class="line">#scheme: Pisces</span><br><span class="line">#scheme: Gemini</span><br></pre></td></tr></table></figure></p><h3 id="Dark-Mode"><a href="#Dark-Mode" class="headerlink" title="Dark Mode"></a>Dark Mode</h3><p>Dark Mode居然是依据设备的配置来的！！也就是说可怜的win10会一直遭受刺眼的强光，能不能改一改呢。<br><img src="/img/20-06-06-darkmode.jpg" alt=""></p><h2 id="菜单"><a href="#菜单" class="headerlink" title="菜单"></a>菜单</h2><p>开启了Tags 之后依然是 <code>Cannot GET /tags/</code><br>需要在<code>/source/</code>里面创建一个tags文件夹来render tag页面<br><code>$hexo new page &quot;tags&quot;</code></p><p>然后在<code>source/tags/index.md</code>中修改内容为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: &quot;Tags・タッグ・標籤&quot; </span><br><span class="line">type: tags</span><br><span class="line">layout: &quot;tags&quot;</span><br><span class="line">comments: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure><br>这样就可以正常显示了。<br><img src="/img/20-6-5-tags.png" alt=""></p><p><em>200812补充</em><br>Categories的设置同理：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: Categories</span><br><span class="line">date: 2020-08-12 14:21:08</span><br><span class="line">type: categories</span><br><span class="line">layout: &quot;categories&quot;</span><br><span class="line">comments: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure></p><h2 id="图标"><a href="#图标" class="headerlink" title="图标"></a>图标</h2><h3 id="RSS"><a href="#RSS" class="headerlink" title="RSS"></a>RSS</h3><p>需要先安装插件 <code>npm install --save hexo-generator-feed</code><br>在hexo root dir 的<code>_config.yml</code>配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># Extensions</span><br><span class="line">## Plugins: http:&#x2F;&#x2F;hexo.io&#x2F;plugins&#x2F;</span><br><span class="line">#RSS订阅</span><br><span class="line">plugin:</span><br><span class="line">- hexo-generator-feed</span><br><span class="line">#Feed Atom</span><br><span class="line">feed:</span><br><span class="line">type: atom</span><br><span class="line">path: atom.xml</span><br><span class="line">limit: 20</span><br></pre></td></tr></table></figure><br>去掉RSS的注释 <code>RSS: /atom.xml || fa fa-rss</code> 就可以显示了。<br>也可以自己烧制feed，这时就要更改链接了。</p><h2 id="HomePage"><a href="#HomePage" class="headerlink" title="HomePage"></a>HomePage</h2><h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3><p>首先确保 <code>excerpt_description: true</code>处于开启状态，然后在自己的博文里面要断句的地方添加<code>&lt;!-- more --&gt;</code>就可以显示了。</p><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><p>字体窝佬卡了好半天，网上的说法大都是要去改CSS，然而不知道那个<code>.swig</code>文件的语法究竟如何，窝佬最后发现可以直接在主题配置文件里面引用google fonts，并且英文字体都<del>很巧妙的支持了中文（就很有意思）</del><strong>更正：</strong> 后来发现在MAC上显示了中文显示了是因为窝佬配置了<code>base.styl</code>: <code>// Font families.$font-family-chinese      = &quot;YuppySC-Regular&quot; ,&quot;PingFang SC&quot;, &quot;STYuanti-SC-Regular&quot;, &quot;Microsoft YaHei&quot;;</code>。<em>BTW中文web font太过麻烦+龟速，窝佬目前Literally放弃。</em> 这样来看，想要添加日文字体也只用仿照中文的写法增加<code>font-family-japanese</code> 再在global merge的时候优先级读入 即可。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">font:</span><br><span class="line">  enable: true</span><br><span class="line"></span><br><span class="line">  # Uri of fonts host, e.g. https:&#x2F;&#x2F;fonts.googleapis.com (Default).</span><br><span class="line">  host: https:&#x2F;&#x2F;fonts.googleapis.com&#x2F;css2?family&#x3D;Nunito:wght@600&amp;display&#x3D;swap</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  # Font options:</span><br><span class="line">  # &#96;external: true&#96; will load this font family from &#96;host&#96; above.</span><br><span class="line">  # &#96;family: Times New Roman&#96;. Without any quotes.</span><br><span class="line">  # &#96;size: x.x&#96;. Use &#96;em&#96; as unit. Default: 1 (16px)</span><br><span class="line"></span><br><span class="line">  # Global font settings used for all elements inside &lt;body&gt;.</span><br><span class="line">  global:</span><br><span class="line">    external: true</span><br><span class="line">    family: Nunito</span><br><span class="line">    size:</span><br></pre></td></tr></table></figure><br>要注意的就是千万别用默认的api（那个就很迷，很多字体都不支持），而是用Google fonts选定字体后生成的特定CDN链接。</p><h2 id="Post"><a href="#Post" class="headerlink" title="Post"></a>Post</h2><h3 id="tag颜色问题"><a href="#tag颜色问题" class="headerlink" title="tag颜色问题"></a>tag颜色问题</h3><p>看到Dark Mode下post底部的tag颜色对比度很低，无法辨别。<br><img src="/img/20-06-06-tag3.png" alt=""><br>可以直接F12看CSS设置<br><img src="/img/20-06-06-tag1.png" alt=""><br>发现是给颜色指定了名称的，那么就好找了，最后<code>_variables &gt; base.styl</code>中找到了相关设置。<br><img src="/img/20-06-06-tag2.png" alt=""><br>把dark mode下的颜色从<code>grey-dim</code>改到<code>grey-dark</code>应该就可以了，看颜色定义发现grey-dark用的是<code>#999</code>。要是还差点意思的话可以加深点，<code>#888</code>之类的。<br><img src="/img/20-06-06-tag.png" alt=""><br>最后效果。</p><h3 id="图片上传问题"><a href="#图片上传问题" class="headerlink" title="图片上传问题"></a>图片上传问题</h3><p>经历了一次短暂的图片未显示的问题，是相对路径出了问题。<br>图片上传基本上是用md语法的<code>![](&lt;your pic path&gt;)</code>，可以为每一个post自动建立一个资料文件夹，也可以统一自定路径放置。<br>窝遇到的问题是Home可以显示图片，但post单独的页面显示不了，后来发现<code>/img/picture.jpg</code> 是需要在最前面加上<code>/</code>的。 而<code>~/</code>是表示系统用户的根目录。<br>这一点，在hexo生成的页面文件目录中也可以看到。<br><img src="/img/20-06-06-pic.png" alt=""><br>如果忘掉了<code>/</code>，post页面就会在自己的文件夹里面找img，也就无法显示了。</p>]]></content>
      
      
      <categories>
          
          <category> Blogging </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开博碎碎念</title>
      <link href="2020-06-05-%E5%BC%80%E5%8D%9A%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
      <url>2020-06-05-%E5%BC%80%E5%8D%9A%E7%A2%8E%E7%A2%8E%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<h1 id="终于开博了"><a href="#终于开博了" class="headerlink" title="终于开博了"></a>终于开博了</h1><p>写博客这件事早就在窝佬todolist上躺了很久，但是一直没能将其实现，一是前端知识学习进展缓慢，天花乱坠的配置砸过来已经够让人头晕了，更别说自己在看不懂的框架语言里面改css，把博客做成自己看得顺眼的样子，二就是懒癌了。当然，毕竟已经2020，生命的意义和时代精神就是四处搬轮子，可谓destinationism，也不是不可以理解。<br><a id="more"></a><br>TBH，用Hexo是因为仅仅花了点时间看了hexo的文档，再加上操作简便，GithubPages自动配置深得人心，还有一些广为人知的热门theme，就干脆先用着比较好。虽然<code>&lt;usrname&gt;.github.io</code>这个repo的page只能强制部署到<code>master</code> branch，而hexo框架本身生成的网页在github上的<code>Gh-page</code>，关于这一点<a href="https://github.com/fastai/fastpages/issues/119#issuecomment-591025246" target="_blank" rel="noopener">开发团队自己都还没有解决方案</a>，所以窝佬自己的<code>github.io</code>repo上<strong>仅有hexo生成的网页，没有hexo项目源文件</strong>&lt;/u&gt;。<del>考虑到本MacBook年寿已高，随时用时光机备份也不太现实，暂时定期考虑把本博客源码在iCloud上留个备份。</del></p><blockquote><p>@chekos fastpages currently doesn’t support user pages, only project pages. So you must name your repo something other than paco-el-chato.github.io, for example name your repo blog.</p><p>— hamelsmu commented on 26 Feb</p></blockquote><p>另外，Temporarily本博客是部署在GP上的，自由世界访问是没问题的，但是墙国直连问题就多多，即便如此，窝佬也没有部署到coding上的打算，毕竟如果连正确上网的姿势都不会的人，也没有向他们分享<del>沙雕新闻</del>生活的意愿惹。</p><h1 id="有什么可写的"><a href="#有什么可写的" class="headerlink" title="有什么可写的"></a>有什么可写的</h1><p>嗯，一直就想用Blog来取缔<a href="www.yinxiang.com">印象笔记</a>，虽然编辑什么的是麻烦一点，但是它客户端再不<em>轻量</em>和<em>支持md</em>的话，我今年双十一是不会再给它续费了。经过一个月的尝试之后，在窝这Notion和本地的Typora都可以取代它，更别说国区还有死妈审查，这都让人对写笔记丧失了热情。<em>Sublime</em>的md功能大概只能显示一些特别基础的样式，窝猜应该还有更好用的md插件，等会研究一下。</p><p>[ ] sumlime markdown<br>[ ] blog decoration</p><h1 id="建站过程与心得"><a href="#建站过程与心得" class="headerlink" title="建站过程与心得"></a>建站过程与心得</h1><p>嗯，本站的建站经历，在之后也会一一分享到本博客上，主要是hexo的傻瓜式配置和<code>hexo-theme-next</code>主题的DIY。最近要期末了，所以不会更新地太频繁。</p><h3 id="就酱，本站于今日开博，虽然现在啥都没有。"><a href="#就酱，本站于今日开博，虽然现在啥都没有。" class="headerlink" title="就酱，本站于今日开博，虽然现在啥都没有。"></a>就酱，本站于今日开博，虽然现在啥都没有。</h3>]]></content>
      
      
      <categories>
          
          <category> Blogging </category>
          
      </categories>
      
      
        <tags>
            
            <tag> daily </tag>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>The day of 2^6</title>
      <link href="2020-06-04-The-day-of-2-6/"/>
      <url>2020-06-04-The-day-of-2-6/</url>
      
        <content type="html"><![CDATA[<h2 id="一点杂想"><a href="#一点杂想" class="headerlink" title="一点杂想"></a>一点杂想</h2><p>昨夜凌晨的豆瓣时间线，零零星星的广播不断涌现，然后又光速消失，蜡烛🕯️的emoji图标被系统判定为禁止发布的内容，甚至有相当一部分因为不到十个字的内容被关进7天小黑屋。不遗忘是我们普通人力所能及的最大缅怀。</p><p><strong>维园的灯光</strong></p><p><img src="/img/weiyuan64.jpg" alt="weiyuan"></p>]]></content>
      
      
      <categories>
          
          <category> News Comments </category>
          
      </categories>
      
      
        <tags>
            
            <tag> daily </tag>
            
            <tag> hk </tag>
            
            <tag> ccp </tag>
            
            <tag> memoir </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
